{
    "version": "0.0.1",
    "data": [
        {
            "source": "constant",
            "constant": {
                "result": { "type": "nat" },
                "value": { "type": "bigint", "value": "123" }
            },
            "exported": { "target": "inner", "name": "d724e4e5-dec9-4524-9633-ab1ccc79d6c4" }
        },
        {
            "source": "input",
            "input": {
                "result": { "type": "text" },
                "ui": {
                    "type": "TextInputComponent",
                    "style": { "type": "text" },
                    "label": "text",
                    "placeholder": "text",
                    "default": "text"
                }
            },
            "exported": { "target": "inner", "name": "1fe1608f-c5fa-4f6e-a999-a6cb342d62b3" }
        },
        {
            "source": "input",
            "input": {
                "result": { "type": "nat" },
                "ui": {
                    "type": "NumberInputComponent",
                    "style": { "type": "nat", "min": "10", "max": "100" },
                    "label": "number2",
                    "placeholder": "number2",
                    "default": "15"
                }
            },
            "exported": { "target": "inner", "name": "789ea5fa-a957-4266-ba65-1c1db646dd66" }
        },
        {
            "source": "input",
            "input": {
                "result": { "type": "bool" },
                "ui": {
                    "type": "SwitchInputComponent",
                    "style": {
                        "inlinePrompt": true,
                        "activeText": "open",
                        "inactiveText": "close"
                    },
                    "label": "Switch",
                    "default": true
                }
            },
            "exported": { "target": "inner", "name": "00ccede3-3ca3-450b-8e2a-d5f74e1871f4" }
        },
        {
            "source": "input",
            "input": {
                "result": {
                    "type": "variant",
                    "subitems": [
                        { "key": "option1", "type": { "type": "null" } },
                        { "key": "option2", "type": { "type": "null" } },
                        { "key": "option3", "type": { "type": "null" } }
                    ]
                },
                "ui": {
                    "type": "DropdownInputComponent",
                    "style": {},
                    "label": "Dropdown",
                    "default": "option1"
                }
            },
            "exported": { "target": "inner", "name": "c9ce7215-d790-48e8-b068-2f0051d41cfc" }
        },
        {
            "source": "input",
            "input": {
                "result": { "type": "int64" },
                "ui": {
                    "type": "TimeInputComponent",
                    "style": { "type": "day", "unit": "s" },
                    "label": "Time",
                    "default": "1683993600"
                }
            },
            "exported": { "target": "inner", "name": "b98131c9-8006-461d-a1c7-3471818b32c2" }
        },
        {
            "source": "canister",
            "canister": {
                "canister_id": { "fixed": true, "value": "ipcaz-wiaaa-aaaai-qoy4q-cai" },
                "info": {
                    "module_hash": "cf2571dee5547597efc7c156e7c530e2939a0a42f239d5ecc1788af1280c02c0",
                    "updated": 1684045710792
                },
                "candid": {
                    "custom": false,
                    "did": "type RecursiveArg = record {\n  recursive2 : RecursiveArg;\n  recursive : opt RecursiveArg;\n  field1 : text;\n  field2 : text;\n};\ntype RecursiveArg2 = variant { Recursive2 : RecursiveArg2 };\ntype RecursiveArg3 = record { items : vec RecursiveArg3 };\ntype TestRecord = record { field1 : text; field2 : text };\ntype TestVariant = variant {\n  Field1;\n  Field2 : text;\n  Field3 : record { age : nat; name : text };\n};\nservice : {\n  __get_candid_interface_tmp_hack : () -> (text) query;\n  exchange : (nat, nat) -> (nat, nat) query;\n  getName : () -> (text) query;\n  hello : (text) -> (text);\n  hello2 : (text) -> (text) query;\n  negative : (int) -> (int) query;\n  now : () -> (nat64) query;\n  setName : (text) -> () query;\n  testTuple : (record { text; text }) -> (text, text) query;\n  testTuple2 : (null) -> (text, text) query;\n  testVec : (vec text) -> (vec text) query;\n  test_blob : (vec nat8) -> (vec nat8) query;\n  test_empty : (text, empty, text) -> (text, empty) query;\n  test_float32 : (text) -> (text, float32) query;\n  test_float32_2 : (float32, text) -> (text, float32) query;\n  test_float64 : (text, float64) -> (text, float64) query;\n  test_float64_2 : (text, float32) -> (text, float64) query;\n  test_float64_3 : (text) -> (text, float64) query;\n  test_func : (text, func () -> ()) -> (text, func () -> ()) query;\n  test_func2 : (text) -> (text, func () -> ()) query;\n  test_func3 : (text) -> (text, func () -> ()) query;\n  test_opt : (opt text) -> (opt text) query;\n  test_record : (TestRecord) -> (TestRecord) query;\n  test_recursive : (RecursiveArg) -> (RecursiveArg) query;\n  test_recursive2 : (RecursiveArg2) -> (RecursiveArg2) query;\n  test_recursive3 : (RecursiveArg3) -> (RecursiveArg3) query;\n  test_reserved : (text, reserved, text) -> (text, reserved) query;\n  test_service : (text, service {}) -> (text, service {}) query;\n  test_service2 : (text) -> (text, service {}) query;\n  test_tuple : (record { nat; nat }) -> (\n      record { nat; nat },\n      record { text; text },\n    ) query;\n  test_variant : (TestVariant) -> (TestVariant) query;\n}",
                    "javascript": "export const idlFactory = ({ IDL }) => {\n  const RecursiveArg = IDL.Rec();\n  const RecursiveArg2 = IDL.Rec();\n  const RecursiveArg3 = IDL.Rec();\n  const TestRecord = IDL.Record({ 'field1' : IDL.Text, 'field2' : IDL.Text });\n  RecursiveArg.fill(\n    IDL.Record({\n      'recursive2' : RecursiveArg,\n      'recursive' : IDL.Opt(RecursiveArg),\n      'field1' : IDL.Text,\n      'field2' : IDL.Text,\n    })\n  );\n  RecursiveArg2.fill(IDL.Variant({ 'Recursive2' : RecursiveArg2 }));\n  RecursiveArg3.fill(IDL.Record({ 'items' : IDL.Vec(RecursiveArg3) }));\n  const TestVariant = IDL.Variant({\n    'Field1' : IDL.Null,\n    'Field2' : IDL.Text,\n    'Field3' : IDL.Record({ 'age' : IDL.Nat, 'name' : IDL.Text }),\n  });\n  return IDL.Service({\n    '__get_candid_interface_tmp_hack' : IDL.Func([], [IDL.Text], ['query']),\n    'exchange' : IDL.Func([IDL.Nat, IDL.Nat], [IDL.Nat, IDL.Nat], ['query']),\n    'getName' : IDL.Func([], [IDL.Text], ['query']),\n    'hello' : IDL.Func([IDL.Text], [IDL.Text], []),\n    'hello2' : IDL.Func([IDL.Text], [IDL.Text], ['query']),\n    'negative' : IDL.Func([IDL.Int], [IDL.Int], ['query']),\n    'now' : IDL.Func([], [IDL.Nat64], ['query']),\n    'setName' : IDL.Func([IDL.Text], [], ['query']),\n    'testTuple' : IDL.Func(\n        [IDL.Tuple(IDL.Text, IDL.Text)],\n        [IDL.Text, IDL.Text],\n        ['query'],\n      ),\n    'testTuple2' : IDL.Func([IDL.Null], [IDL.Text, IDL.Text], ['query']),\n    'testVec' : IDL.Func([IDL.Vec(IDL.Text)], [IDL.Vec(IDL.Text)], ['query']),\n    'test_blob' : IDL.Func([IDL.Vec(IDL.Nat8)], [IDL.Vec(IDL.Nat8)], ['query']),\n    'test_empty' : IDL.Func(\n        [IDL.Text, IDL.Empty, IDL.Text],\n        [IDL.Text, IDL.Empty],\n        ['query'],\n      ),\n    'test_float32' : IDL.Func([IDL.Text], [IDL.Text, IDL.Float32], ['query']),\n    'test_float32_2' : IDL.Func(\n        [IDL.Float32, IDL.Text],\n        [IDL.Text, IDL.Float32],\n        ['query'],\n      ),\n    'test_float64' : IDL.Func(\n        [IDL.Text, IDL.Float64],\n        [IDL.Text, IDL.Float64],\n        ['query'],\n      ),\n    'test_float64_2' : IDL.Func(\n        [IDL.Text, IDL.Float32],\n        [IDL.Text, IDL.Float64],\n        ['query'],\n      ),\n    'test_float64_3' : IDL.Func([IDL.Text], [IDL.Text, IDL.Float64], ['query']),\n    'test_func' : IDL.Func(\n        [IDL.Text, IDL.Func([], [], [])],\n        [IDL.Text, IDL.Func([], [], [])],\n        ['query'],\n      ),\n    'test_func2' : IDL.Func(\n        [IDL.Text],\n        [IDL.Text, IDL.Func([], [], [])],\n        ['query'],\n      ),\n    'test_func3' : IDL.Func(\n        [IDL.Text],\n        [IDL.Text, IDL.Func([], [], [])],\n        ['query'],\n      ),\n    'test_opt' : IDL.Func([IDL.Opt(IDL.Text)], [IDL.Opt(IDL.Text)], ['query']),\n    'test_record' : IDL.Func([TestRecord], [TestRecord], ['query']),\n    'test_recursive' : IDL.Func([RecursiveArg], [RecursiveArg], ['query']),\n    'test_recursive2' : IDL.Func([RecursiveArg2], [RecursiveArg2], ['query']),\n    'test_recursive3' : IDL.Func([RecursiveArg3], [RecursiveArg3], ['query']),\n    'test_reserved' : IDL.Func(\n        [IDL.Text, IDL.Reserved, IDL.Text],\n        [IDL.Text, IDL.Reserved],\n        ['query'],\n      ),\n    'test_service' : IDL.Func(\n        [IDL.Text, IDL.Service({})],\n        [IDL.Text, IDL.Service({})],\n        ['query'],\n      ),\n    'test_service2' : IDL.Func(\n        [IDL.Text],\n        [IDL.Text, IDL.Service({})],\n        ['query'],\n      ),\n    'test_tuple' : IDL.Func(\n        [IDL.Tuple(IDL.Nat, IDL.Nat)],\n        [IDL.Tuple(IDL.Nat, IDL.Nat), IDL.Tuple(IDL.Text, IDL.Text)],\n        ['query'],\n      ),\n    'test_variant' : IDL.Func([TestVariant], [TestVariant], ['query']),\n  });\n};\nexport const init = ({ IDL }) => { return []; };"
                },
                "method": {
                    "name": "exchange",
                    "arg": {
                        "type": "tuple",
                        "subitems": [
                            { "key": "_0_", "type": { "type": "nat" } },
                            { "key": "_1_", "type": { "type": "nat" } }
                        ]
                    },
                    "result": {
                        "type": "tuple",
                        "subitems": [
                            { "key": "_0_", "type": { "type": "nat" } },
                            { "key": "_1_", "type": { "type": "nat" } }
                        ]
                    }
                },
                "arg": {
                    "type": {
                        "type": "tuple",
                        "subitems": [
                            { "key": "_0_", "type": { "type": "nat" } },
                            { "key": "_1_", "type": { "type": "nat" } }
                        ]
                    },
                    "constraint": {
                        "type": "tuple",
                        "subitems": [
                            {
                                "type": { "type": "nat" },
                                "constraint": {
                                    "type": "force",
                                    "source": {
                                        "source": "inner",
                                        "inner": {
                                            "name": "d724e4e5-dec9-4524-9633-ab1ccc79d6c4",
                                            "result": { "type": "nat" },
                                            "extra": {
                                                "constant": true,
                                                "runtime": {
                                                    "ok": { "type": "bigint", "value": "123" }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "type": { "type": "nat" },
                                "constraint": {
                                    "type": "force",
                                    "source": {
                                        "source": "inner",
                                        "inner": {
                                            "name": "789ea5fa-a957-4266-ba65-1c1db646dd66",
                                            "result": { "type": "nat" },
                                            "extra": { "constant": false }
                                        }
                                    }
                                }
                            }
                        ]
                    }
                },
                "identity": { "from": "anonymous" }
            },
            "exported": { "target": "inner", "name": "e6feff53-ef9e-40dd-9a72-6b595c23f954" }
        },
        {
            "source": "inner",
            "inner": {
                "name": "e6feff53-ef9e-40dd-9a72-6b595c23f954",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        { "key": "_0_", "type": { "type": "nat" } },
                        { "key": "_1_", "type": { "type": "nat" } }
                    ]
                },
                "extra": { "constant": false }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        { "key": "_0_", "type": { "type": "nat" } },
                        { "key": "_1_", "type": { "type": "nat" } }
                    ]
                },
                "transform": { "type": "function", "code": "data = data[0];\nresult = data;" },
                "to": { "type": "nat" }
            },
            "exported": { "target": "inner", "name": "871c7365-0e41-4c50-9619-df815640e61e" }
        },
        {
            "source": "inner",
            "inner": {
                "name": "e6feff53-ef9e-40dd-9a72-6b595c23f954",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        { "key": "_0_", "type": { "type": "nat" } },
                        { "key": "_1_", "type": { "type": "nat" } }
                    ]
                },
                "extra": { "constant": false }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        { "key": "_0_", "type": { "type": "nat" } },
                        { "key": "_1_", "type": { "type": "nat" } }
                    ]
                },
                "transform": { "type": "function", "code": "data = data[1];\nresult = data;" },
                "to": { "type": "nat" }
            },
            "exported": { "target": "inner", "name": "" }
        }
    ],
    "transmits": [
        {
            "transmit": "show",
            "from": {
                "type": "tuple",
                "subitems": [
                    { "key": "_0_", "type": { "type": "nat" } },
                    { "key": "_1_", "type": { "type": "text" } },
                    { "key": "_2_", "type": { "type": "nat" } },
                    { "key": "_3_", "type": { "type": "bool" } },
                    {
                        "key": "_4_",
                        "type": {
                            "type": "variant",
                            "subitems": [
                                { "key": "option1", "type": { "type": "null" } },
                                { "key": "option2", "type": { "type": "null" } },
                                { "key": "option3", "type": { "type": "null" } }
                            ]
                        }
                    },
                    { "key": "_5_", "type": { "type": "int64" } },
                    {
                        "key": "_6_",
                        "type": {
                            "type": "tuple",
                            "subitems": [
                                { "key": "_0_", "type": { "type": "nat" } },
                                { "key": "_1_", "type": { "type": "nat" } }
                            ]
                        }
                    },
                    { "key": "_7_", "type": { "type": "nat" } },
                    { "key": "_8_", "type": { "type": "nat" } }
                ]
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        { "key": "_0_", "type": { "type": "nat" } },
                        { "key": "_1_", "type": { "type": "text" } },
                        { "key": "_2_", "type": { "type": "nat" } },
                        { "key": "_3_", "type": { "type": "bool" } },
                        {
                            "key": "_4_",
                            "type": {
                                "type": "variant",
                                "subitems": [
                                    { "key": "option1", "type": { "type": "null" } },
                                    { "key": "option2", "type": { "type": "null" } },
                                    { "key": "option3", "type": { "type": "null" } }
                                ]
                            }
                        },
                        { "key": "_5_", "type": { "type": "int64" } },
                        {
                            "key": "_6_",
                            "type": {
                                "type": "tuple",
                                "subitems": [
                                    { "key": "_0_", "type": { "type": "nat" } },
                                    { "key": "_1_", "type": { "type": "nat" } }
                                ]
                            }
                        },
                        { "key": "_7_", "type": { "type": "nat" } },
                        { "key": "_8_", "type": { "type": "nat" } }
                    ]
                },
                "transform": { "type": "function", "code": "result = data[0];" },
                "to": { "type": "nat" }
            },
            "view": {
                "from": { "type": "nat" },
                "constraint": { "name": "TextView", "ui": { "customLabel": "result" } }
            }
        }
    ],
    "trigger": { "type": "button", "text": "Run", "loading": false }
}
