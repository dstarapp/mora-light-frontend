{
    "version": "0.0.1",
    "data": [
        {
            "source": "canister",
            "canister": {
                "canister_id": {
                    "fixed": true,
                    "value": "3we4s-lyaaa-aaaak-aegrq-cai"
                },
                "info": {
                    "module_hash": "c38df5ecc4def90e52b9fc4e2ff84fdd74fb88bef67fdc62c0f6a854c8511891",
                    "updated": 1685032150517
                },
                "candid": {
                    "custom": false,
                    "did": "type Vol__2 = \n record {\n   value0: nat;\n   value1: nat;\n };\ntype Vol__1 = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype Vol = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype TxnResult = \n variant {\n   err:\n    record {\n      code:\n       variant {\n         DuplicateExecutedTransfer;\n         InsufficientAllowance;\n         InsufficientBalance;\n         InsufficientGas;\n         LockedTransferExpired;\n         NoLockedTransfer;\n         NonceError;\n         UndefinedError;\n       };\n      message: text;\n    };\n   ok: Txid__4;\n };\ntype TxnRecord__3 = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype TxnRecord__2 = \n record {\n   caller: AccountId__3;\n   gas: Gas;\n   index: nat;\n   msgCaller: opt principal;\n   nonce: nat;\n   timestamp: Time__1;\n   transaction: Transaction;\n   txid: Txid__4;\n };\ntype TxnRecord__1 = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype TxnRecord = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype Txid__5 = blob;\ntype Txid__4 = blob;\ntype Txid__3 = blob;\ntype Txid__2 = blob;\ntype Txid__1 = blob;\ntype Txid = blob;\ntype TxReceipt = \n variant {\n   Err:\n    variant {\n      AmountTooSmall;\n      BlockUsed;\n      ErrorOperationStyle;\n      ErrorTo;\n      InsufficientAllowance;\n      InsufficientBalance;\n      LedgerTrap;\n      Other: text;\n      Unauthorized;\n    };\n   Ok: nat;\n };\ntype TxAccount = text;\ntype Ttid__2 = nat;\ntype Ttid__1 = nat;\ntype Ttid = nat;\ntype TrieList = \n record {\n   data: vec record {\n               Txid__1;\n               TradingOrder__1;\n             };\n   total: nat;\n   totalPage: nat;\n };\ntype TransferResult = \n variant {\n   Err: TransferError__2;\n   Ok: BlockIndex;\n };\ntype TransferFromError = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientAllowance: record {allowance: nat;};\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype TransferFromArgs = \n record {\n   amount: nat;\n   created_at_time: opt nat64;\n   fee: opt nat;\n   from: Account;\n   memo: opt blob;\n   to: Account;\n };\ntype TransferError__2 = \n variant {\n   BadFee: record {expected_fee: ICP;};\n   InsufficientFunds: record {balance: ICP;};\n   TxCreatedInFuture;\n   TxDuplicate: record {duplicate_of: BlockIndex;};\n   TxTooOld: record {allowed_window_nanos: nat64;};\n };\ntype TransferError__1 = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype TransferError = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture;\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld: record {allowed_window_nanos: Duration;};\n };\ntype TransferArgs__1 = \n record {\n   amount: ICP;\n   created_at_time: opt Timestamp__3;\n   fee: ICP;\n   from_subaccount: opt SubAccount;\n   memo: Memo;\n   to: AccountIdentifier;\n };\ntype TransferArgs = \n record {\n   amount: nat;\n   created_at_time: opt Timestamp__2;\n   fee: opt nat;\n   from_subaccount: opt Subaccount;\n   memo: opt blob;\n   to: Account;\n };\ntype Transaction = \n record {\n   data: opt blob;\n   from: AccountId__3;\n   operation: Operation;\n   to: AccountId__3;\n   value: nat;\n };\ntype TradingStatus = \n variant {\n   Cancelled;\n   Closed;\n   Pending;\n   Todo;\n };\ntype TradingResult = \n variant {\n   err:\n    record {\n      code:\n       variant {\n         InsufficientBalance;\n         InvalidAmount;\n         NonceError;\n         TransactionBlocking;\n         TransferException;\n         UnacceptableVolatility;\n         UndefinedError;\n       };\n      message: text;\n    };\n   ok: record {\n         filled: vec OrderFilled;\n         status: TradingStatus;\n         txid: Txid;\n       };\n };\ntype TradingOrder__1 = \n record {\n   account: AccountId__1;\n   data: opt blob;\n   expiration: Time;\n   fee: record {\n          fee0: int;\n          fee1: int;\n        };\n   filled: vec OrderFilled;\n   gas: record {\n          gas0: nat;\n          gas1: nat;\n        };\n   icrc1Account: opt record {\n                       owner: principal;\n                       subaccount: opt blob;\n                     };\n   index: nat;\n   nonce: nat;\n   orderPrice: OrderPrice__1;\n   orderType: OrderType__1;\n   refund: record {\n             nat;\n             nat;\n             nat;\n           };\n   remaining: OrderPrice__1;\n   status: TradingStatus;\n   time: Time;\n   toids: vec Toid;\n   txid: Txid;\n };\ntype TradingOrder = \n record {\n   account: AccountId__1;\n   data: opt blob;\n   expiration: Time;\n   fee: record {\n          fee0: int;\n          fee1: int;\n        };\n   filled: vec OrderFilled;\n   gas: record {\n          gas0: nat;\n          gas1: nat;\n        };\n   icrc1Account: opt record {\n                       owner: principal;\n                       subaccount: opt blob;\n                     };\n   index: nat;\n   nonce: nat;\n   orderPrice: OrderPrice__1;\n   orderType: OrderType__1;\n   refund: record {\n             nat;\n             nat;\n             nat;\n           };\n   remaining: OrderPrice__1;\n   status: TradingStatus;\n   time: Time;\n   toids: vec Toid;\n   txid: Txid;\n };\ntype TokenType__1 = \n variant {\n   Cycles;\n   Icp;\n   Token: principal;\n };\ntype TokenType = \n variant {\n   Cycles;\n   Icp;\n   Token: principal;\n };\ntype TokenSymbol = text;\ntype TokenStd__1 = \n variant {\n   cycles;\n   dft;\n   dip20;\n   drc20;\n   ext;\n   icp;\n   icrc1;\n   ledger;\n   other: text;\n };\ntype TokenStd = \n variant {\n   cycles;\n   dft;\n   dip20;\n   drc20;\n   ext;\n   icp;\n   icrc1;\n   ledger;\n   other: text;\n };\ntype TokenInfo = \n record {\n   principal;\n   TokenSymbol;\n   TokenStd;\n };\ntype Toid__3 = nat;\ntype Toid__2 = nat;\ntype Toid__1 = nat;\ntype Toid = nat;\ntype To = text;\ntype Timestamp__4 = nat;\ntype Timestamp__3 = record {timestamp_nanos: nat64;};\ntype Timestamp__2 = nat64;\ntype Timestamp__1 = nat;\ntype Timestamp = nat;\ntype Timeout = nat32;\ntype Time__1 = int;\ntype Time = int;\ntype Tcid = nat;\ntype Task__2 = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype Task__1 = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype TaskResult = \n record {\n   Status__1;\n   opt Receipt;\n   opt Err;\n };\ntype TaskEvent = \n record {\n   attempts: Attempts;\n   callbackStatus: opt Status__2;\n   result: TaskResult;\n   task: Task;\n   time: Time;\n   toid: opt Toid__1;\n   ttid: Ttid__1;\n   txHash: blob;\n };\ntype Task = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype SysMode = \n variant {\n   ClosingOnly;\n   DisabledTrading;\n   GeneralTrading;\n   ReadOnly;\n };\ntype Subaccount__1 = blob;\ntype Subaccount = blob;\ntype SubAccount = blob;\ntype Status__3 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status__2 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status__1 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status = \n variant {\n   Cancelled;\n   Completed;\n   Failed;\n   PartiallyCompletedAndCancelled;\n   Pending;\n };\ntype Spender = text;\ntype Shares = nat;\ntype ShareChange = \n variant {\n   Burn: Shares;\n   Mint: Shares;\n   NoChange;\n };\ntype Setting = \n record {\n   EN_DEBUG: bool;\n   MAX_CACHE_NUMBER_PER: nat;\n   MAX_CACHE_TIME: nat;\n   MAX_STORAGE_TRIES: nat;\n };\ntype SagaTask = \n record {\n   comp: opt Compensation;\n   status: Status__3;\n   task: Task__2;\n   ttid: Ttid__2;\n };\ntype SagaData = \n record {\n   actuator:\n    record {\n      callees: vec record {\n                     Callee;\n                     CalleeStatus;\n                   };\n      errIndex: nat;\n      errorLogs: vec record {\n                       nat;\n                       ErrorLog;\n                     };\n      firstErrIndex: nat;\n      firstIndex: nat;\n      index: nat;\n      taskLogs: vec record {\n                      Ttid;\n                      TaskEvent;\n                    };\n      tasks: record {\n               vec record {\n                     Ttid;\n                     Task__1;\n                   };\n               vec record {\n                     Ttid;\n                     Task__1;\n                   };\n             };\n    };\n   aliveOrders: vec record {\n                      Toid__2;\n                      Time;\n                    };\n   autoClearTimeout: int;\n   firstIndex: nat;\n   index: nat;\n   orders: vec record {\n                 Toid__2;\n                 Order;\n               };\n   taskEvents: vec record {\n                     Toid__2;\n                     vec Ttid;\n                   };\n };\ntype Sa__1 = vec nat8;\ntype Sa = vec nat8;\ntype RoundItem__1 = \n record {\n   closedPrice: opt float64;\n   content: text;\n   end: Time;\n   isSettled: bool;\n   minCapital: nat;\n   name: text;\n   quoteToken: variant {\n                 token0;\n                 token1;\n               };\n   start: Time;\n };\ntype RoundItem = \n record {\n   closedPrice: opt float64;\n   content: text;\n   end: Time;\n   isSettled: bool;\n   minCapital: nat;\n   name: text;\n   quoteToken: variant {\n                 token0;\n                 token1;\n               };\n   start: Time;\n };\ntype Receipt = \n variant {\n   DIP20:\n    variant {\n      approve: TxReceipt;\n      balanceOf: nat;\n      transfer: TxReceipt;\n      transferFrom: TxReceipt;\n    };\n   DRC20:\n    variant {\n      approve: TxnResult;\n      balanceOf: Amount__2;\n      dropAccount;\n      executeTransfer: TxnResult;\n      lockTransfer: TxnResult;\n      lockTransferFrom: TxnResult;\n      transfer: TxnResult;\n      transferBatch: vec TxnResult;\n      transferFrom: TxnResult;\n      txnRecord: opt TxnRecord__2;\n    };\n   ICRC1:\n    variant {\n      icrc1_balance_of: nat;\n      icrc1_transfer: variant {\n                        Err: TransferError;\n                        Ok: nat;\n                      };\n    };\n   ICRC1New:\n    variant {\n      icrc1_balance_of: nat;\n      icrc1_transfer: variant {\n                        Err: TransferError__1;\n                        Ok: nat;\n                      };\n    };\n   ICRC2:\n    variant {\n      icrc2_approve: variant {\n                       Err: ApproveError;\n                       Ok: nat;\n                     };\n      icrc2_transfer_from: variant {\n                             Err: TransferFromError;\n                             Ok: nat;\n                           };\n    };\n   ICTokens: variant {\n               burn: TxnResult;\n               mint: TxnResult;\n             };\n   Ledger: variant {\n             account_balance: ICP;\n             transfer: TransferResult;\n           };\n   This: variant {\n           dip20Send;\n           dip20SendComp;\n         };\n   __block;\n   __skip;\n };\ntype Quantity = nat;\ntype PriceWeighted = \n record {\n   token0TimeWeighted: nat;\n   token1TimeWeighted: nat;\n   updateTime: Timestamp__1;\n };\ntype PriceResponse = \n record {\n   price: nat;\n   quantity: nat;\n };\ntype Price = nat;\ntype PeriodNs = int;\ntype Participant = \n record {\n   historyVol: float64;\n   limit: Amount__1;\n   updatedTime: Time;\n   used: Amount__1;\n };\ntype Order__1 = \n record {\n   allowPushing: variant {\n                   Closed;\n                   Opening;\n                 };\n   callbackStatus: opt Status__3;\n   compStrategy: CompStrategy;\n   comps: List;\n   data: opt blob;\n   name: text;\n   status: OrderStatus;\n   tasks: List_1;\n   time: Time;\n };\ntype OrderType__1 = \n variant {\n   FAK;\n   FOK;\n   LMT;\n   MKT;\n };\ntype OrderType = \n variant {\n   FAK;\n   FOK;\n   LMT;\n   MKT;\n };\ntype OrderStatusResponse = \n variant {\n   Completed: TxnRecord;\n   Failed: TradingOrder;\n   None;\n   Pending: TradingOrder;\n };\ntype OrderStatus = \n variant {\n   Blocking;\n   Compensating;\n   Doing;\n   Done;\n   Recovered;\n   Todo;\n };\ntype OrderSide = \n variant {\n   Buy;\n   Sell;\n };\ntype OrderPrice__1 = \n record {\n   price: Price;\n   quantity: variant {\n               Buy: record {\n                      Quantity;\n                      Amount;\n                    };\n               Sell: Quantity;\n             };\n };\ntype OrderPrice = \n record {\n   price: Price;\n   quantity: variant {\n               Buy: record {\n                      Quantity;\n                      Amount;\n                    };\n               Sell: Quantity;\n             };\n };\ntype OrderFilled__1 = \n record {\n   counterparty: Txid;\n   time: Time;\n   token0Value: BalanceChange;\n   token1Value: BalanceChange;\n };\ntype OrderFilled = \n record {\n   counterparty: Txid;\n   time: Time;\n   token0Value: BalanceChange;\n   token1Value: BalanceChange;\n };\ntype Order = \n record {\n   allowPushing: variant {\n                   Closed;\n                   Opening;\n                 };\n   callbackStatus: opt Status__3;\n   compStrategy: CompStrategy;\n   comps: List;\n   data: opt blob;\n   name: text;\n   status: OrderStatus;\n   tasks: List_1;\n   time: Time;\n };\ntype OperationType = \n variant {\n   AddLiquidity;\n   Claim;\n   RemoveLiquidity;\n   Swap;\n };\ntype Operation = \n variant {\n   approve: record {allowance: nat;};\n   executeTransfer: record {\n                      fallback: nat;\n                      lockedTxid: Txid__4;\n                    };\n   lockTransfer:\n    record {\n      decider: AccountId__3;\n      expiration: Time__1;\n      locked: nat;\n    };\n   transfer: record {action: variant {\n                               burn;\n                               mint;\n                               send;\n                             };};\n };\ntype Nonce__3 = nat;\ntype Nonce__2 = nat;\ntype Nonce__1 = nat;\ntype Nonce = nat;\ntype Memo = nat64;\ntype List_1 = \n opt record {\n       SagaTask;\n       List_1;\n     };\ntype ListSize = nat;\ntype ListPage = nat;\ntype List = \n opt record {\n       CompTask;\n       List;\n     };\ntype Liquidity = \n record {\n   priceWeighted: PriceWeighted;\n   shareWeighted: record {\n                    shareTimeWeighted: nat;\n                    updateTime: Timestamp__1;\n                  };\n   shares: Amount;\n   swapCount: nat64;\n   unitValue: record {\n                Amount;\n                Amount;\n              };\n   value0: Amount;\n   value1: Amount;\n   vol: Vol__1;\n };\ntype KInterval = nat;\ntype KBar = \n record {\n   close: nat;\n   high: nat;\n   kid: nat;\n   low: nat;\n   open: nat;\n   updatedTs: Timestamp;\n   vol: Vol__2;\n };\ntype InitArgs = \n record {\n   name: text;\n   owner: opt principal;\n   token0: principal;\n   token1: principal;\n   unitSize: nat64;\n };\ntype IcpE8s = nat;\ntype IDOSetting = \n record {\n   IDOClosingTime: Time;\n   IDOEnabled: bool;\n   IDOLimitPerAccount: Amount__1;\n   IDOOpeningTime: Time;\n   IDOSupplies: vec record {\n                      price: float64;\n                      supply: Amount__1;\n                    };\n   IDOTotalSupply: record {\n                     IDOSupply: Amount__1;\n                     percentageOfTotal: float64;\n                   };\n   IDOWhitelistEnabled: bool;\n };\ntype IDORequirement = \n record {\n   pairs: vec record {\n                pair: principal;\n                token1ToUsdRatio: float64;\n              };\n   threshold: float64;\n };\ntype ICP = record {e8s: nat64;};\ntype Gas = \n variant {\n   cycles: nat;\n   noFee;\n   token: nat;\n };\ntype From = text;\ntype FeeStatus = \n record {\n   feeBalance: FeeBalance;\n   feeRate: float64;\n   totalFee: FeeBalance;\n };\ntype FeeBalance = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype ExecuteType = \n variant {\n   fallback;\n   send: nat;\n   sendAll;\n };\ntype ErrorLog = \n record {\n   callee: opt Callee__1;\n   result: opt TaskResult;\n   time: Time;\n   ttid: Ttid__1;\n };\ntype ErrorCode = \n variant {\n   call_error: record {err_code: nat32;};\n   canister_error;\n   canister_reject;\n   destination_invalid;\n   future: nat32;\n   system_fatal;\n   system_transient;\n };\ntype Err = \n record {\n   code: ErrorCode;\n   message: text;\n };\ntype Duration = nat64;\ntype DexSetting = \n record {\n   ICP_FEE: IcpE8s;\n   ICTC_RUN_INTERVAL: nat;\n   MAKER_BONUS_RATE: nat;\n   MAX_PENDINGS: nat;\n   MAX_TPS: nat;\n   STORAGE_INTERVAL: nat;\n   TRADING_FEE: nat;\n   UNIT_SIZE: nat;\n };\ntype DexInfo = \n record {\n   canisterId: principal;\n   dexName: text;\n   feeRate: float64;\n   mmType: variant {\n             AMM;\n             OrderBook;\n           };\n   pairName: text;\n   token0: record {\n             TokenType;\n             TokenStd__1;\n           };\n   token1: record {\n             TokenType;\n             TokenStd__1;\n           };\n };\ntype DexConfig = \n record {\n   ICP_FEE: opt IcpE8s;\n   ICTC_RUN_INTERVAL: opt nat;\n   MAKER_BONUS_RATE: opt nat;\n   MAX_PENDINGS: opt nat;\n   MAX_TPS: opt nat;\n   ORDER_EXPIRATION_DURATION: opt int;\n   STORAGE_INTERVAL: opt nat;\n   TRADING_FEE: opt nat;\n   UNIT_SIZE: opt nat;\n };\ntype Decider = text;\ntype DebitToken = principal;\ntype Data__2 = blob;\ntype Data__1 = blob;\ntype Data = blob;\ntype DRC207Support = \n record {\n   cycles_receivable: bool;\n   monitorable_by_blackhole:\n    record {\n      allowed: bool;\n      canister_id: opt principal;\n    };\n   monitorable_by_self: bool;\n   timer: record {\n            enable: bool;\n            interval_seconds: opt nat;\n          };\n };\ntype DRC205Data = \n record {\n   accountLastTxns:\n    vec record {\n          AccountId__2;\n          record {\n            vec Txid__3;\n            vec Txid__3;\n          };\n        };\n   globalLastTxns: record {\n                     vec Txid__3;\n                     vec Txid__3;\n                   };\n   globalTxns:\n    record {\n      vec record {\n            Txid__3;\n            Time;\n          };\n      vec record {\n            Txid__3;\n            Time;\n          };\n    };\n   setting: Setting;\n   storagePool: vec record {\n                      Txid__3;\n                      TxnRecord__1;\n                      nat;\n                    };\n   txnRecords: vec record {\n                     Txid__3;\n                     TxnRecord__1;\n                   };\n };\ntype CyclesWallet = principal;\ntype Config = \n record {\n   EN_DEBUG: opt bool;\n   MAX_CACHE_NUMBER_PER: opt nat;\n   MAX_CACHE_TIME: opt nat;\n   MAX_STORAGE_TRIES: opt nat;\n };\ntype Compensation = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype CompTask = \n record {\n   comp: Compensation;\n   forTtid: Ttid__2;\n   status: Status__3;\n   tcid: Tcid;\n };\ntype CompStrategy = \n variant {\n   Backward;\n   Forward;\n };\ntype CompResult__1 = \n record {\n   assetValue: opt CompCapital__1;\n   capital: CompCapital__1;\n   icrc1Account: Account__1;\n   status: variant {\n             Active;\n             Dropout;\n           };\n   vol: Vol;\n };\ntype CompResult = \n record {\n   assetValue: opt CompCapital;\n   capital: CompCapital;\n   icrc1Account: record {\n                   owner: principal;\n                   subaccount: opt blob;\n                 };\n   status: variant {\n             Active;\n             Dropout;\n           };\n   vol: Vol__1;\n };\ntype CompCapital__1 = \n record {\n   total: float64;\n   value0: nat;\n   value1: nat;\n };\ntype CompCapital = \n record {\n   total: float64;\n   value0: nat;\n   value1: nat;\n };\ntype Callee__1 = principal;\ntype CalleeStatus = \n record {\n   continuousFailure: nat;\n   failureCount: nat;\n   successCount: nat;\n };\ntype Callee = principal;\ntype CallType__1 = \n variant {\n   DIP20:\n    variant {\n      approve: record {\n                 principal;\n                 nat;\n               };\n      balanceOf: principal;\n      transfer: record {\n                  principal;\n                  nat;\n                };\n      transferFrom: record {\n                      principal;\n                      principal;\n                      nat;\n                    };\n    };\n   DRC20:\n    variant {\n      approve: record {\n                 Spender;\n                 Amount__2;\n                 opt Nonce__3;\n                 opt Sa__1;\n                 opt Data__2;\n               };\n      balanceOf: Address__1;\n      dropAccount: opt Sa__1;\n      executeTransfer:\n       record {\n         BlobFill;\n         ExecuteType;\n         opt To;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransfer:\n       record {\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transfer: record {\n                  To;\n                  Amount__2;\n                  opt Nonce__3;\n                  opt Sa__1;\n                  opt Data__2;\n                };\n      transferBatch:\n       record {\n         vec To;\n         vec Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      txnRecord: BlobFill;\n    };\n   ICRC1: variant {\n            icrc1_balance_of: Account;\n            icrc1_transfer: TransferArgs;\n          };\n   ICRC2:\n    variant {\n      icrc2_approve: ApproveArgs;\n      icrc2_transfer_from: TransferFromArgs;\n    };\n   ICTokens:\n    variant {\n      burn: record {\n              Amount__2;\n              opt Nonce__3;\n              opt Sa__1;\n              opt Data__2;\n            };\n      mint: record {\n              Address__1;\n              Amount__2;\n              opt Nonce__3;\n              opt Data__2;\n            };\n    };\n   Ledger:\n    variant {\n      account_balance: AccountBalanceArgs;\n      transfer: TransferArgs__1;\n    };\n   This:\n    variant {\n      dip20Send: record {\n                   blob;\n                   nat;\n                 };\n      dip20SendComp: record {\n                       blob;\n                       principal;\n                       nat;\n                     };\n    };\n   __block;\n   __skip;\n };\ntype CallType = \n variant {\n   DIP20:\n    variant {\n      approve: record {\n                 principal;\n                 nat;\n               };\n      balanceOf: principal;\n      transfer: record {\n                  principal;\n                  nat;\n                };\n      transferFrom: record {\n                      principal;\n                      principal;\n                      nat;\n                    };\n    };\n   DRC20:\n    variant {\n      approve: record {\n                 Spender;\n                 Amount__2;\n                 opt Nonce__3;\n                 opt Sa__1;\n                 opt Data__2;\n               };\n      balanceOf: Address__1;\n      dropAccount: opt Sa__1;\n      executeTransfer:\n       record {\n         BlobFill;\n         ExecuteType;\n         opt To;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransfer:\n       record {\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transfer: record {\n                  To;\n                  Amount__2;\n                  opt Nonce__3;\n                  opt Sa__1;\n                  opt Data__2;\n                };\n      transferBatch:\n       record {\n         vec To;\n         vec Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      txnRecord: BlobFill;\n    };\n   ICRC1: variant {\n            icrc1_balance_of: Account;\n            icrc1_transfer: TransferArgs;\n          };\n   ICRC2:\n    variant {\n      icrc2_approve: ApproveArgs;\n      icrc2_transfer_from: TransferFromArgs;\n    };\n   ICTokens:\n    variant {\n      burn: record {\n              Amount__2;\n              opt Nonce__3;\n              opt Sa__1;\n              opt Data__2;\n            };\n      mint: record {\n              Address__1;\n              Amount__2;\n              opt Nonce__3;\n              opt Data__2;\n            };\n    };\n   Ledger:\n    variant {\n      account_balance: AccountBalanceArgs;\n      transfer: TransferArgs__1;\n    };\n   This:\n    variant {\n      dip20Send: record {\n                   blob;\n                   nat;\n                 };\n      dip20SendComp: record {\n                       blob;\n                       principal;\n                       nat;\n                     };\n    };\n   __block;\n   __skip;\n };\ntype BlockIndex = nat64;\ntype BlobFill = \n variant {\n   AutoFill;\n   ManualFill: blob;\n };\ntype BalanceChange__1 = \n variant {\n   CreditRecord: nat;\n   DebitRecord: nat;\n   NoChange;\n };\ntype BalanceChange = \n variant {\n   CreditRecord: nat;\n   DebitRecord: nat;\n   NoChange;\n };\ntype BackupResponse = \n variant {\n   ambassadors: vec record {\n                      AccountId__2;\n                      AmbassadorData;\n                    };\n   clearingTxids: vec Txid__3;\n   competitors: vec record {\n                      nat;\n                      vec record {\n                            AccountId__2;\n                            CompResult;\n                          };\n                    };\n   drc205Data: DRC205Data;\n   icdex_dip20Balances: vec record {\n                              AccountId__2;\n                              record {\n                                principal;\n                                nat;\n                              };\n                            };\n   icdex_failedOrders: vec record {\n                             Txid__3;\n                             TradingOrder;\n                           };\n   icdex_klines2: vec record {\n                        KInterval;\n                        record {\n                          vec KBar;\n                          vec KBar;\n                        };\n                      };\n   icdex_makers: vec record {\n                       AccountId__2;\n                       record {\n                         nat;\n                         principal;\n                       };\n                     };\n   icdex_nonces: vec record {\n                       AccountId__2;\n                       Nonce__2;\n                     };\n   icdex_orderBook:\n    record {\n      ask: vec record {\n                 Txid__3;\n                 OrderPrice__1;\n               };\n      bid: vec record {\n                 Txid__3;\n                 OrderPrice__1;\n               };\n    };\n   icdex_orders: vec record {\n                       Txid__3;\n                       TradingOrder;\n                     };\n   icdex_pendingOrders: vec record {\n                              AccountId__2;\n                              vec Txid__3;\n                            };\n   icdex_vols: vec record {\n                     AccountId__2;\n                     Vol__1;\n                   };\n   ictcTaskCallbackEvents: vec record {\n                                 Ttid;\n                                 Time;\n                               };\n   otherData:\n    record {\n      activeRound: nat;\n      icdex_index: nat;\n      icdex_lastPrice: OrderPrice__1;\n      icdex_priceWeighted: PriceWeighted;\n      icdex_totalFee: FeeBalance;\n      icdex_totalVol: Vol__1;\n      taDescription: text;\n    };\n   rounds: vec record {\n                 nat;\n                 RoundItem;\n               };\n   sagaData: SagaData;\n   timeSortedTxids:\n    record {\n      vec record {\n            Txid__3;\n            Time;\n          };\n      vec record {\n            Txid__3;\n            Time;\n          };\n    };\n   traderReferrerTemps:\n    vec record {\n          AccountId__2;\n          record {\n            AccountId__2;\n            text;\n            Time;\n          };\n        };\n   traderReferrers: vec record {\n                          AccountId__2;\n                          AccountId__2;\n                        };\n };\ntype BackupRequest = \n variant {\n   ambassadors;\n   clearingTxids;\n   competitors;\n   drc205Data: variant {\n                 All;\n                 Base;\n               };\n   icdex_dip20Balances;\n   icdex_failedOrders;\n   icdex_klines2;\n   icdex_makers;\n   icdex_nonces;\n   icdex_orderBook;\n   icdex_orders;\n   icdex_pendingOrders;\n   icdex_vols;\n   ictcTaskCallbackEvents;\n   otherData;\n   rounds;\n   sagaData: variant {\n               All;\n               Base;\n             };\n   timeSortedTxids;\n   traderReferrerTemps;\n   traderReferrers;\n };\ntype Attempts = nat;\ntype ApproveError = \n variant {\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype ApproveArgs = \n record {\n   amount: nat;\n   created_at_time: opt nat64;\n   fee: opt nat;\n   from_subaccount: opt blob;\n   memo: opt blob;\n   spender: principal;\n };\ntype Amount__2 = nat;\ntype Amount__1 = nat;\ntype Amount = nat;\ntype AmbassadorData = \n record {\n   text;\n   nat;\n   Vol__1;\n };\ntype Address__2 = text;\ntype Address__1 = text;\ntype Address = text;\ntype Account__1 = \n record {\n   owner: principal;\n   subaccount: opt Subaccount__1;\n };\ntype AccountIdentifier = blob;\ntype AccountId__4 = blob;\ntype AccountId__3 = blob;\ntype AccountId__2 = blob;\ntype AccountId__1 = blob;\ntype AccountId = blob;\ntype AccountBalanceArgs = record {account: AccountIdentifier;};\ntype Account = \n record {\n   owner: principal;\n   subaccount: opt Subaccount;\n };\nservice : {\n  IDO_config: (IDOSetting) -> ();\n  IDO_getConfig: () -> (opt principal, IDOSetting, opt IDORequirement) query;\n  IDO_qualification: (opt Address) ->\n   (vec record {\n          Address;\n          Participant;\n        }) query;\n  IDO_removeWhitelist: (vec Address) -> ();\n  IDO_setFunder: (opt principal, opt IDORequirement) -> ();\n  IDO_setWhitelist: (vec record {\n                           Address;\n                           Amount__1;\n                         }) -> ();\n  IDO_updateQualification: (opt Sa) -> (opt Participant);\n  backup: (BackupRequest) -> (BackupResponse);\n  cancel: (Nonce, opt Sa) -> ();\n  cancelByTxid: (Txid__1, opt Sa) -> ();\n  changeOwner: (principal) -> (bool);\n  comp_deposit: (Amount__1, Amount__1, opt Sa) -> ();\n  comp_dropout: (opt Sa) -> (bool);\n  comp_fallback: (opt Sa) -> (Amount__1, Amount__1);\n  comp_getDepositAccount: (Address) ->\n   (record {\n      balance: record {\n                 Account__1;\n                 Address;\n               };\n      depositing: record {\n                    Account__1;\n                    Address;\n                  };\n    }) query;\n  comp_newRound: (text, text, Time, Time, variant {\n                                            token0;\n                                            token1;\n                                          }, nat, bool) -> (nat);\n  comp_register: (opt Sa) -> (bool);\n  comp_result: (opt nat, Address) -> (opt CompResult__1) query;\n  comp_results: (opt nat, ListPage, ListSize) ->\n   (record {\n      data: vec record {\n                  AccountId__4;\n                  CompResult__1;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  comp_round: (opt nat) -> (nat, opt RoundItem__1) query;\n  comp_settle: (nat) -> ();\n  comp_withdraw: (opt Sa) -> (Amount__1, Amount__1);\n  config: (DexConfig) -> (bool);\n  count: (opt Address) -> (nat) query;\n  drc205_canisterId: () -> (principal) query;\n  drc205_config: (Config) -> (bool);\n  drc205_dexInfo: () -> (DexInfo) query;\n  drc205_events: (opt Address__2) -> (vec TxnRecord__3) query;\n  drc205_getConfig: () -> (Setting) query;\n  drc205_pool: () -> (vec record {\n                            Txid__1;\n                            TxnRecord__3;\n                            nat;\n                          }) query;\n  drc205_txn: (Txid__5) -> (opt TxnRecord__3) query;\n  drc205_txn2: (Txid__5) -> (opt TxnRecord__3);\n  drc207: () -> (DRC207Support) query;\n  fallback: (Nonce, opt Sa) -> (bool);\n  fallbackByTxid: (Txid__1, opt Sa) -> (bool);\n  fee: () ->\n   (record {\n      maker: record {\n               buy: float64;\n               sell: float64;\n             };\n      taker: record {\n               buy: float64;\n               sell: float64;\n             };\n    }) query;\n  feeStatus: () -> (FeeStatus) query;\n  getConfig: () -> (DexSetting) query;\n  getOwner: () -> (principal) query;\n  getQuotes: (KInterval) -> (vec KBar) query;\n  getTxAccount: (Address) -> (Account__1, TxAccount, Nonce, Txid__1) query;\n  ictc_TM: () -> (text) query;\n  ictc_addAdmin: (principal) -> ();\n  ictc_appendTT: (opt blob, Toid__3, opt Ttid__2, principal, CallType__1,\n   vec Ttid__2) -> (Ttid__2);\n  ictc_blockTO: (Toid__3) -> (opt Toid__3);\n  ictc_clearLog: (opt int, bool) -> ();\n  ictc_clearTTPool: () -> ();\n  ictc_completeTO: (Toid__3, OrderStatus) -> (bool);\n  ictc_doneTO: (Toid__3, OrderStatus, bool) -> (bool);\n  ictc_doneTT: (Toid__3, Ttid__2, bool) -> (opt Ttid__2);\n  ictc_getAdmins: () -> (vec principal) query;\n  ictc_getCalleeStatus: (principal) -> (opt CalleeStatus) query;\n  ictc_getPool: () ->\n   (record {\n      toPool: record {\n                items: vec record {\n                             Toid__3;\n                             opt Order__1;\n                           };\n                total: nat;\n              };\n      ttPool: record {\n                items: vec record {\n                             Ttid__2;\n                             Task__2;\n                           };\n                total: nat;\n              };\n    }) query;\n  ictc_getTO: (Toid__3) -> (opt Order__1) query;\n  ictc_getTOCount: () -> (nat) query;\n  ictc_getTOPool: () -> (vec record {\n                               Toid__3;\n                               opt Order__1;\n                             }) query;\n  ictc_getTOs: (nat, nat) ->\n   (record {\n      data: vec record {\n                  Toid__3;\n                  Order__1;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_getTT: (Ttid__2) -> (opt TaskEvent) query;\n  ictc_getTTByTO: (Toid__3) -> (vec TaskEvent) query;\n  ictc_getTTErrors: (nat, nat) ->\n   (record {\n      data: vec record {\n                  nat;\n                  ErrorLog;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_getTTPool: () -> (vec record {\n                               Ttid__2;\n                               Task__2;\n                             }) query;\n  ictc_getTTs: (nat, nat) ->\n   (record {\n      data: vec record {\n                  Ttid__2;\n                  TaskEvent;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_redoTT: (Toid__3, Ttid__2) -> (opt Ttid__2);\n  ictc_removeAdmin: (principal) -> ();\n  ictc_runTO: (Toid__3) -> (opt OrderStatus);\n  ictc_runTT: () -> (bool);\n  info: () ->\n   (record {\n      decimals: nat8;\n      name: text;\n      owner: principal;\n      paused: bool;\n      setting: DexSetting;\n      token0: TokenInfo;\n      token1: TokenInfo;\n      version: text;\n    }) query;\n  init: () -> ();\n  latestFilled: () ->\n   (vec record {\n          Timestamp__4;\n          Txid__1;\n          OrderFilled__1;\n          OrderSide;\n        }) query;\n  level10: () -> (nat,\n   record {\n     ask: vec PriceResponse;\n     bid: vec PriceResponse;\n   }) query;\n  level100: () -> (nat,\n   record {\n     ask: vec PriceResponse;\n     bid: vec PriceResponse;\n   }) query;\n  liquidity: (opt Address) -> (Liquidity) query;\n  makerRebate: (Address) -> (float64, float64) query;\n  name: () -> (text) query;\n  orderExpirationDuration: () -> (int) query;\n  pending: (opt Address, opt ListPage, opt ListSize) -> (TrieList) query;\n  pendingAll: (opt ListPage, opt ListSize) -> (TrieList) query;\n  pendingCount: () -> (nat) query;\n  prepare: (Address) -> (TxAccount, Nonce) query;\n  recovery: (BackupResponse) -> (bool);\n  removeVipMaker: (Address) -> ();\n  setOrderFail: (text) -> (bool);\n  setPause: (bool, opt Time) -> (bool);\n  setUpgradeMode: (variant {\n                     All;\n                     Base;\n                   }) -> ();\n  setVipMaker: (Address, nat) -> ();\n  stats: () ->\n   (record {\n      change24h: float64;\n      price: float64;\n      totalVol: Vol;\n      vol24h: Vol;\n    }) query;\n  status: (Address, Nonce) -> (OrderStatusResponse) query;\n  statusByTxid: (Txid__1) -> (OrderStatusResponse) query;\n  sync: () -> ();\n  sysMode: () -> (record {\n                    mode: SysMode;\n                    openingTime: Time;\n                  }) query;\n  ta_ambassador: (Address) -> (bool, text, nat, Vol) query;\n  ta_description: () -> (text) query;\n  ta_getReferrer: (Address) -> (opt record {\n                                      Address;\n                                      bool;\n                                    }) query;\n  ta_setDescription: (text) -> ();\n  ta_setReferrer: (Address, opt text, opt Sa) -> (bool);\n  ta_stats: (opt text) -> (nat, nat, Vol) query;\n  timerStart: (nat) -> ();\n  timerStop: () -> ();\n  token0: () -> (TokenType, opt TokenStd) query;\n  token1: () -> (TokenType, opt TokenStd) query;\n  tpsStats: () -> (nat, float64, nat, nat, int, int) query;\n  trade: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa,\n   opt Data) -> (TradingResult);\n  tradeMKT: (DebitToken, Amount__1, opt Nonce, opt Sa, opt Data) ->\n   (TradingResult);\n  tradeMKT_b: (DebitToken, Amount__1, opt nat, opt Nonce, opt Sa, opt Data,\n   opt record {\n         broker: principal;\n         rate: float64;\n       }) -> (TradingResult);\n  trade_b: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa, opt Data,\n   opt record {\n         broker: principal;\n         rate: float64;\n       }) -> (TradingResult);\n  userCount: () -> (nat) query;\n  version: () -> (text) query;\n  wallet_receive: () -> ();\n  withdraw_cycles: (nat) -> ();\n}\n",
                    "javascript": "export const idlFactory = ({ IDL }) => {\n  const List = IDL.Rec();\n  const List_1 = IDL.Rec();\n  const Amount__1 = IDL.Nat;\n  const Time = IDL.Int;\n  const IDOSetting = IDL.Record({\n    'IDOSupplies' : IDL.Vec(\n      IDL.Record({ 'supply' : Amount__1, 'price' : IDL.Float64 })\n    ),\n    'IDOWhitelistEnabled' : IDL.Bool,\n    'IDOOpeningTime' : Time,\n    'IDOTotalSupply' : IDL.Record({\n      'IDOSupply' : Amount__1,\n      'percentageOfTotal' : IDL.Float64,\n    }),\n    'IDOEnabled' : IDL.Bool,\n    'IDOLimitPerAccount' : Amount__1,\n    'IDOClosingTime' : Time,\n  });\n  const IDORequirement = IDL.Record({\n    'threshold' : IDL.Float64,\n    'pairs' : IDL.Vec(\n      IDL.Record({ 'pair' : IDL.Principal, 'token1ToUsdRatio' : IDL.Float64 })\n    ),\n  });\n  const Address = IDL.Text;\n  const Participant = IDL.Record({\n    'updatedTime' : Time,\n    'used' : Amount__1,\n    'limit' : Amount__1,\n    'historyVol' : IDL.Float64,\n  });\n  const Sa = IDL.Vec(IDL.Nat8);\n  const BackupRequest = IDL.Variant({\n    'timeSortedTxids' : IDL.Null,\n    'icdex_failedOrders' : IDL.Null,\n    'icdex_makers' : IDL.Null,\n    'drc205Data' : IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null }),\n    'icdex_vols' : IDL.Null,\n    'icdex_pendingOrders' : IDL.Null,\n    'ictcTaskCallbackEvents' : IDL.Null,\n    'otherData' : IDL.Null,\n    'icdex_dip20Balances' : IDL.Null,\n    'clearingTxids' : IDL.Null,\n    'icdex_nonces' : IDL.Null,\n    'competitors' : IDL.Null,\n    'icdex_klines2' : IDL.Null,\n    'sagaData' : IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null }),\n    'icdex_orders' : IDL.Null,\n    'icdex_orderBook' : IDL.Null,\n    'rounds' : IDL.Null,\n    'traderReferrers' : IDL.Null,\n    'traderReferrerTemps' : IDL.Null,\n    'ambassadors' : IDL.Null,\n  });\n  const Txid__3 = IDL.Vec(IDL.Nat8);\n  const TradingStatus = IDL.Variant({\n    'Todo' : IDL.Null,\n    'Closed' : IDL.Null,\n    'Cancelled' : IDL.Null,\n    'Pending' : IDL.Null,\n  });\n  const Toid = IDL.Nat;\n  const Txid = IDL.Vec(IDL.Nat8);\n  const OrderType__1 = IDL.Variant({\n    'FAK' : IDL.Null,\n    'FOK' : IDL.Null,\n    'LMT' : IDL.Null,\n    'MKT' : IDL.Null,\n  });\n  const BalanceChange = IDL.Variant({\n    'DebitRecord' : IDL.Nat,\n    'CreditRecord' : IDL.Nat,\n    'NoChange' : IDL.Null,\n  });\n  const OrderFilled = IDL.Record({\n    'time' : Time,\n    'token0Value' : BalanceChange,\n    'counterparty' : Txid,\n    'token1Value' : BalanceChange,\n  });\n  const AccountId__1 = IDL.Vec(IDL.Nat8);\n  const Quantity = IDL.Nat;\n  const Amount = IDL.Nat;\n  const Price = IDL.Nat;\n  const OrderPrice__1 = IDL.Record({\n    'quantity' : IDL.Variant({\n      'Buy' : IDL.Tuple(Quantity, Amount),\n      'Sell' : Quantity,\n    }),\n    'price' : Price,\n  });\n  const TradingOrder = IDL.Record({\n    'fee' : IDL.Record({ 'fee0' : IDL.Int, 'fee1' : IDL.Int }),\n    'gas' : IDL.Record({ 'gas0' : IDL.Nat, 'gas1' : IDL.Nat }),\n    'status' : TradingStatus,\n    'toids' : IDL.Vec(Toid),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'txid' : Txid,\n    'icrc1Account' : IDL.Opt(\n      IDL.Record({\n        'owner' : IDL.Principal,\n        'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      })\n    ),\n    'orderType' : OrderType__1,\n    'filled' : IDL.Vec(OrderFilled),\n    'expiration' : Time,\n    'nonce' : IDL.Nat,\n    'account' : AccountId__1,\n    'remaining' : OrderPrice__1,\n    'index' : IDL.Nat,\n    'orderPrice' : OrderPrice__1,\n    'refund' : IDL.Tuple(IDL.Nat, IDL.Nat, IDL.Nat),\n  });\n  const AccountId__2 = IDL.Vec(IDL.Nat8);\n  const Setting = IDL.Record({\n    'MAX_STORAGE_TRIES' : IDL.Nat,\n    'EN_DEBUG' : IDL.Bool,\n    'MAX_CACHE_NUMBER_PER' : IDL.Nat,\n    'MAX_CACHE_TIME' : IDL.Nat,\n  });\n  const Status = IDL.Variant({\n    'Failed' : IDL.Null,\n    'Cancelled' : IDL.Null,\n    'PartiallyCompletedAndCancelled' : IDL.Null,\n    'Completed' : IDL.Null,\n    'Pending' : IDL.Null,\n  });\n  const Shares = IDL.Nat;\n  const ShareChange = IDL.Variant({\n    'Burn' : Shares,\n    'Mint' : Shares,\n    'NoChange' : IDL.Null,\n  });\n  const BalanceChange__1 = IDL.Variant({\n    'DebitRecord' : IDL.Nat,\n    'CreditRecord' : IDL.Nat,\n    'NoChange' : IDL.Null,\n  });\n  const Data__1 = IDL.Vec(IDL.Nat8);\n  const Txid__2 = IDL.Vec(IDL.Nat8);\n  const TokenType__1 = IDL.Variant({\n    'Icp' : IDL.Null,\n    'Token' : IDL.Principal,\n    'Cycles' : IDL.Null,\n  });\n  const Nonce__1 = IDL.Nat;\n  const OperationType = IDL.Variant({\n    'AddLiquidity' : IDL.Null,\n    'Swap' : IDL.Null,\n    'Claim' : IDL.Null,\n    'RemoveLiquidity' : IDL.Null,\n  });\n  const AccountId = IDL.Vec(IDL.Nat8);\n  const CyclesWallet = IDL.Principal;\n  const TxnRecord__1 = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const DRC205Data = IDL.Record({\n    'accountLastTxns' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Vec(Txid__3), IDL.Vec(Txid__3)))\n    ),\n    'setting' : Setting,\n    'globalLastTxns' : IDL.Tuple(IDL.Vec(Txid__3), IDL.Vec(Txid__3)),\n    'storagePool' : IDL.Vec(IDL.Tuple(Txid__3, TxnRecord__1, IDL.Nat)),\n    'globalTxns' : IDL.Tuple(\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n    ),\n    'txnRecords' : IDL.Vec(IDL.Tuple(Txid__3, TxnRecord__1)),\n  });\n  const Vol__1 = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const Ttid = IDL.Nat;\n  const FeeBalance = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const Timestamp__1 = IDL.Nat;\n  const PriceWeighted = IDL.Record({\n    'updateTime' : Timestamp__1,\n    'token1TimeWeighted' : IDL.Nat,\n    'token0TimeWeighted' : IDL.Nat,\n  });\n  const Nonce__2 = IDL.Nat;\n  const CompCapital = IDL.Record({\n    'total' : IDL.Float64,\n    'value0' : IDL.Nat,\n    'value1' : IDL.Nat,\n  });\n  const CompResult = IDL.Record({\n    'vol' : Vol__1,\n    'status' : IDL.Variant({ 'Active' : IDL.Null, 'Dropout' : IDL.Null }),\n    'icrc1Account' : IDL.Record({\n      'owner' : IDL.Principal,\n      'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n    'capital' : CompCapital,\n    'assetValue' : IDL.Opt(CompCapital),\n  });\n  const KInterval = IDL.Nat;\n  const Vol__2 = IDL.Record({ 'value0' : IDL.Nat, 'value1' : IDL.Nat });\n  const Timestamp = IDL.Nat;\n  const KBar = IDL.Record({\n    'kid' : IDL.Nat,\n    'low' : IDL.Nat,\n    'vol' : Vol__2,\n    'high' : IDL.Nat,\n    'close' : IDL.Nat,\n    'open' : IDL.Nat,\n    'updatedTs' : Timestamp,\n  });\n  const Toid__2 = IDL.Nat;\n  const OrderStatus = IDL.Variant({\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Recovered' : IDL.Null,\n    'Compensating' : IDL.Null,\n    'Blocking' : IDL.Null,\n  });\n  const Status__3 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Ttid__1 = IDL.Nat;\n  const Toid__1 = IDL.Nat;\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const Timestamp__2 = IDL.Nat64;\n  const TransferArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(Subaccount),\n    'created_at_time' : IDL.Opt(Timestamp__2),\n    'amount' : IDL.Nat,\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Principal,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n  });\n  const To = IDL.Text;\n  const Amount__2 = IDL.Nat;\n  const Nonce__3 = IDL.Nat;\n  const Sa__1 = IDL.Vec(IDL.Nat8);\n  const Data__2 = IDL.Vec(IDL.Nat8);\n  const From = IDL.Text;\n  const Spender = IDL.Text;\n  const Address__1 = IDL.Text;\n  const BlobFill = IDL.Variant({\n    'AutoFill' : IDL.Null,\n    'ManualFill' : IDL.Vec(IDL.Nat8),\n  });\n  const Timeout = IDL.Nat32;\n  const Decider = IDL.Text;\n  const ExecuteType = IDL.Variant({\n    'fallback' : IDL.Null,\n    'send' : IDL.Nat,\n    'sendAll' : IDL.Null,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const ICP = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Memo = IDL.Nat64;\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Timestamp__3 = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const TransferArgs__1 = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : ICP,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Timestamp__3),\n    'amount' : ICP,\n  });\n  const CallType = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : Account,\n      'icrc1_transfer' : TransferArgs,\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : ApproveArgs,\n      'icrc2_transfer_from' : TransferFromArgs,\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Principal, IDL.Nat),\n      'dip20Send' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Nat),\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : IDL.Tuple(IDL.Principal, IDL.Principal, IDL.Nat),\n      'approve' : IDL.Tuple(IDL.Principal, IDL.Nat),\n      'balanceOf' : IDL.Principal,\n      'transfer' : IDL.Tuple(IDL.Principal, IDL.Nat),\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Tuple(\n        IDL.Vec(To),\n        IDL.Vec(Amount__2),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'approve' : IDL.Tuple(\n        Spender,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'balanceOf' : Address__1,\n      'txnRecord' : BlobFill,\n      'lockTransfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'dropAccount' : IDL.Opt(Sa__1),\n      'executeTransfer' : IDL.Tuple(\n        BlobFill,\n        ExecuteType,\n        IDL.Opt(To),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'lockTransferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : AccountBalanceArgs,\n      'transfer' : TransferArgs__1,\n    }),\n    'ICTokens' : IDL.Variant({\n      'burn' : IDL.Tuple(\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'mint' : IDL.Tuple(\n        Address__1,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    '__skip' : IDL.Null,\n  });\n  const Attempts = IDL.Nat;\n  const Callee__1 = IDL.Principal;\n  const Compensation = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Task__2 = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Ttid__2 = IDL.Nat;\n  const SagaTask = IDL.Record({\n    'status' : Status__3,\n    'comp' : IDL.Opt(Compensation),\n    'task' : Task__2,\n    'ttid' : Ttid__2,\n  });\n  List_1.fill(IDL.Opt(IDL.Tuple(SagaTask, List_1)));\n  const Tcid = IDL.Nat;\n  const CompTask = IDL.Record({\n    'status' : Status__3,\n    'comp' : Compensation,\n    'tcid' : Tcid,\n    'forTtid' : Ttid__2,\n  });\n  List.fill(IDL.Opt(IDL.Tuple(CompTask, List)));\n  const CompStrategy = IDL.Variant({\n    'Backward' : IDL.Null,\n    'Forward' : IDL.Null,\n  });\n  const Order = IDL.Record({\n    'status' : OrderStatus,\n    'tasks' : List_1,\n    'callbackStatus' : IDL.Opt(Status__3),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Text,\n    'comps' : List,\n    'time' : Time,\n    'compStrategy' : CompStrategy,\n    'allowPushing' : IDL.Variant({ 'Opening' : IDL.Null, 'Closed' : IDL.Null }),\n  });\n  const Task__1 = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Callee = IDL.Principal;\n  const CalleeStatus = IDL.Record({\n    'continuousFailure' : IDL.Nat,\n    'successCount' : IDL.Nat,\n    'failureCount' : IDL.Nat,\n  });\n  const Status__1 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Duration = IDL.Nat64;\n  const TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Null,\n    'TooOld' : IDL.Record({ 'allowed_window_nanos' : Duration }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : IDL.Nat }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const TxReceipt = IDL.Variant({\n    'Ok' : IDL.Nat,\n    'Err' : IDL.Variant({\n      'InsufficientAllowance' : IDL.Null,\n      'InsufficientBalance' : IDL.Null,\n      'ErrorOperationStyle' : IDL.Null,\n      'Unauthorized' : IDL.Null,\n      'LedgerTrap' : IDL.Null,\n      'ErrorTo' : IDL.Null,\n      'Other' : IDL.Text,\n      'BlockUsed' : IDL.Null,\n      'AmountTooSmall' : IDL.Null,\n    }),\n  });\n  const Txid__4 = IDL.Vec(IDL.Nat8);\n  const TxnResult = IDL.Variant({\n    'ok' : Txid__4,\n    'err' : IDL.Record({\n      'code' : IDL.Variant({\n        'NonceError' : IDL.Null,\n        'InsufficientGas' : IDL.Null,\n        'InsufficientAllowance' : IDL.Null,\n        'UndefinedError' : IDL.Null,\n        'InsufficientBalance' : IDL.Null,\n        'NoLockedTransfer' : IDL.Null,\n        'DuplicateExecutedTransfer' : IDL.Null,\n        'LockedTransferExpired' : IDL.Null,\n      }),\n      'message' : IDL.Text,\n    }),\n  });\n  const Gas = IDL.Variant({\n    'token' : IDL.Nat,\n    'cycles' : IDL.Nat,\n    'noFee' : IDL.Null,\n  });\n  const AccountId__3 = IDL.Vec(IDL.Nat8);\n  const Time__1 = IDL.Int;\n  const Operation = IDL.Variant({\n    'approve' : IDL.Record({ 'allowance' : IDL.Nat }),\n    'lockTransfer' : IDL.Record({\n      'locked' : IDL.Nat,\n      'expiration' : Time__1,\n      'decider' : AccountId__3,\n    }),\n    'transfer' : IDL.Record({\n      'action' : IDL.Variant({\n        'burn' : IDL.Null,\n        'mint' : IDL.Null,\n        'send' : IDL.Null,\n      }),\n    }),\n    'executeTransfer' : IDL.Record({\n      'fallback' : IDL.Nat,\n      'lockedTxid' : Txid__4,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'to' : AccountId__3,\n    'value' : IDL.Nat,\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from' : AccountId__3,\n    'operation' : Operation,\n  });\n  const TxnRecord__2 = IDL.Record({\n    'gas' : Gas,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'transaction' : Transaction,\n    'txid' : Txid__4,\n    'nonce' : IDL.Nat,\n    'timestamp' : Time__1,\n    'caller' : AccountId__3,\n    'index' : IDL.Nat,\n  });\n  const TransferError__1 = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const BlockIndex = IDL.Nat64;\n  const TransferError__2 = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : ICP }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : ICP }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError__2,\n  });\n  const Receipt = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : IDL.Nat,\n      'icrc1_transfer' : IDL.Variant({ 'Ok' : IDL.Nat, 'Err' : TransferError }),\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : IDL.Variant({ 'Ok' : IDL.Nat, 'Err' : ApproveError }),\n      'icrc2_transfer_from' : IDL.Variant({\n        'Ok' : IDL.Nat,\n        'Err' : TransferFromError,\n      }),\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Null,\n      'dip20Send' : IDL.Null,\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : TxReceipt,\n      'approve' : TxReceipt,\n      'balanceOf' : IDL.Nat,\n      'transfer' : TxReceipt,\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Vec(TxnResult),\n      'transferFrom' : TxnResult,\n      'approve' : TxnResult,\n      'balanceOf' : Amount__2,\n      'txnRecord' : IDL.Opt(TxnRecord__2),\n      'lockTransfer' : TxnResult,\n      'transfer' : TxnResult,\n      'dropAccount' : IDL.Null,\n      'executeTransfer' : TxnResult,\n      'lockTransferFrom' : TxnResult,\n    }),\n    'ICRC1New' : IDL.Variant({\n      'icrc1_balance_of' : IDL.Nat,\n      'icrc1_transfer' : IDL.Variant({\n        'Ok' : IDL.Nat,\n        'Err' : TransferError__1,\n      }),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : ICP,\n      'transfer' : TransferResult,\n    }),\n    'ICTokens' : IDL.Variant({ 'burn' : TxnResult, 'mint' : TxnResult }),\n    '__skip' : IDL.Null,\n  });\n  const ErrorCode = IDL.Variant({\n    'canister_error' : IDL.Null,\n    'call_error' : IDL.Record({ 'err_code' : IDL.Nat32 }),\n    'system_transient' : IDL.Null,\n    'future' : IDL.Nat32,\n    'canister_reject' : IDL.Null,\n    'destination_invalid' : IDL.Null,\n    'system_fatal' : IDL.Null,\n  });\n  const Err = IDL.Record({ 'code' : ErrorCode, 'message' : IDL.Text });\n  const TaskResult = IDL.Tuple(Status__1, IDL.Opt(Receipt), IDL.Opt(Err));\n  const ErrorLog = IDL.Record({\n    'result' : IDL.Opt(TaskResult),\n    'time' : Time,\n    'ttid' : Ttid__1,\n    'callee' : IDL.Opt(Callee__1),\n  });\n  const Status__2 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Task = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const TaskEvent = IDL.Record({\n    'result' : TaskResult,\n    'callbackStatus' : IDL.Opt(Status__2),\n    'task' : Task,\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'ttid' : Ttid__1,\n    'attempts' : Attempts,\n    'txHash' : IDL.Vec(IDL.Nat8),\n  });\n  const SagaData = IDL.Record({\n    'orders' : IDL.Vec(IDL.Tuple(Toid__2, Order)),\n    'autoClearTimeout' : IDL.Int,\n    'aliveOrders' : IDL.Vec(IDL.Tuple(Toid__2, Time)),\n    'index' : IDL.Nat,\n    'actuator' : IDL.Record({\n      'tasks' : IDL.Tuple(\n        IDL.Vec(IDL.Tuple(Ttid, Task__1)),\n        IDL.Vec(IDL.Tuple(Ttid, Task__1)),\n      ),\n      'callees' : IDL.Vec(IDL.Tuple(Callee, CalleeStatus)),\n      'errorLogs' : IDL.Vec(IDL.Tuple(IDL.Nat, ErrorLog)),\n      'taskLogs' : IDL.Vec(IDL.Tuple(Ttid, TaskEvent)),\n      'index' : IDL.Nat,\n      'firstErrIndex' : IDL.Nat,\n      'errIndex' : IDL.Nat,\n      'firstIndex' : IDL.Nat,\n    }),\n    'taskEvents' : IDL.Vec(IDL.Tuple(Toid__2, IDL.Vec(Ttid))),\n    'firstIndex' : IDL.Nat,\n  });\n  const RoundItem = IDL.Record({\n    'end' : Time,\n    'content' : IDL.Text,\n    'isSettled' : IDL.Bool,\n    'name' : IDL.Text,\n    'minCapital' : IDL.Nat,\n    'start' : Time,\n    'closedPrice' : IDL.Opt(IDL.Float64),\n    'quoteToken' : IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n  });\n  const AmbassadorData = IDL.Tuple(IDL.Text, IDL.Nat, Vol__1);\n  const BackupResponse = IDL.Variant({\n    'timeSortedTxids' : IDL.Tuple(\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n    ),\n    'icdex_failedOrders' : IDL.Vec(IDL.Tuple(Txid__3, TradingOrder)),\n    'icdex_makers' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Nat, IDL.Principal))\n    ),\n    'drc205Data' : DRC205Data,\n    'icdex_vols' : IDL.Vec(IDL.Tuple(AccountId__2, Vol__1)),\n    'icdex_pendingOrders' : IDL.Vec(IDL.Tuple(AccountId__2, IDL.Vec(Txid__3))),\n    'ictcTaskCallbackEvents' : IDL.Vec(IDL.Tuple(Ttid, Time)),\n    'otherData' : IDL.Record({\n      'icdex_totalFee' : FeeBalance,\n      'icdex_totalVol' : Vol__1,\n      'activeRound' : IDL.Nat,\n      'icdex_index' : IDL.Nat,\n      'icdex_lastPrice' : OrderPrice__1,\n      'icdex_priceWeighted' : PriceWeighted,\n      'taDescription' : IDL.Text,\n    }),\n    'icdex_dip20Balances' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Principal, IDL.Nat))\n    ),\n    'clearingTxids' : IDL.Vec(Txid__3),\n    'icdex_nonces' : IDL.Vec(IDL.Tuple(AccountId__2, Nonce__2)),\n    'competitors' : IDL.Vec(\n      IDL.Tuple(IDL.Nat, IDL.Vec(IDL.Tuple(AccountId__2, CompResult)))\n    ),\n    'icdex_klines2' : IDL.Vec(\n      IDL.Tuple(KInterval, IDL.Tuple(IDL.Vec(KBar), IDL.Vec(KBar)))\n    ),\n    'sagaData' : SagaData,\n    'icdex_orders' : IDL.Vec(IDL.Tuple(Txid__3, TradingOrder)),\n    'icdex_orderBook' : IDL.Record({\n      'ask' : IDL.Vec(IDL.Tuple(Txid__3, OrderPrice__1)),\n      'bid' : IDL.Vec(IDL.Tuple(Txid__3, OrderPrice__1)),\n    }),\n    'rounds' : IDL.Vec(IDL.Tuple(IDL.Nat, RoundItem)),\n    'traderReferrers' : IDL.Vec(IDL.Tuple(AccountId__2, AccountId__2)),\n    'traderReferrerTemps' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(AccountId__2, IDL.Text, Time))\n    ),\n    'ambassadors' : IDL.Vec(IDL.Tuple(AccountId__2, AmbassadorData)),\n  });\n  const Nonce = IDL.Nat;\n  const Txid__1 = IDL.Vec(IDL.Nat8);\n  const Subaccount__1 = IDL.Vec(IDL.Nat8);\n  const Account__1 = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount__1),\n  });\n  const Vol = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const CompCapital__1 = IDL.Record({\n    'total' : IDL.Float64,\n    'value0' : IDL.Nat,\n    'value1' : IDL.Nat,\n  });\n  const CompResult__1 = IDL.Record({\n    'vol' : Vol,\n    'status' : IDL.Variant({ 'Active' : IDL.Null, 'Dropout' : IDL.Null }),\n    'icrc1Account' : Account__1,\n    'capital' : CompCapital__1,\n    'assetValue' : IDL.Opt(CompCapital__1),\n  });\n  const ListPage = IDL.Nat;\n  const ListSize = IDL.Nat;\n  const AccountId__4 = IDL.Vec(IDL.Nat8);\n  const RoundItem__1 = IDL.Record({\n    'end' : Time,\n    'content' : IDL.Text,\n    'isSettled' : IDL.Bool,\n    'name' : IDL.Text,\n    'minCapital' : IDL.Nat,\n    'start' : Time,\n    'closedPrice' : IDL.Opt(IDL.Float64),\n    'quoteToken' : IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n  });\n  const IcpE8s = IDL.Nat;\n  const DexConfig = IDL.Record({\n    'MAX_TPS' : IDL.Opt(IDL.Nat),\n    'ICTC_RUN_INTERVAL' : IDL.Opt(IDL.Nat),\n    'MAKER_BONUS_RATE' : IDL.Opt(IDL.Nat),\n    'MAX_PENDINGS' : IDL.Opt(IDL.Nat),\n    'ORDER_EXPIRATION_DURATION' : IDL.Opt(IDL.Int),\n    'TRADING_FEE' : IDL.Opt(IDL.Nat),\n    'UNIT_SIZE' : IDL.Opt(IDL.Nat),\n    'STORAGE_INTERVAL' : IDL.Opt(IDL.Nat),\n    'ICP_FEE' : IDL.Opt(IcpE8s),\n  });\n  const Config = IDL.Record({\n    'MAX_STORAGE_TRIES' : IDL.Opt(IDL.Nat),\n    'EN_DEBUG' : IDL.Opt(IDL.Bool),\n    'MAX_CACHE_NUMBER_PER' : IDL.Opt(IDL.Nat),\n    'MAX_CACHE_TIME' : IDL.Opt(IDL.Nat),\n  });\n  const TokenType = IDL.Variant({\n    'Icp' : IDL.Null,\n    'Token' : IDL.Principal,\n    'Cycles' : IDL.Null,\n  });\n  const TokenStd__1 = IDL.Variant({\n    'dft' : IDL.Null,\n    'ext' : IDL.Null,\n    'icp' : IDL.Null,\n    'other' : IDL.Text,\n    'cycles' : IDL.Null,\n    'ledger' : IDL.Null,\n    'icrc1' : IDL.Null,\n    'dip20' : IDL.Null,\n    'drc20' : IDL.Null,\n  });\n  const DexInfo = IDL.Record({\n    'feeRate' : IDL.Float64,\n    'mmType' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'token0' : IDL.Tuple(TokenType, TokenStd__1),\n    'token1' : IDL.Tuple(TokenType, TokenStd__1),\n    'pairName' : IDL.Text,\n    'dexName' : IDL.Text,\n    'canisterId' : IDL.Principal,\n  });\n  const Address__2 = IDL.Text;\n  const TxnRecord__3 = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const Txid__5 = IDL.Vec(IDL.Nat8);\n  const DRC207Support = IDL.Record({\n    'timer' : IDL.Record({\n      'interval_seconds' : IDL.Opt(IDL.Nat),\n      'enable' : IDL.Bool,\n    }),\n    'monitorable_by_self' : IDL.Bool,\n    'monitorable_by_blackhole' : IDL.Record({\n      'canister_id' : IDL.Opt(IDL.Principal),\n      'allowed' : IDL.Bool,\n    }),\n    'cycles_receivable' : IDL.Bool,\n  });\n  const FeeStatus = IDL.Record({\n    'feeRate' : IDL.Float64,\n    'feeBalance' : FeeBalance,\n    'totalFee' : FeeBalance,\n  });\n  const DexSetting = IDL.Record({\n    'MAX_TPS' : IDL.Nat,\n    'ICTC_RUN_INTERVAL' : IDL.Nat,\n    'MAKER_BONUS_RATE' : IDL.Nat,\n    'MAX_PENDINGS' : IDL.Nat,\n    'TRADING_FEE' : IDL.Nat,\n    'UNIT_SIZE' : IDL.Nat,\n    'STORAGE_INTERVAL' : IDL.Nat,\n    'ICP_FEE' : IcpE8s,\n  });\n  const TxAccount = IDL.Text;\n  const Toid__3 = IDL.Nat;\n  const CallType__1 = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : Account,\n      'icrc1_transfer' : TransferArgs,\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : ApproveArgs,\n      'icrc2_transfer_from' : TransferFromArgs,\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Principal, IDL.Nat),\n      'dip20Send' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Nat),\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : IDL.Tuple(IDL.Principal, IDL.Principal, IDL.Nat),\n      'approve' : IDL.Tuple(IDL.Principal, IDL.Nat),\n      'balanceOf' : IDL.Principal,\n      'transfer' : IDL.Tuple(IDL.Principal, IDL.Nat),\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Tuple(\n        IDL.Vec(To),\n        IDL.Vec(Amount__2),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'approve' : IDL.Tuple(\n        Spender,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'balanceOf' : Address__1,\n      'txnRecord' : BlobFill,\n      'lockTransfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'dropAccount' : IDL.Opt(Sa__1),\n      'executeTransfer' : IDL.Tuple(\n        BlobFill,\n        ExecuteType,\n        IDL.Opt(To),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'lockTransferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : AccountBalanceArgs,\n      'transfer' : TransferArgs__1,\n    }),\n    'ICTokens' : IDL.Variant({\n      'burn' : IDL.Tuple(\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'mint' : IDL.Tuple(\n        Address__1,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    '__skip' : IDL.Null,\n  });\n  const Order__1 = IDL.Record({\n    'status' : OrderStatus,\n    'tasks' : List_1,\n    'callbackStatus' : IDL.Opt(Status__3),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Text,\n    'comps' : List,\n    'time' : Time,\n    'compStrategy' : CompStrategy,\n    'allowPushing' : IDL.Variant({ 'Opening' : IDL.Null, 'Closed' : IDL.Null }),\n  });\n  const TokenSymbol = IDL.Text;\n  const TokenStd = IDL.Variant({\n    'dft' : IDL.Null,\n    'ext' : IDL.Null,\n    'icp' : IDL.Null,\n    'other' : IDL.Text,\n    'cycles' : IDL.Null,\n    'ledger' : IDL.Null,\n    'icrc1' : IDL.Null,\n    'dip20' : IDL.Null,\n    'drc20' : IDL.Null,\n  });\n  const TokenInfo = IDL.Tuple(IDL.Principal, TokenSymbol, TokenStd);\n  const Timestamp__4 = IDL.Nat;\n  const OrderFilled__1 = IDL.Record({\n    'time' : Time,\n    'token0Value' : BalanceChange,\n    'counterparty' : Txid,\n    'token1Value' : BalanceChange,\n  });\n  const OrderSide = IDL.Variant({ 'Buy' : IDL.Null, 'Sell' : IDL.Null });\n  const PriceResponse = IDL.Record({ 'quantity' : IDL.Nat, 'price' : IDL.Nat });\n  const Liquidity = IDL.Record({\n    'vol' : Vol__1,\n    'shares' : Amount,\n    'shareWeighted' : IDL.Record({\n      'updateTime' : Timestamp__1,\n      'shareTimeWeighted' : IDL.Nat,\n    }),\n    'unitValue' : IDL.Tuple(Amount, Amount),\n    'value0' : Amount,\n    'value1' : Amount,\n    'priceWeighted' : PriceWeighted,\n    'swapCount' : IDL.Nat64,\n  });\n  const TradingOrder__1 = IDL.Record({\n    'fee' : IDL.Record({ 'fee0' : IDL.Int, 'fee1' : IDL.Int }),\n    'gas' : IDL.Record({ 'gas0' : IDL.Nat, 'gas1' : IDL.Nat }),\n    'status' : TradingStatus,\n    'toids' : IDL.Vec(Toid),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'txid' : Txid,\n    'icrc1Account' : IDL.Opt(\n      IDL.Record({\n        'owner' : IDL.Principal,\n        'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      })\n    ),\n    'orderType' : OrderType__1,\n    'filled' : IDL.Vec(OrderFilled),\n    'expiration' : Time,\n    'nonce' : IDL.Nat,\n    'account' : AccountId__1,\n    'remaining' : OrderPrice__1,\n    'index' : IDL.Nat,\n    'orderPrice' : OrderPrice__1,\n    'refund' : IDL.Tuple(IDL.Nat, IDL.Nat, IDL.Nat),\n  });\n  const TrieList = IDL.Record({\n    'total' : IDL.Nat,\n    'data' : IDL.Vec(IDL.Tuple(Txid__1, TradingOrder__1)),\n    'totalPage' : IDL.Nat,\n  });\n  const TxnRecord = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const OrderStatusResponse = IDL.Variant({\n    'Failed' : TradingOrder,\n    'None' : IDL.Null,\n    'Completed' : TxnRecord,\n    'Pending' : TradingOrder,\n  });\n  const SysMode = IDL.Variant({\n    'DisabledTrading' : IDL.Null,\n    'ReadOnly' : IDL.Null,\n    'ClosingOnly' : IDL.Null,\n    'GeneralTrading' : IDL.Null,\n  });\n  const OrderPrice = IDL.Record({\n    'quantity' : IDL.Variant({\n      'Buy' : IDL.Tuple(Quantity, Amount),\n      'Sell' : Quantity,\n    }),\n    'price' : Price,\n  });\n  const OrderType = IDL.Variant({\n    'FAK' : IDL.Null,\n    'FOK' : IDL.Null,\n    'LMT' : IDL.Null,\n    'MKT' : IDL.Null,\n  });\n  const PeriodNs = IDL.Int;\n  const Data = IDL.Vec(IDL.Nat8);\n  const TradingResult = IDL.Variant({\n    'ok' : IDL.Record({\n      'status' : TradingStatus,\n      'txid' : Txid,\n      'filled' : IDL.Vec(OrderFilled),\n    }),\n    'err' : IDL.Record({\n      'code' : IDL.Variant({\n        'NonceError' : IDL.Null,\n        'InvalidAmount' : IDL.Null,\n        'UndefinedError' : IDL.Null,\n        'UnacceptableVolatility' : IDL.Null,\n        'TransactionBlocking' : IDL.Null,\n        'InsufficientBalance' : IDL.Null,\n        'TransferException' : IDL.Null,\n      }),\n      'message' : IDL.Text,\n    }),\n  });\n  const DebitToken = IDL.Principal;\n  return IDL.Service({\n    'IDO_config' : IDL.Func([IDOSetting], [], []),\n    'IDO_getConfig' : IDL.Func(\n        [],\n        [IDL.Opt(IDL.Principal), IDOSetting, IDL.Opt(IDORequirement)],\n        ['query'],\n      ),\n    'IDO_qualification' : IDL.Func(\n        [IDL.Opt(Address)],\n        [IDL.Vec(IDL.Tuple(Address, Participant))],\n        ['query'],\n      ),\n    'IDO_removeWhitelist' : IDL.Func([IDL.Vec(Address)], [], []),\n    'IDO_setFunder' : IDL.Func(\n        [IDL.Opt(IDL.Principal), IDL.Opt(IDORequirement)],\n        [],\n        [],\n      ),\n    'IDO_setWhitelist' : IDL.Func(\n        [IDL.Vec(IDL.Tuple(Address, Amount__1))],\n        [],\n        [],\n      ),\n    'IDO_updateQualification' : IDL.Func(\n        [IDL.Opt(Sa)],\n        [IDL.Opt(Participant)],\n        [],\n      ),\n    'backup' : IDL.Func([BackupRequest], [BackupResponse], []),\n    'cancel' : IDL.Func([Nonce, IDL.Opt(Sa)], [], []),\n    'cancelByTxid' : IDL.Func([Txid__1, IDL.Opt(Sa)], [], []),\n    'changeOwner' : IDL.Func([IDL.Principal], [IDL.Bool], []),\n    'comp_deposit' : IDL.Func([Amount__1, Amount__1, IDL.Opt(Sa)], [], []),\n    'comp_dropout' : IDL.Func([IDL.Opt(Sa)], [IDL.Bool], []),\n    'comp_fallback' : IDL.Func([IDL.Opt(Sa)], [Amount__1, Amount__1], []),\n    'comp_getDepositAccount' : IDL.Func(\n        [Address],\n        [\n          IDL.Record({\n            'depositing' : IDL.Tuple(Account__1, Address),\n            'balance' : IDL.Tuple(Account__1, Address),\n          }),\n        ],\n        ['query'],\n      ),\n    'comp_newRound' : IDL.Func(\n        [\n          IDL.Text,\n          IDL.Text,\n          Time,\n          Time,\n          IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n          IDL.Nat,\n          IDL.Bool,\n        ],\n        [IDL.Nat],\n        [],\n      ),\n    'comp_register' : IDL.Func([IDL.Opt(Sa)], [IDL.Bool], []),\n    'comp_result' : IDL.Func(\n        [IDL.Opt(IDL.Nat), Address],\n        [IDL.Opt(CompResult__1)],\n        ['query'],\n      ),\n    'comp_results' : IDL.Func(\n        [IDL.Opt(IDL.Nat), ListPage, ListSize],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(AccountId__4, CompResult__1)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'comp_round' : IDL.Func(\n        [IDL.Opt(IDL.Nat)],\n        [IDL.Nat, IDL.Opt(RoundItem__1)],\n        ['query'],\n      ),\n    'comp_settle' : IDL.Func([IDL.Nat], [], []),\n    'comp_withdraw' : IDL.Func([IDL.Opt(Sa)], [Amount__1, Amount__1], []),\n    'config' : IDL.Func([DexConfig], [IDL.Bool], []),\n    'count' : IDL.Func([IDL.Opt(Address)], [IDL.Nat], ['query']),\n    'drc205_canisterId' : IDL.Func([], [IDL.Principal], ['query']),\n    'drc205_config' : IDL.Func([Config], [IDL.Bool], []),\n    'drc205_dexInfo' : IDL.Func([], [DexInfo], ['query']),\n    'drc205_events' : IDL.Func(\n        [IDL.Opt(Address__2)],\n        [IDL.Vec(TxnRecord__3)],\n        ['query'],\n      ),\n    'drc205_getConfig' : IDL.Func([], [Setting], ['query']),\n    'drc205_pool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Txid__1, TxnRecord__3, IDL.Nat))],\n        ['query'],\n      ),\n    'drc205_txn' : IDL.Func([Txid__5], [IDL.Opt(TxnRecord__3)], ['query']),\n    'drc205_txn2' : IDL.Func([Txid__5], [IDL.Opt(TxnRecord__3)], []),\n    'drc207' : IDL.Func([], [DRC207Support], ['query']),\n    'fallback' : IDL.Func([Nonce, IDL.Opt(Sa)], [IDL.Bool], []),\n    'fallbackByTxid' : IDL.Func([Txid__1, IDL.Opt(Sa)], [IDL.Bool], []),\n    'fee' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'maker' : IDL.Record({ 'buy' : IDL.Float64, 'sell' : IDL.Float64 }),\n            'taker' : IDL.Record({ 'buy' : IDL.Float64, 'sell' : IDL.Float64 }),\n          }),\n        ],\n        ['query'],\n      ),\n    'feeStatus' : IDL.Func([], [FeeStatus], ['query']),\n    'getConfig' : IDL.Func([], [DexSetting], ['query']),\n    'getOwner' : IDL.Func([], [IDL.Principal], ['query']),\n    'getQuotes' : IDL.Func([KInterval], [IDL.Vec(KBar)], ['query']),\n    'getTxAccount' : IDL.Func(\n        [Address],\n        [Account__1, TxAccount, Nonce, Txid__1],\n        ['query'],\n      ),\n    'ictc_TM' : IDL.Func([], [IDL.Text], ['query']),\n    'ictc_addAdmin' : IDL.Func([IDL.Principal], [], []),\n    'ictc_appendTT' : IDL.Func(\n        [\n          IDL.Opt(IDL.Vec(IDL.Nat8)),\n          Toid__3,\n          IDL.Opt(Ttid__2),\n          IDL.Principal,\n          CallType__1,\n          IDL.Vec(Ttid__2),\n        ],\n        [Ttid__2],\n        [],\n      ),\n    'ictc_blockTO' : IDL.Func([Toid__3], [IDL.Opt(Toid__3)], []),\n    'ictc_clearLog' : IDL.Func([IDL.Opt(IDL.Int), IDL.Bool], [], []),\n    'ictc_clearTTPool' : IDL.Func([], [], []),\n    'ictc_completeTO' : IDL.Func([Toid__3, OrderStatus], [IDL.Bool], []),\n    'ictc_doneTO' : IDL.Func([Toid__3, OrderStatus, IDL.Bool], [IDL.Bool], []),\n    'ictc_doneTT' : IDL.Func(\n        [Toid__3, Ttid__2, IDL.Bool],\n        [IDL.Opt(Ttid__2)],\n        [],\n      ),\n    'ictc_getAdmins' : IDL.Func([], [IDL.Vec(IDL.Principal)], ['query']),\n    'ictc_getCalleeStatus' : IDL.Func(\n        [IDL.Principal],\n        [IDL.Opt(CalleeStatus)],\n        ['query'],\n      ),\n    'ictc_getPool' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'ttPool' : IDL.Record({\n              'total' : IDL.Nat,\n              'items' : IDL.Vec(IDL.Tuple(Ttid__2, Task__2)),\n            }),\n            'toPool' : IDL.Record({\n              'total' : IDL.Nat,\n              'items' : IDL.Vec(IDL.Tuple(Toid__3, IDL.Opt(Order__1))),\n            }),\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTO' : IDL.Func([Toid__3], [IDL.Opt(Order__1)], ['query']),\n    'ictc_getTOCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'ictc_getTOPool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Toid__3, IDL.Opt(Order__1)))],\n        ['query'],\n      ),\n    'ictc_getTOs' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(Toid__3, Order__1)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTT' : IDL.Func([Ttid__2], [IDL.Opt(TaskEvent)], ['query']),\n    'ictc_getTTByTO' : IDL.Func([Toid__3], [IDL.Vec(TaskEvent)], ['query']),\n    'ictc_getTTErrors' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(IDL.Nat, ErrorLog)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTTPool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Ttid__2, Task__2))],\n        ['query'],\n      ),\n    'ictc_getTTs' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(Ttid__2, TaskEvent)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_redoTT' : IDL.Func([Toid__3, Ttid__2], [IDL.Opt(Ttid__2)], []),\n    'ictc_removeAdmin' : IDL.Func([IDL.Principal], [], []),\n    'ictc_runTO' : IDL.Func([Toid__3], [IDL.Opt(OrderStatus)], []),\n    'ictc_runTT' : IDL.Func([], [IDL.Bool], []),\n    'info' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'decimals' : IDL.Nat8,\n            'setting' : DexSetting,\n            'owner' : IDL.Principal,\n            'name' : IDL.Text,\n            'version' : IDL.Text,\n            'token0' : TokenInfo,\n            'token1' : TokenInfo,\n            'paused' : IDL.Bool,\n          }),\n        ],\n        ['query'],\n      ),\n    'init' : IDL.Func([], [], []),\n    'latestFilled' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Timestamp__4, Txid__1, OrderFilled__1, OrderSide))],\n        ['query'],\n      ),\n    'level10' : IDL.Func(\n        [],\n        [\n          IDL.Nat,\n          IDL.Record({\n            'ask' : IDL.Vec(PriceResponse),\n            'bid' : IDL.Vec(PriceResponse),\n          }),\n        ],\n        ['query'],\n      ),\n    'level100' : IDL.Func(\n        [],\n        [\n          IDL.Nat,\n          IDL.Record({\n            'ask' : IDL.Vec(PriceResponse),\n            'bid' : IDL.Vec(PriceResponse),\n          }),\n        ],\n        ['query'],\n      ),\n    'liquidity' : IDL.Func([IDL.Opt(Address)], [Liquidity], ['query']),\n    'makerRebate' : IDL.Func([Address], [IDL.Float64, IDL.Float64], ['query']),\n    'name' : IDL.Func([], [IDL.Text], ['query']),\n    'orderExpirationDuration' : IDL.Func([], [IDL.Int], ['query']),\n    'pending' : IDL.Func(\n        [IDL.Opt(Address), IDL.Opt(ListPage), IDL.Opt(ListSize)],\n        [TrieList],\n        ['query'],\n      ),\n    'pendingAll' : IDL.Func(\n        [IDL.Opt(ListPage), IDL.Opt(ListSize)],\n        [TrieList],\n        ['query'],\n      ),\n    'pendingCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'prepare' : IDL.Func([Address], [TxAccount, Nonce], ['query']),\n    'recovery' : IDL.Func([BackupResponse], [IDL.Bool], []),\n    'removeVipMaker' : IDL.Func([Address], [], []),\n    'setOrderFail' : IDL.Func([IDL.Text], [IDL.Bool], []),\n    'setPause' : IDL.Func([IDL.Bool, IDL.Opt(Time)], [IDL.Bool], []),\n    'setUpgradeMode' : IDL.Func(\n        [IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null })],\n        [],\n        [],\n      ),\n    'setVipMaker' : IDL.Func([Address, IDL.Nat], [], []),\n    'stats' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'change24h' : IDL.Float64,\n            'vol24h' : Vol,\n            'totalVol' : Vol,\n            'price' : IDL.Float64,\n          }),\n        ],\n        ['query'],\n      ),\n    'status' : IDL.Func([Address, Nonce], [OrderStatusResponse], ['query']),\n    'statusByTxid' : IDL.Func([Txid__1], [OrderStatusResponse], ['query']),\n    'sync' : IDL.Func([], [], []),\n    'sysMode' : IDL.Func(\n        [],\n        [IDL.Record({ 'mode' : SysMode, 'openingTime' : Time })],\n        ['query'],\n      ),\n    'ta_ambassador' : IDL.Func(\n        [Address],\n        [IDL.Bool, IDL.Text, IDL.Nat, Vol],\n        ['query'],\n      ),\n    'ta_description' : IDL.Func([], [IDL.Text], ['query']),\n    'ta_getReferrer' : IDL.Func(\n        [Address],\n        [IDL.Opt(IDL.Tuple(Address, IDL.Bool))],\n        ['query'],\n      ),\n    'ta_setDescription' : IDL.Func([IDL.Text], [], []),\n    'ta_setReferrer' : IDL.Func(\n        [Address, IDL.Opt(IDL.Text), IDL.Opt(Sa)],\n        [IDL.Bool],\n        [],\n      ),\n    'ta_stats' : IDL.Func(\n        [IDL.Opt(IDL.Text)],\n        [IDL.Nat, IDL.Nat, Vol],\n        ['query'],\n      ),\n    'timerStart' : IDL.Func([IDL.Nat], [], []),\n    'timerStop' : IDL.Func([], [], []),\n    'token0' : IDL.Func([], [TokenType, IDL.Opt(TokenStd)], ['query']),\n    'token1' : IDL.Func([], [TokenType, IDL.Opt(TokenStd)], ['query']),\n    'tpsStats' : IDL.Func(\n        [],\n        [IDL.Nat, IDL.Float64, IDL.Nat, IDL.Nat, IDL.Int, IDL.Int],\n        ['query'],\n      ),\n    'trade' : IDL.Func(\n        [\n          OrderPrice,\n          OrderType,\n          IDL.Opt(PeriodNs),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'tradeMKT' : IDL.Func(\n        [DebitToken, Amount__1, IDL.Opt(Nonce), IDL.Opt(Sa), IDL.Opt(Data)],\n        [TradingResult],\n        [],\n      ),\n    'tradeMKT_b' : IDL.Func(\n        [\n          DebitToken,\n          Amount__1,\n          IDL.Opt(IDL.Nat),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n          IDL.Opt(\n            IDL.Record({ 'broker' : IDL.Principal, 'rate' : IDL.Float64 })\n          ),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'trade_b' : IDL.Func(\n        [\n          OrderPrice,\n          OrderType,\n          IDL.Opt(PeriodNs),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n          IDL.Opt(\n            IDL.Record({ 'broker' : IDL.Principal, 'rate' : IDL.Float64 })\n          ),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'userCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'version' : IDL.Func([], [IDL.Text], ['query']),\n    'wallet_receive' : IDL.Func([], [], []),\n    'withdraw_cycles' : IDL.Func([IDL.Nat], [], []),\n  });\n};\nexport const init = ({ IDL }) => { return []; };"
                },
                "method": {
                    "name": "stats",
                    "arg": {
                        "type": "tuple",
                        "subitems": []
                    },
                    "result": {
                        "type": "tuple",
                        "subitems": [
                            {
                                "key": "_0_",
                                "type": {
                                    "type": "record",
                                    "subitems": [
                                        {
                                            "key": "change24h",
                                            "type": {
                                                "type": "float64"
                                            }
                                        },
                                        {
                                            "key": "vol24h",
                                            "type": {
                                                "type": "record",
                                                "subitems": [
                                                    {
                                                        "key": "value0",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    },
                                                    {
                                                        "key": "value1",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "key": "totalVol",
                                            "type": {
                                                "type": "record",
                                                "subitems": [
                                                    {
                                                        "key": "value0",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    },
                                                    {
                                                        "key": "value1",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "key": "price",
                                            "type": {
                                                "type": "float64"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "arg": {
                    "type": {
                        "type": "tuple",
                        "subitems": []
                    },
                    "constraint": {
                        "type": "tuple",
                        "subitems": []
                    }
                },
                "identity": {
                    "from": "anonymous"
                }
            },
            "exported": {
                "target": "inner",
                "name": "5c55e00b-b6a0-467b-815e-1877e7d53fea"
            }
        },
        {
            "source": "inner",
            "inner": {
                "name": "5c55e00b-b6a0-467b-815e-1877e7d53fea",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "extra": {
                    "constant": false
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "data = data[0];\ndata = data['change24h'];\nresult = data;"
                },
                "to": {
                    "type": "float64"
                }
            },
            "exported": {
                "target": "inner",
                "name": ""
            }
        },
        {
            "source": "inner",
            "inner": {
                "name": "5c55e00b-b6a0-467b-815e-1877e7d53fea",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "extra": {
                    "constant": false
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "data = data[0];\ndata = data['price'];\nresult = data;"
                },
                "to": {
                    "type": "float64"
                }
            },
            "exported": {
                "target": "inner",
                "name": "cf0025ae-a732-4419-a51a-81aaf48abf03"
            }
        },
        {
            "source": "canister",
            "canister": {
                "canister_id": {
                    "fixed": true,
                    "value": "32fn4-qqaaa-aaaak-ad65a-cai"
                },
                "info": {
                    "module_hash": "c38df5ecc4def90e52b9fc4e2ff84fdd74fb88bef67fdc62c0f6a854c8511891",
                    "updated": 1685032222915
                },
                "candid": {
                    "custom": false,
                    "did": "type Vol__2 = \n record {\n   value0: nat;\n   value1: nat;\n };\ntype Vol__1 = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype Vol = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype TxnResult = \n variant {\n   err:\n    record {\n      code:\n       variant {\n         DuplicateExecutedTransfer;\n         InsufficientAllowance;\n         InsufficientBalance;\n         InsufficientGas;\n         LockedTransferExpired;\n         NoLockedTransfer;\n         NonceError;\n         UndefinedError;\n       };\n      message: text;\n    };\n   ok: Txid__4;\n };\ntype TxnRecord__3 = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype TxnRecord__2 = \n record {\n   caller: AccountId__3;\n   gas: Gas;\n   index: nat;\n   msgCaller: opt principal;\n   nonce: nat;\n   timestamp: Time__1;\n   transaction: Transaction;\n   txid: Txid__4;\n };\ntype TxnRecord__1 = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype TxnRecord = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype Txid__5 = blob;\ntype Txid__4 = blob;\ntype Txid__3 = blob;\ntype Txid__2 = blob;\ntype Txid__1 = blob;\ntype Txid = blob;\ntype TxReceipt = \n variant {\n   Err:\n    variant {\n      AmountTooSmall;\n      BlockUsed;\n      ErrorOperationStyle;\n      ErrorTo;\n      InsufficientAllowance;\n      InsufficientBalance;\n      LedgerTrap;\n      Other: text;\n      Unauthorized;\n    };\n   Ok: nat;\n };\ntype TxAccount = text;\ntype Ttid__2 = nat;\ntype Ttid__1 = nat;\ntype Ttid = nat;\ntype TrieList = \n record {\n   data: vec record {\n               Txid__1;\n               TradingOrder__1;\n             };\n   total: nat;\n   totalPage: nat;\n };\ntype TransferResult = \n variant {\n   Err: TransferError__2;\n   Ok: BlockIndex;\n };\ntype TransferFromError = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientAllowance: record {allowance: nat;};\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype TransferFromArgs = \n record {\n   amount: nat;\n   created_at_time: opt nat64;\n   fee: opt nat;\n   from: Account;\n   memo: opt blob;\n   to: Account;\n };\ntype TransferError__2 = \n variant {\n   BadFee: record {expected_fee: ICP;};\n   InsufficientFunds: record {balance: ICP;};\n   TxCreatedInFuture;\n   TxDuplicate: record {duplicate_of: BlockIndex;};\n   TxTooOld: record {allowed_window_nanos: nat64;};\n };\ntype TransferError__1 = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype TransferError = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture;\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld: record {allowed_window_nanos: Duration;};\n };\ntype TransferArgs__1 = \n record {\n   amount: ICP;\n   created_at_time: opt Timestamp__3;\n   fee: ICP;\n   from_subaccount: opt SubAccount;\n   memo: Memo;\n   to: AccountIdentifier;\n };\ntype TransferArgs = \n record {\n   amount: nat;\n   created_at_time: opt Timestamp__2;\n   fee: opt nat;\n   from_subaccount: opt Subaccount;\n   memo: opt blob;\n   to: Account;\n };\ntype Transaction = \n record {\n   data: opt blob;\n   from: AccountId__3;\n   operation: Operation;\n   to: AccountId__3;\n   value: nat;\n };\ntype TradingStatus = \n variant {\n   Cancelled;\n   Closed;\n   Pending;\n   Todo;\n };\ntype TradingResult = \n variant {\n   err:\n    record {\n      code:\n       variant {\n         InsufficientBalance;\n         InvalidAmount;\n         NonceError;\n         TransactionBlocking;\n         TransferException;\n         UnacceptableVolatility;\n         UndefinedError;\n       };\n      message: text;\n    };\n   ok: record {\n         filled: vec OrderFilled;\n         status: TradingStatus;\n         txid: Txid;\n       };\n };\ntype TradingOrder__1 = \n record {\n   account: AccountId__1;\n   data: opt blob;\n   expiration: Time;\n   fee: record {\n          fee0: int;\n          fee1: int;\n        };\n   filled: vec OrderFilled;\n   gas: record {\n          gas0: nat;\n          gas1: nat;\n        };\n   icrc1Account: opt record {\n                       owner: principal;\n                       subaccount: opt blob;\n                     };\n   index: nat;\n   nonce: nat;\n   orderPrice: OrderPrice__1;\n   orderType: OrderType__1;\n   refund: record {\n             nat;\n             nat;\n             nat;\n           };\n   remaining: OrderPrice__1;\n   status: TradingStatus;\n   time: Time;\n   toids: vec Toid;\n   txid: Txid;\n };\ntype TradingOrder = \n record {\n   account: AccountId__1;\n   data: opt blob;\n   expiration: Time;\n   fee: record {\n          fee0: int;\n          fee1: int;\n        };\n   filled: vec OrderFilled;\n   gas: record {\n          gas0: nat;\n          gas1: nat;\n        };\n   icrc1Account: opt record {\n                       owner: principal;\n                       subaccount: opt blob;\n                     };\n   index: nat;\n   nonce: nat;\n   orderPrice: OrderPrice__1;\n   orderType: OrderType__1;\n   refund: record {\n             nat;\n             nat;\n             nat;\n           };\n   remaining: OrderPrice__1;\n   status: TradingStatus;\n   time: Time;\n   toids: vec Toid;\n   txid: Txid;\n };\ntype TokenType__1 = \n variant {\n   Cycles;\n   Icp;\n   Token: principal;\n };\ntype TokenType = \n variant {\n   Cycles;\n   Icp;\n   Token: principal;\n };\ntype TokenSymbol = text;\ntype TokenStd__1 = \n variant {\n   cycles;\n   dft;\n   dip20;\n   drc20;\n   ext;\n   icp;\n   icrc1;\n   ledger;\n   other: text;\n };\ntype TokenStd = \n variant {\n   cycles;\n   dft;\n   dip20;\n   drc20;\n   ext;\n   icp;\n   icrc1;\n   ledger;\n   other: text;\n };\ntype TokenInfo = \n record {\n   principal;\n   TokenSymbol;\n   TokenStd;\n };\ntype Toid__3 = nat;\ntype Toid__2 = nat;\ntype Toid__1 = nat;\ntype Toid = nat;\ntype To = text;\ntype Timestamp__4 = nat;\ntype Timestamp__3 = record {timestamp_nanos: nat64;};\ntype Timestamp__2 = nat64;\ntype Timestamp__1 = nat;\ntype Timestamp = nat;\ntype Timeout = nat32;\ntype Time__1 = int;\ntype Time = int;\ntype Tcid = nat;\ntype Task__2 = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype Task__1 = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype TaskResult = \n record {\n   Status__1;\n   opt Receipt;\n   opt Err;\n };\ntype TaskEvent = \n record {\n   attempts: Attempts;\n   callbackStatus: opt Status__2;\n   result: TaskResult;\n   task: Task;\n   time: Time;\n   toid: opt Toid__1;\n   ttid: Ttid__1;\n   txHash: blob;\n };\ntype Task = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype SysMode = \n variant {\n   ClosingOnly;\n   DisabledTrading;\n   GeneralTrading;\n   ReadOnly;\n };\ntype Subaccount__1 = blob;\ntype Subaccount = blob;\ntype SubAccount = blob;\ntype Status__3 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status__2 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status__1 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status = \n variant {\n   Cancelled;\n   Completed;\n   Failed;\n   PartiallyCompletedAndCancelled;\n   Pending;\n };\ntype Spender = text;\ntype Shares = nat;\ntype ShareChange = \n variant {\n   Burn: Shares;\n   Mint: Shares;\n   NoChange;\n };\ntype Setting = \n record {\n   EN_DEBUG: bool;\n   MAX_CACHE_NUMBER_PER: nat;\n   MAX_CACHE_TIME: nat;\n   MAX_STORAGE_TRIES: nat;\n };\ntype SagaTask = \n record {\n   comp: opt Compensation;\n   status: Status__3;\n   task: Task__2;\n   ttid: Ttid__2;\n };\ntype SagaData = \n record {\n   actuator:\n    record {\n      callees: vec record {\n                     Callee;\n                     CalleeStatus;\n                   };\n      errIndex: nat;\n      errorLogs: vec record {\n                       nat;\n                       ErrorLog;\n                     };\n      firstErrIndex: nat;\n      firstIndex: nat;\n      index: nat;\n      taskLogs: vec record {\n                      Ttid;\n                      TaskEvent;\n                    };\n      tasks: record {\n               vec record {\n                     Ttid;\n                     Task__1;\n                   };\n               vec record {\n                     Ttid;\n                     Task__1;\n                   };\n             };\n    };\n   aliveOrders: vec record {\n                      Toid__2;\n                      Time;\n                    };\n   autoClearTimeout: int;\n   firstIndex: nat;\n   index: nat;\n   orders: vec record {\n                 Toid__2;\n                 Order;\n               };\n   taskEvents: vec record {\n                     Toid__2;\n                     vec Ttid;\n                   };\n };\ntype Sa__1 = vec nat8;\ntype Sa = vec nat8;\ntype RoundItem__1 = \n record {\n   closedPrice: opt float64;\n   content: text;\n   end: Time;\n   isSettled: bool;\n   minCapital: nat;\n   name: text;\n   quoteToken: variant {\n                 token0;\n                 token1;\n               };\n   start: Time;\n };\ntype RoundItem = \n record {\n   closedPrice: opt float64;\n   content: text;\n   end: Time;\n   isSettled: bool;\n   minCapital: nat;\n   name: text;\n   quoteToken: variant {\n                 token0;\n                 token1;\n               };\n   start: Time;\n };\ntype Receipt = \n variant {\n   DIP20:\n    variant {\n      approve: TxReceipt;\n      balanceOf: nat;\n      transfer: TxReceipt;\n      transferFrom: TxReceipt;\n    };\n   DRC20:\n    variant {\n      approve: TxnResult;\n      balanceOf: Amount__2;\n      dropAccount;\n      executeTransfer: TxnResult;\n      lockTransfer: TxnResult;\n      lockTransferFrom: TxnResult;\n      transfer: TxnResult;\n      transferBatch: vec TxnResult;\n      transferFrom: TxnResult;\n      txnRecord: opt TxnRecord__2;\n    };\n   ICRC1:\n    variant {\n      icrc1_balance_of: nat;\n      icrc1_transfer: variant {\n                        Err: TransferError;\n                        Ok: nat;\n                      };\n    };\n   ICRC1New:\n    variant {\n      icrc1_balance_of: nat;\n      icrc1_transfer: variant {\n                        Err: TransferError__1;\n                        Ok: nat;\n                      };\n    };\n   ICRC2:\n    variant {\n      icrc2_approve: variant {\n                       Err: ApproveError;\n                       Ok: nat;\n                     };\n      icrc2_transfer_from: variant {\n                             Err: TransferFromError;\n                             Ok: nat;\n                           };\n    };\n   ICTokens: variant {\n               burn: TxnResult;\n               mint: TxnResult;\n             };\n   Ledger: variant {\n             account_balance: ICP;\n             transfer: TransferResult;\n           };\n   This: variant {\n           dip20Send;\n           dip20SendComp;\n         };\n   __block;\n   __skip;\n };\ntype Quantity = nat;\ntype PriceWeighted = \n record {\n   token0TimeWeighted: nat;\n   token1TimeWeighted: nat;\n   updateTime: Timestamp__1;\n };\ntype PriceResponse = \n record {\n   price: nat;\n   quantity: nat;\n };\ntype Price = nat;\ntype PeriodNs = int;\ntype Participant = \n record {\n   historyVol: float64;\n   limit: Amount__1;\n   updatedTime: Time;\n   used: Amount__1;\n };\ntype Order__1 = \n record {\n   allowPushing: variant {\n                   Closed;\n                   Opening;\n                 };\n   callbackStatus: opt Status__3;\n   compStrategy: CompStrategy;\n   comps: List;\n   data: opt blob;\n   name: text;\n   status: OrderStatus;\n   tasks: List_1;\n   time: Time;\n };\ntype OrderType__1 = \n variant {\n   FAK;\n   FOK;\n   LMT;\n   MKT;\n };\ntype OrderType = \n variant {\n   FAK;\n   FOK;\n   LMT;\n   MKT;\n };\ntype OrderStatusResponse = \n variant {\n   Completed: TxnRecord;\n   Failed: TradingOrder;\n   None;\n   Pending: TradingOrder;\n };\ntype OrderStatus = \n variant {\n   Blocking;\n   Compensating;\n   Doing;\n   Done;\n   Recovered;\n   Todo;\n };\ntype OrderSide = \n variant {\n   Buy;\n   Sell;\n };\ntype OrderPrice__1 = \n record {\n   price: Price;\n   quantity: variant {\n               Buy: record {\n                      Quantity;\n                      Amount;\n                    };\n               Sell: Quantity;\n             };\n };\ntype OrderPrice = \n record {\n   price: Price;\n   quantity: variant {\n               Buy: record {\n                      Quantity;\n                      Amount;\n                    };\n               Sell: Quantity;\n             };\n };\ntype OrderFilled__1 = \n record {\n   counterparty: Txid;\n   time: Time;\n   token0Value: BalanceChange;\n   token1Value: BalanceChange;\n };\ntype OrderFilled = \n record {\n   counterparty: Txid;\n   time: Time;\n   token0Value: BalanceChange;\n   token1Value: BalanceChange;\n };\ntype Order = \n record {\n   allowPushing: variant {\n                   Closed;\n                   Opening;\n                 };\n   callbackStatus: opt Status__3;\n   compStrategy: CompStrategy;\n   comps: List;\n   data: opt blob;\n   name: text;\n   status: OrderStatus;\n   tasks: List_1;\n   time: Time;\n };\ntype OperationType = \n variant {\n   AddLiquidity;\n   Claim;\n   RemoveLiquidity;\n   Swap;\n };\ntype Operation = \n variant {\n   approve: record {allowance: nat;};\n   executeTransfer: record {\n                      fallback: nat;\n                      lockedTxid: Txid__4;\n                    };\n   lockTransfer:\n    record {\n      decider: AccountId__3;\n      expiration: Time__1;\n      locked: nat;\n    };\n   transfer: record {action: variant {\n                               burn;\n                               mint;\n                               send;\n                             };};\n };\ntype Nonce__3 = nat;\ntype Nonce__2 = nat;\ntype Nonce__1 = nat;\ntype Nonce = nat;\ntype Memo = nat64;\ntype List_1 = \n opt record {\n       SagaTask;\n       List_1;\n     };\ntype ListSize = nat;\ntype ListPage = nat;\ntype List = \n opt record {\n       CompTask;\n       List;\n     };\ntype Liquidity = \n record {\n   priceWeighted: PriceWeighted;\n   shareWeighted: record {\n                    shareTimeWeighted: nat;\n                    updateTime: Timestamp__1;\n                  };\n   shares: Amount;\n   swapCount: nat64;\n   unitValue: record {\n                Amount;\n                Amount;\n              };\n   value0: Amount;\n   value1: Amount;\n   vol: Vol__1;\n };\ntype KInterval = nat;\ntype KBar = \n record {\n   close: nat;\n   high: nat;\n   kid: nat;\n   low: nat;\n   open: nat;\n   updatedTs: Timestamp;\n   vol: Vol__2;\n };\ntype InitArgs = \n record {\n   name: text;\n   owner: opt principal;\n   token0: principal;\n   token1: principal;\n   unitSize: nat64;\n };\ntype IcpE8s = nat;\ntype IDOSetting = \n record {\n   IDOClosingTime: Time;\n   IDOEnabled: bool;\n   IDOLimitPerAccount: Amount__1;\n   IDOOpeningTime: Time;\n   IDOSupplies: vec record {\n                      price: float64;\n                      supply: Amount__1;\n                    };\n   IDOTotalSupply: record {\n                     IDOSupply: Amount__1;\n                     percentageOfTotal: float64;\n                   };\n   IDOWhitelistEnabled: bool;\n };\ntype IDORequirement = \n record {\n   pairs: vec record {\n                pair: principal;\n                token1ToUsdRatio: float64;\n              };\n   threshold: float64;\n };\ntype ICP = record {e8s: nat64;};\ntype Gas = \n variant {\n   cycles: nat;\n   noFee;\n   token: nat;\n };\ntype From = text;\ntype FeeStatus = \n record {\n   feeBalance: FeeBalance;\n   feeRate: float64;\n   totalFee: FeeBalance;\n };\ntype FeeBalance = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype ExecuteType = \n variant {\n   fallback;\n   send: nat;\n   sendAll;\n };\ntype ErrorLog = \n record {\n   callee: opt Callee__1;\n   result: opt TaskResult;\n   time: Time;\n   ttid: Ttid__1;\n };\ntype ErrorCode = \n variant {\n   call_error: record {err_code: nat32;};\n   canister_error;\n   canister_reject;\n   destination_invalid;\n   future: nat32;\n   system_fatal;\n   system_transient;\n };\ntype Err = \n record {\n   code: ErrorCode;\n   message: text;\n };\ntype Duration = nat64;\ntype DexSetting = \n record {\n   ICP_FEE: IcpE8s;\n   ICTC_RUN_INTERVAL: nat;\n   MAKER_BONUS_RATE: nat;\n   MAX_PENDINGS: nat;\n   MAX_TPS: nat;\n   STORAGE_INTERVAL: nat;\n   TRADING_FEE: nat;\n   UNIT_SIZE: nat;\n };\ntype DexInfo = \n record {\n   canisterId: principal;\n   dexName: text;\n   feeRate: float64;\n   mmType: variant {\n             AMM;\n             OrderBook;\n           };\n   pairName: text;\n   token0: record {\n             TokenType;\n             TokenStd__1;\n           };\n   token1: record {\n             TokenType;\n             TokenStd__1;\n           };\n };\ntype DexConfig = \n record {\n   ICP_FEE: opt IcpE8s;\n   ICTC_RUN_INTERVAL: opt nat;\n   MAKER_BONUS_RATE: opt nat;\n   MAX_PENDINGS: opt nat;\n   MAX_TPS: opt nat;\n   ORDER_EXPIRATION_DURATION: opt int;\n   STORAGE_INTERVAL: opt nat;\n   TRADING_FEE: opt nat;\n   UNIT_SIZE: opt nat;\n };\ntype Decider = text;\ntype DebitToken = principal;\ntype Data__2 = blob;\ntype Data__1 = blob;\ntype Data = blob;\ntype DRC207Support = \n record {\n   cycles_receivable: bool;\n   monitorable_by_blackhole:\n    record {\n      allowed: bool;\n      canister_id: opt principal;\n    };\n   monitorable_by_self: bool;\n   timer: record {\n            enable: bool;\n            interval_seconds: opt nat;\n          };\n };\ntype DRC205Data = \n record {\n   accountLastTxns:\n    vec record {\n          AccountId__2;\n          record {\n            vec Txid__3;\n            vec Txid__3;\n          };\n        };\n   globalLastTxns: record {\n                     vec Txid__3;\n                     vec Txid__3;\n                   };\n   globalTxns:\n    record {\n      vec record {\n            Txid__3;\n            Time;\n          };\n      vec record {\n            Txid__3;\n            Time;\n          };\n    };\n   setting: Setting;\n   storagePool: vec record {\n                      Txid__3;\n                      TxnRecord__1;\n                      nat;\n                    };\n   txnRecords: vec record {\n                     Txid__3;\n                     TxnRecord__1;\n                   };\n };\ntype CyclesWallet = principal;\ntype Config = \n record {\n   EN_DEBUG: opt bool;\n   MAX_CACHE_NUMBER_PER: opt nat;\n   MAX_CACHE_TIME: opt nat;\n   MAX_STORAGE_TRIES: opt nat;\n };\ntype Compensation = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype CompTask = \n record {\n   comp: Compensation;\n   forTtid: Ttid__2;\n   status: Status__3;\n   tcid: Tcid;\n };\ntype CompStrategy = \n variant {\n   Backward;\n   Forward;\n };\ntype CompResult__1 = \n record {\n   assetValue: opt CompCapital__1;\n   capital: CompCapital__1;\n   icrc1Account: Account__1;\n   status: variant {\n             Active;\n             Dropout;\n           };\n   vol: Vol;\n };\ntype CompResult = \n record {\n   assetValue: opt CompCapital;\n   capital: CompCapital;\n   icrc1Account: record {\n                   owner: principal;\n                   subaccount: opt blob;\n                 };\n   status: variant {\n             Active;\n             Dropout;\n           };\n   vol: Vol__1;\n };\ntype CompCapital__1 = \n record {\n   total: float64;\n   value0: nat;\n   value1: nat;\n };\ntype CompCapital = \n record {\n   total: float64;\n   value0: nat;\n   value1: nat;\n };\ntype Callee__1 = principal;\ntype CalleeStatus = \n record {\n   continuousFailure: nat;\n   failureCount: nat;\n   successCount: nat;\n };\ntype Callee = principal;\ntype CallType__1 = \n variant {\n   DIP20:\n    variant {\n      approve: record {\n                 principal;\n                 nat;\n               };\n      balanceOf: principal;\n      transfer: record {\n                  principal;\n                  nat;\n                };\n      transferFrom: record {\n                      principal;\n                      principal;\n                      nat;\n                    };\n    };\n   DRC20:\n    variant {\n      approve: record {\n                 Spender;\n                 Amount__2;\n                 opt Nonce__3;\n                 opt Sa__1;\n                 opt Data__2;\n               };\n      balanceOf: Address__1;\n      dropAccount: opt Sa__1;\n      executeTransfer:\n       record {\n         BlobFill;\n         ExecuteType;\n         opt To;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransfer:\n       record {\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transfer: record {\n                  To;\n                  Amount__2;\n                  opt Nonce__3;\n                  opt Sa__1;\n                  opt Data__2;\n                };\n      transferBatch:\n       record {\n         vec To;\n         vec Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      txnRecord: BlobFill;\n    };\n   ICRC1: variant {\n            icrc1_balance_of: Account;\n            icrc1_transfer: TransferArgs;\n          };\n   ICRC2:\n    variant {\n      icrc2_approve: ApproveArgs;\n      icrc2_transfer_from: TransferFromArgs;\n    };\n   ICTokens:\n    variant {\n      burn: record {\n              Amount__2;\n              opt Nonce__3;\n              opt Sa__1;\n              opt Data__2;\n            };\n      mint: record {\n              Address__1;\n              Amount__2;\n              opt Nonce__3;\n              opt Data__2;\n            };\n    };\n   Ledger:\n    variant {\n      account_balance: AccountBalanceArgs;\n      transfer: TransferArgs__1;\n    };\n   This:\n    variant {\n      dip20Send: record {\n                   blob;\n                   nat;\n                 };\n      dip20SendComp: record {\n                       blob;\n                       principal;\n                       nat;\n                     };\n    };\n   __block;\n   __skip;\n };\ntype CallType = \n variant {\n   DIP20:\n    variant {\n      approve: record {\n                 principal;\n                 nat;\n               };\n      balanceOf: principal;\n      transfer: record {\n                  principal;\n                  nat;\n                };\n      transferFrom: record {\n                      principal;\n                      principal;\n                      nat;\n                    };\n    };\n   DRC20:\n    variant {\n      approve: record {\n                 Spender;\n                 Amount__2;\n                 opt Nonce__3;\n                 opt Sa__1;\n                 opt Data__2;\n               };\n      balanceOf: Address__1;\n      dropAccount: opt Sa__1;\n      executeTransfer:\n       record {\n         BlobFill;\n         ExecuteType;\n         opt To;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransfer:\n       record {\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transfer: record {\n                  To;\n                  Amount__2;\n                  opt Nonce__3;\n                  opt Sa__1;\n                  opt Data__2;\n                };\n      transferBatch:\n       record {\n         vec To;\n         vec Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      txnRecord: BlobFill;\n    };\n   ICRC1: variant {\n            icrc1_balance_of: Account;\n            icrc1_transfer: TransferArgs;\n          };\n   ICRC2:\n    variant {\n      icrc2_approve: ApproveArgs;\n      icrc2_transfer_from: TransferFromArgs;\n    };\n   ICTokens:\n    variant {\n      burn: record {\n              Amount__2;\n              opt Nonce__3;\n              opt Sa__1;\n              opt Data__2;\n            };\n      mint: record {\n              Address__1;\n              Amount__2;\n              opt Nonce__3;\n              opt Data__2;\n            };\n    };\n   Ledger:\n    variant {\n      account_balance: AccountBalanceArgs;\n      transfer: TransferArgs__1;\n    };\n   This:\n    variant {\n      dip20Send: record {\n                   blob;\n                   nat;\n                 };\n      dip20SendComp: record {\n                       blob;\n                       principal;\n                       nat;\n                     };\n    };\n   __block;\n   __skip;\n };\ntype BlockIndex = nat64;\ntype BlobFill = \n variant {\n   AutoFill;\n   ManualFill: blob;\n };\ntype BalanceChange__1 = \n variant {\n   CreditRecord: nat;\n   DebitRecord: nat;\n   NoChange;\n };\ntype BalanceChange = \n variant {\n   CreditRecord: nat;\n   DebitRecord: nat;\n   NoChange;\n };\ntype BackupResponse = \n variant {\n   ambassadors: vec record {\n                      AccountId__2;\n                      AmbassadorData;\n                    };\n   clearingTxids: vec Txid__3;\n   competitors: vec record {\n                      nat;\n                      vec record {\n                            AccountId__2;\n                            CompResult;\n                          };\n                    };\n   drc205Data: DRC205Data;\n   icdex_dip20Balances: vec record {\n                              AccountId__2;\n                              record {\n                                principal;\n                                nat;\n                              };\n                            };\n   icdex_failedOrders: vec record {\n                             Txid__3;\n                             TradingOrder;\n                           };\n   icdex_klines2: vec record {\n                        KInterval;\n                        record {\n                          vec KBar;\n                          vec KBar;\n                        };\n                      };\n   icdex_makers: vec record {\n                       AccountId__2;\n                       record {\n                         nat;\n                         principal;\n                       };\n                     };\n   icdex_nonces: vec record {\n                       AccountId__2;\n                       Nonce__2;\n                     };\n   icdex_orderBook:\n    record {\n      ask: vec record {\n                 Txid__3;\n                 OrderPrice__1;\n               };\n      bid: vec record {\n                 Txid__3;\n                 OrderPrice__1;\n               };\n    };\n   icdex_orders: vec record {\n                       Txid__3;\n                       TradingOrder;\n                     };\n   icdex_pendingOrders: vec record {\n                              AccountId__2;\n                              vec Txid__3;\n                            };\n   icdex_vols: vec record {\n                     AccountId__2;\n                     Vol__1;\n                   };\n   ictcTaskCallbackEvents: vec record {\n                                 Ttid;\n                                 Time;\n                               };\n   otherData:\n    record {\n      activeRound: nat;\n      icdex_index: nat;\n      icdex_lastPrice: OrderPrice__1;\n      icdex_priceWeighted: PriceWeighted;\n      icdex_totalFee: FeeBalance;\n      icdex_totalVol: Vol__1;\n      taDescription: text;\n    };\n   rounds: vec record {\n                 nat;\n                 RoundItem;\n               };\n   sagaData: SagaData;\n   timeSortedTxids:\n    record {\n      vec record {\n            Txid__3;\n            Time;\n          };\n      vec record {\n            Txid__3;\n            Time;\n          };\n    };\n   traderReferrerTemps:\n    vec record {\n          AccountId__2;\n          record {\n            AccountId__2;\n            text;\n            Time;\n          };\n        };\n   traderReferrers: vec record {\n                          AccountId__2;\n                          AccountId__2;\n                        };\n };\ntype BackupRequest = \n variant {\n   ambassadors;\n   clearingTxids;\n   competitors;\n   drc205Data: variant {\n                 All;\n                 Base;\n               };\n   icdex_dip20Balances;\n   icdex_failedOrders;\n   icdex_klines2;\n   icdex_makers;\n   icdex_nonces;\n   icdex_orderBook;\n   icdex_orders;\n   icdex_pendingOrders;\n   icdex_vols;\n   ictcTaskCallbackEvents;\n   otherData;\n   rounds;\n   sagaData: variant {\n               All;\n               Base;\n             };\n   timeSortedTxids;\n   traderReferrerTemps;\n   traderReferrers;\n };\ntype Attempts = nat;\ntype ApproveError = \n variant {\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype ApproveArgs = \n record {\n   amount: nat;\n   created_at_time: opt nat64;\n   fee: opt nat;\n   from_subaccount: opt blob;\n   memo: opt blob;\n   spender: principal;\n };\ntype Amount__2 = nat;\ntype Amount__1 = nat;\ntype Amount = nat;\ntype AmbassadorData = \n record {\n   text;\n   nat;\n   Vol__1;\n };\ntype Address__2 = text;\ntype Address__1 = text;\ntype Address = text;\ntype Account__1 = \n record {\n   owner: principal;\n   subaccount: opt Subaccount__1;\n };\ntype AccountIdentifier = blob;\ntype AccountId__4 = blob;\ntype AccountId__3 = blob;\ntype AccountId__2 = blob;\ntype AccountId__1 = blob;\ntype AccountId = blob;\ntype AccountBalanceArgs = record {account: AccountIdentifier;};\ntype Account = \n record {\n   owner: principal;\n   subaccount: opt Subaccount;\n };\nservice : {\n  IDO_config: (IDOSetting) -> ();\n  IDO_getConfig: () -> (opt principal, IDOSetting, opt IDORequirement) query;\n  IDO_qualification: (opt Address) ->\n   (vec record {\n          Address;\n          Participant;\n        }) query;\n  IDO_removeWhitelist: (vec Address) -> ();\n  IDO_setFunder: (opt principal, opt IDORequirement) -> ();\n  IDO_setWhitelist: (vec record {\n                           Address;\n                           Amount__1;\n                         }) -> ();\n  IDO_updateQualification: (opt Sa) -> (opt Participant);\n  backup: (BackupRequest) -> (BackupResponse);\n  cancel: (Nonce, opt Sa) -> ();\n  cancelByTxid: (Txid__1, opt Sa) -> ();\n  changeOwner: (principal) -> (bool);\n  comp_deposit: (Amount__1, Amount__1, opt Sa) -> ();\n  comp_dropout: (opt Sa) -> (bool);\n  comp_fallback: (opt Sa) -> (Amount__1, Amount__1);\n  comp_getDepositAccount: (Address) ->\n   (record {\n      balance: record {\n                 Account__1;\n                 Address;\n               };\n      depositing: record {\n                    Account__1;\n                    Address;\n                  };\n    }) query;\n  comp_newRound: (text, text, Time, Time, variant {\n                                            token0;\n                                            token1;\n                                          }, nat, bool) -> (nat);\n  comp_register: (opt Sa) -> (bool);\n  comp_result: (opt nat, Address) -> (opt CompResult__1) query;\n  comp_results: (opt nat, ListPage, ListSize) ->\n   (record {\n      data: vec record {\n                  AccountId__4;\n                  CompResult__1;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  comp_round: (opt nat) -> (nat, opt RoundItem__1) query;\n  comp_settle: (nat) -> ();\n  comp_withdraw: (opt Sa) -> (Amount__1, Amount__1);\n  config: (DexConfig) -> (bool);\n  count: (opt Address) -> (nat) query;\n  drc205_canisterId: () -> (principal) query;\n  drc205_config: (Config) -> (bool);\n  drc205_dexInfo: () -> (DexInfo) query;\n  drc205_events: (opt Address__2) -> (vec TxnRecord__3) query;\n  drc205_getConfig: () -> (Setting) query;\n  drc205_pool: () -> (vec record {\n                            Txid__1;\n                            TxnRecord__3;\n                            nat;\n                          }) query;\n  drc205_txn: (Txid__5) -> (opt TxnRecord__3) query;\n  drc205_txn2: (Txid__5) -> (opt TxnRecord__3);\n  drc207: () -> (DRC207Support) query;\n  fallback: (Nonce, opt Sa) -> (bool);\n  fallbackByTxid: (Txid__1, opt Sa) -> (bool);\n  fee: () ->\n   (record {\n      maker: record {\n               buy: float64;\n               sell: float64;\n             };\n      taker: record {\n               buy: float64;\n               sell: float64;\n             };\n    }) query;\n  feeStatus: () -> (FeeStatus) query;\n  getConfig: () -> (DexSetting) query;\n  getOwner: () -> (principal) query;\n  getQuotes: (KInterval) -> (vec KBar) query;\n  getTxAccount: (Address) -> (Account__1, TxAccount, Nonce, Txid__1) query;\n  ictc_TM: () -> (text) query;\n  ictc_addAdmin: (principal) -> ();\n  ictc_appendTT: (opt blob, Toid__3, opt Ttid__2, principal, CallType__1,\n   vec Ttid__2) -> (Ttid__2);\n  ictc_blockTO: (Toid__3) -> (opt Toid__3);\n  ictc_clearLog: (opt int, bool) -> ();\n  ictc_clearTTPool: () -> ();\n  ictc_completeTO: (Toid__3, OrderStatus) -> (bool);\n  ictc_doneTO: (Toid__3, OrderStatus, bool) -> (bool);\n  ictc_doneTT: (Toid__3, Ttid__2, bool) -> (opt Ttid__2);\n  ictc_getAdmins: () -> (vec principal) query;\n  ictc_getCalleeStatus: (principal) -> (opt CalleeStatus) query;\n  ictc_getPool: () ->\n   (record {\n      toPool: record {\n                items: vec record {\n                             Toid__3;\n                             opt Order__1;\n                           };\n                total: nat;\n              };\n      ttPool: record {\n                items: vec record {\n                             Ttid__2;\n                             Task__2;\n                           };\n                total: nat;\n              };\n    }) query;\n  ictc_getTO: (Toid__3) -> (opt Order__1) query;\n  ictc_getTOCount: () -> (nat) query;\n  ictc_getTOPool: () -> (vec record {\n                               Toid__3;\n                               opt Order__1;\n                             }) query;\n  ictc_getTOs: (nat, nat) ->\n   (record {\n      data: vec record {\n                  Toid__3;\n                  Order__1;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_getTT: (Ttid__2) -> (opt TaskEvent) query;\n  ictc_getTTByTO: (Toid__3) -> (vec TaskEvent) query;\n  ictc_getTTErrors: (nat, nat) ->\n   (record {\n      data: vec record {\n                  nat;\n                  ErrorLog;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_getTTPool: () -> (vec record {\n                               Ttid__2;\n                               Task__2;\n                             }) query;\n  ictc_getTTs: (nat, nat) ->\n   (record {\n      data: vec record {\n                  Ttid__2;\n                  TaskEvent;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_redoTT: (Toid__3, Ttid__2) -> (opt Ttid__2);\n  ictc_removeAdmin: (principal) -> ();\n  ictc_runTO: (Toid__3) -> (opt OrderStatus);\n  ictc_runTT: () -> (bool);\n  info: () ->\n   (record {\n      decimals: nat8;\n      name: text;\n      owner: principal;\n      paused: bool;\n      setting: DexSetting;\n      token0: TokenInfo;\n      token1: TokenInfo;\n      version: text;\n    }) query;\n  init: () -> ();\n  latestFilled: () ->\n   (vec record {\n          Timestamp__4;\n          Txid__1;\n          OrderFilled__1;\n          OrderSide;\n        }) query;\n  level10: () -> (nat,\n   record {\n     ask: vec PriceResponse;\n     bid: vec PriceResponse;\n   }) query;\n  level100: () -> (nat,\n   record {\n     ask: vec PriceResponse;\n     bid: vec PriceResponse;\n   }) query;\n  liquidity: (opt Address) -> (Liquidity) query;\n  makerRebate: (Address) -> (float64, float64) query;\n  name: () -> (text) query;\n  orderExpirationDuration: () -> (int) query;\n  pending: (opt Address, opt ListPage, opt ListSize) -> (TrieList) query;\n  pendingAll: (opt ListPage, opt ListSize) -> (TrieList) query;\n  pendingCount: () -> (nat) query;\n  prepare: (Address) -> (TxAccount, Nonce) query;\n  recovery: (BackupResponse) -> (bool);\n  removeVipMaker: (Address) -> ();\n  setOrderFail: (text) -> (bool);\n  setPause: (bool, opt Time) -> (bool);\n  setUpgradeMode: (variant {\n                     All;\n                     Base;\n                   }) -> ();\n  setVipMaker: (Address, nat) -> ();\n  stats: () ->\n   (record {\n      change24h: float64;\n      price: float64;\n      totalVol: Vol;\n      vol24h: Vol;\n    }) query;\n  status: (Address, Nonce) -> (OrderStatusResponse) query;\n  statusByTxid: (Txid__1) -> (OrderStatusResponse) query;\n  sync: () -> ();\n  sysMode: () -> (record {\n                    mode: SysMode;\n                    openingTime: Time;\n                  }) query;\n  ta_ambassador: (Address) -> (bool, text, nat, Vol) query;\n  ta_description: () -> (text) query;\n  ta_getReferrer: (Address) -> (opt record {\n                                      Address;\n                                      bool;\n                                    }) query;\n  ta_setDescription: (text) -> ();\n  ta_setReferrer: (Address, opt text, opt Sa) -> (bool);\n  ta_stats: (opt text) -> (nat, nat, Vol) query;\n  timerStart: (nat) -> ();\n  timerStop: () -> ();\n  token0: () -> (TokenType, opt TokenStd) query;\n  token1: () -> (TokenType, opt TokenStd) query;\n  tpsStats: () -> (nat, float64, nat, nat, int, int) query;\n  trade: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa,\n   opt Data) -> (TradingResult);\n  tradeMKT: (DebitToken, Amount__1, opt Nonce, opt Sa, opt Data) ->\n   (TradingResult);\n  tradeMKT_b: (DebitToken, Amount__1, opt nat, opt Nonce, opt Sa, opt Data,\n   opt record {\n         broker: principal;\n         rate: float64;\n       }) -> (TradingResult);\n  trade_b: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa, opt Data,\n   opt record {\n         broker: principal;\n         rate: float64;\n       }) -> (TradingResult);\n  userCount: () -> (nat) query;\n  version: () -> (text) query;\n  wallet_receive: () -> ();\n  withdraw_cycles: (nat) -> ();\n}\n",
                    "javascript": "export const idlFactory = ({ IDL }) => {\n  const List = IDL.Rec();\n  const List_1 = IDL.Rec();\n  const Amount__1 = IDL.Nat;\n  const Time = IDL.Int;\n  const IDOSetting = IDL.Record({\n    'IDOSupplies' : IDL.Vec(\n      IDL.Record({ 'supply' : Amount__1, 'price' : IDL.Float64 })\n    ),\n    'IDOWhitelistEnabled' : IDL.Bool,\n    'IDOOpeningTime' : Time,\n    'IDOTotalSupply' : IDL.Record({\n      'IDOSupply' : Amount__1,\n      'percentageOfTotal' : IDL.Float64,\n    }),\n    'IDOEnabled' : IDL.Bool,\n    'IDOLimitPerAccount' : Amount__1,\n    'IDOClosingTime' : Time,\n  });\n  const IDORequirement = IDL.Record({\n    'threshold' : IDL.Float64,\n    'pairs' : IDL.Vec(\n      IDL.Record({ 'pair' : IDL.Principal, 'token1ToUsdRatio' : IDL.Float64 })\n    ),\n  });\n  const Address = IDL.Text;\n  const Participant = IDL.Record({\n    'updatedTime' : Time,\n    'used' : Amount__1,\n    'limit' : Amount__1,\n    'historyVol' : IDL.Float64,\n  });\n  const Sa = IDL.Vec(IDL.Nat8);\n  const BackupRequest = IDL.Variant({\n    'timeSortedTxids' : IDL.Null,\n    'icdex_failedOrders' : IDL.Null,\n    'icdex_makers' : IDL.Null,\n    'drc205Data' : IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null }),\n    'icdex_vols' : IDL.Null,\n    'icdex_pendingOrders' : IDL.Null,\n    'ictcTaskCallbackEvents' : IDL.Null,\n    'otherData' : IDL.Null,\n    'icdex_dip20Balances' : IDL.Null,\n    'clearingTxids' : IDL.Null,\n    'icdex_nonces' : IDL.Null,\n    'competitors' : IDL.Null,\n    'icdex_klines2' : IDL.Null,\n    'sagaData' : IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null }),\n    'icdex_orders' : IDL.Null,\n    'icdex_orderBook' : IDL.Null,\n    'rounds' : IDL.Null,\n    'traderReferrers' : IDL.Null,\n    'traderReferrerTemps' : IDL.Null,\n    'ambassadors' : IDL.Null,\n  });\n  const Txid__3 = IDL.Vec(IDL.Nat8);\n  const TradingStatus = IDL.Variant({\n    'Todo' : IDL.Null,\n    'Closed' : IDL.Null,\n    'Cancelled' : IDL.Null,\n    'Pending' : IDL.Null,\n  });\n  const Toid = IDL.Nat;\n  const Txid = IDL.Vec(IDL.Nat8);\n  const OrderType__1 = IDL.Variant({\n    'FAK' : IDL.Null,\n    'FOK' : IDL.Null,\n    'LMT' : IDL.Null,\n    'MKT' : IDL.Null,\n  });\n  const BalanceChange = IDL.Variant({\n    'DebitRecord' : IDL.Nat,\n    'CreditRecord' : IDL.Nat,\n    'NoChange' : IDL.Null,\n  });\n  const OrderFilled = IDL.Record({\n    'time' : Time,\n    'token0Value' : BalanceChange,\n    'counterparty' : Txid,\n    'token1Value' : BalanceChange,\n  });\n  const AccountId__1 = IDL.Vec(IDL.Nat8);\n  const Quantity = IDL.Nat;\n  const Amount = IDL.Nat;\n  const Price = IDL.Nat;\n  const OrderPrice__1 = IDL.Record({\n    'quantity' : IDL.Variant({\n      'Buy' : IDL.Tuple(Quantity, Amount),\n      'Sell' : Quantity,\n    }),\n    'price' : Price,\n  });\n  const TradingOrder = IDL.Record({\n    'fee' : IDL.Record({ 'fee0' : IDL.Int, 'fee1' : IDL.Int }),\n    'gas' : IDL.Record({ 'gas0' : IDL.Nat, 'gas1' : IDL.Nat }),\n    'status' : TradingStatus,\n    'toids' : IDL.Vec(Toid),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'txid' : Txid,\n    'icrc1Account' : IDL.Opt(\n      IDL.Record({\n        'owner' : IDL.Principal,\n        'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      })\n    ),\n    'orderType' : OrderType__1,\n    'filled' : IDL.Vec(OrderFilled),\n    'expiration' : Time,\n    'nonce' : IDL.Nat,\n    'account' : AccountId__1,\n    'remaining' : OrderPrice__1,\n    'index' : IDL.Nat,\n    'orderPrice' : OrderPrice__1,\n    'refund' : IDL.Tuple(IDL.Nat, IDL.Nat, IDL.Nat),\n  });\n  const AccountId__2 = IDL.Vec(IDL.Nat8);\n  const Setting = IDL.Record({\n    'MAX_STORAGE_TRIES' : IDL.Nat,\n    'EN_DEBUG' : IDL.Bool,\n    'MAX_CACHE_NUMBER_PER' : IDL.Nat,\n    'MAX_CACHE_TIME' : IDL.Nat,\n  });\n  const Status = IDL.Variant({\n    'Failed' : IDL.Null,\n    'Cancelled' : IDL.Null,\n    'PartiallyCompletedAndCancelled' : IDL.Null,\n    'Completed' : IDL.Null,\n    'Pending' : IDL.Null,\n  });\n  const Shares = IDL.Nat;\n  const ShareChange = IDL.Variant({\n    'Burn' : Shares,\n    'Mint' : Shares,\n    'NoChange' : IDL.Null,\n  });\n  const BalanceChange__1 = IDL.Variant({\n    'DebitRecord' : IDL.Nat,\n    'CreditRecord' : IDL.Nat,\n    'NoChange' : IDL.Null,\n  });\n  const Data__1 = IDL.Vec(IDL.Nat8);\n  const Txid__2 = IDL.Vec(IDL.Nat8);\n  const TokenType__1 = IDL.Variant({\n    'Icp' : IDL.Null,\n    'Token' : IDL.Principal,\n    'Cycles' : IDL.Null,\n  });\n  const Nonce__1 = IDL.Nat;\n  const OperationType = IDL.Variant({\n    'AddLiquidity' : IDL.Null,\n    'Swap' : IDL.Null,\n    'Claim' : IDL.Null,\n    'RemoveLiquidity' : IDL.Null,\n  });\n  const AccountId = IDL.Vec(IDL.Nat8);\n  const CyclesWallet = IDL.Principal;\n  const TxnRecord__1 = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const DRC205Data = IDL.Record({\n    'accountLastTxns' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Vec(Txid__3), IDL.Vec(Txid__3)))\n    ),\n    'setting' : Setting,\n    'globalLastTxns' : IDL.Tuple(IDL.Vec(Txid__3), IDL.Vec(Txid__3)),\n    'storagePool' : IDL.Vec(IDL.Tuple(Txid__3, TxnRecord__1, IDL.Nat)),\n    'globalTxns' : IDL.Tuple(\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n    ),\n    'txnRecords' : IDL.Vec(IDL.Tuple(Txid__3, TxnRecord__1)),\n  });\n  const Vol__1 = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const Ttid = IDL.Nat;\n  const FeeBalance = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const Timestamp__1 = IDL.Nat;\n  const PriceWeighted = IDL.Record({\n    'updateTime' : Timestamp__1,\n    'token1TimeWeighted' : IDL.Nat,\n    'token0TimeWeighted' : IDL.Nat,\n  });\n  const Nonce__2 = IDL.Nat;\n  const CompCapital = IDL.Record({\n    'total' : IDL.Float64,\n    'value0' : IDL.Nat,\n    'value1' : IDL.Nat,\n  });\n  const CompResult = IDL.Record({\n    'vol' : Vol__1,\n    'status' : IDL.Variant({ 'Active' : IDL.Null, 'Dropout' : IDL.Null }),\n    'icrc1Account' : IDL.Record({\n      'owner' : IDL.Principal,\n      'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n    'capital' : CompCapital,\n    'assetValue' : IDL.Opt(CompCapital),\n  });\n  const KInterval = IDL.Nat;\n  const Vol__2 = IDL.Record({ 'value0' : IDL.Nat, 'value1' : IDL.Nat });\n  const Timestamp = IDL.Nat;\n  const KBar = IDL.Record({\n    'kid' : IDL.Nat,\n    'low' : IDL.Nat,\n    'vol' : Vol__2,\n    'high' : IDL.Nat,\n    'close' : IDL.Nat,\n    'open' : IDL.Nat,\n    'updatedTs' : Timestamp,\n  });\n  const Toid__2 = IDL.Nat;\n  const OrderStatus = IDL.Variant({\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Recovered' : IDL.Null,\n    'Compensating' : IDL.Null,\n    'Blocking' : IDL.Null,\n  });\n  const Status__3 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Ttid__1 = IDL.Nat;\n  const Toid__1 = IDL.Nat;\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const Timestamp__2 = IDL.Nat64;\n  const TransferArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(Subaccount),\n    'created_at_time' : IDL.Opt(Timestamp__2),\n    'amount' : IDL.Nat,\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Principal,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n  });\n  const To = IDL.Text;\n  const Amount__2 = IDL.Nat;\n  const Nonce__3 = IDL.Nat;\n  const Sa__1 = IDL.Vec(IDL.Nat8);\n  const Data__2 = IDL.Vec(IDL.Nat8);\n  const From = IDL.Text;\n  const Spender = IDL.Text;\n  const Address__1 = IDL.Text;\n  const BlobFill = IDL.Variant({\n    'AutoFill' : IDL.Null,\n    'ManualFill' : IDL.Vec(IDL.Nat8),\n  });\n  const Timeout = IDL.Nat32;\n  const Decider = IDL.Text;\n  const ExecuteType = IDL.Variant({\n    'fallback' : IDL.Null,\n    'send' : IDL.Nat,\n    'sendAll' : IDL.Null,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const ICP = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Memo = IDL.Nat64;\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Timestamp__3 = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const TransferArgs__1 = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : ICP,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Timestamp__3),\n    'amount' : ICP,\n  });\n  const CallType = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : Account,\n      'icrc1_transfer' : TransferArgs,\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : ApproveArgs,\n      'icrc2_transfer_from' : TransferFromArgs,\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Principal, IDL.Nat),\n      'dip20Send' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Nat),\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : IDL.Tuple(IDL.Principal, IDL.Principal, IDL.Nat),\n      'approve' : IDL.Tuple(IDL.Principal, IDL.Nat),\n      'balanceOf' : IDL.Principal,\n      'transfer' : IDL.Tuple(IDL.Principal, IDL.Nat),\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Tuple(\n        IDL.Vec(To),\n        IDL.Vec(Amount__2),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'approve' : IDL.Tuple(\n        Spender,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'balanceOf' : Address__1,\n      'txnRecord' : BlobFill,\n      'lockTransfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'dropAccount' : IDL.Opt(Sa__1),\n      'executeTransfer' : IDL.Tuple(\n        BlobFill,\n        ExecuteType,\n        IDL.Opt(To),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'lockTransferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : AccountBalanceArgs,\n      'transfer' : TransferArgs__1,\n    }),\n    'ICTokens' : IDL.Variant({\n      'burn' : IDL.Tuple(\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'mint' : IDL.Tuple(\n        Address__1,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    '__skip' : IDL.Null,\n  });\n  const Attempts = IDL.Nat;\n  const Callee__1 = IDL.Principal;\n  const Compensation = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Task__2 = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Ttid__2 = IDL.Nat;\n  const SagaTask = IDL.Record({\n    'status' : Status__3,\n    'comp' : IDL.Opt(Compensation),\n    'task' : Task__2,\n    'ttid' : Ttid__2,\n  });\n  List_1.fill(IDL.Opt(IDL.Tuple(SagaTask, List_1)));\n  const Tcid = IDL.Nat;\n  const CompTask = IDL.Record({\n    'status' : Status__3,\n    'comp' : Compensation,\n    'tcid' : Tcid,\n    'forTtid' : Ttid__2,\n  });\n  List.fill(IDL.Opt(IDL.Tuple(CompTask, List)));\n  const CompStrategy = IDL.Variant({\n    'Backward' : IDL.Null,\n    'Forward' : IDL.Null,\n  });\n  const Order = IDL.Record({\n    'status' : OrderStatus,\n    'tasks' : List_1,\n    'callbackStatus' : IDL.Opt(Status__3),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Text,\n    'comps' : List,\n    'time' : Time,\n    'compStrategy' : CompStrategy,\n    'allowPushing' : IDL.Variant({ 'Opening' : IDL.Null, 'Closed' : IDL.Null }),\n  });\n  const Task__1 = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Callee = IDL.Principal;\n  const CalleeStatus = IDL.Record({\n    'continuousFailure' : IDL.Nat,\n    'successCount' : IDL.Nat,\n    'failureCount' : IDL.Nat,\n  });\n  const Status__1 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Duration = IDL.Nat64;\n  const TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Null,\n    'TooOld' : IDL.Record({ 'allowed_window_nanos' : Duration }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : IDL.Nat }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const TxReceipt = IDL.Variant({\n    'Ok' : IDL.Nat,\n    'Err' : IDL.Variant({\n      'InsufficientAllowance' : IDL.Null,\n      'InsufficientBalance' : IDL.Null,\n      'ErrorOperationStyle' : IDL.Null,\n      'Unauthorized' : IDL.Null,\n      'LedgerTrap' : IDL.Null,\n      'ErrorTo' : IDL.Null,\n      'Other' : IDL.Text,\n      'BlockUsed' : IDL.Null,\n      'AmountTooSmall' : IDL.Null,\n    }),\n  });\n  const Txid__4 = IDL.Vec(IDL.Nat8);\n  const TxnResult = IDL.Variant({\n    'ok' : Txid__4,\n    'err' : IDL.Record({\n      'code' : IDL.Variant({\n        'NonceError' : IDL.Null,\n        'InsufficientGas' : IDL.Null,\n        'InsufficientAllowance' : IDL.Null,\n        'UndefinedError' : IDL.Null,\n        'InsufficientBalance' : IDL.Null,\n        'NoLockedTransfer' : IDL.Null,\n        'DuplicateExecutedTransfer' : IDL.Null,\n        'LockedTransferExpired' : IDL.Null,\n      }),\n      'message' : IDL.Text,\n    }),\n  });\n  const Gas = IDL.Variant({\n    'token' : IDL.Nat,\n    'cycles' : IDL.Nat,\n    'noFee' : IDL.Null,\n  });\n  const AccountId__3 = IDL.Vec(IDL.Nat8);\n  const Time__1 = IDL.Int;\n  const Operation = IDL.Variant({\n    'approve' : IDL.Record({ 'allowance' : IDL.Nat }),\n    'lockTransfer' : IDL.Record({\n      'locked' : IDL.Nat,\n      'expiration' : Time__1,\n      'decider' : AccountId__3,\n    }),\n    'transfer' : IDL.Record({\n      'action' : IDL.Variant({\n        'burn' : IDL.Null,\n        'mint' : IDL.Null,\n        'send' : IDL.Null,\n      }),\n    }),\n    'executeTransfer' : IDL.Record({\n      'fallback' : IDL.Nat,\n      'lockedTxid' : Txid__4,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'to' : AccountId__3,\n    'value' : IDL.Nat,\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from' : AccountId__3,\n    'operation' : Operation,\n  });\n  const TxnRecord__2 = IDL.Record({\n    'gas' : Gas,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'transaction' : Transaction,\n    'txid' : Txid__4,\n    'nonce' : IDL.Nat,\n    'timestamp' : Time__1,\n    'caller' : AccountId__3,\n    'index' : IDL.Nat,\n  });\n  const TransferError__1 = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const BlockIndex = IDL.Nat64;\n  const TransferError__2 = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : ICP }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : ICP }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError__2,\n  });\n  const Receipt = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : IDL.Nat,\n      'icrc1_transfer' : IDL.Variant({ 'Ok' : IDL.Nat, 'Err' : TransferError }),\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : IDL.Variant({ 'Ok' : IDL.Nat, 'Err' : ApproveError }),\n      'icrc2_transfer_from' : IDL.Variant({\n        'Ok' : IDL.Nat,\n        'Err' : TransferFromError,\n      }),\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Null,\n      'dip20Send' : IDL.Null,\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : TxReceipt,\n      'approve' : TxReceipt,\n      'balanceOf' : IDL.Nat,\n      'transfer' : TxReceipt,\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Vec(TxnResult),\n      'transferFrom' : TxnResult,\n      'approve' : TxnResult,\n      'balanceOf' : Amount__2,\n      'txnRecord' : IDL.Opt(TxnRecord__2),\n      'lockTransfer' : TxnResult,\n      'transfer' : TxnResult,\n      'dropAccount' : IDL.Null,\n      'executeTransfer' : TxnResult,\n      'lockTransferFrom' : TxnResult,\n    }),\n    'ICRC1New' : IDL.Variant({\n      'icrc1_balance_of' : IDL.Nat,\n      'icrc1_transfer' : IDL.Variant({\n        'Ok' : IDL.Nat,\n        'Err' : TransferError__1,\n      }),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : ICP,\n      'transfer' : TransferResult,\n    }),\n    'ICTokens' : IDL.Variant({ 'burn' : TxnResult, 'mint' : TxnResult }),\n    '__skip' : IDL.Null,\n  });\n  const ErrorCode = IDL.Variant({\n    'canister_error' : IDL.Null,\n    'call_error' : IDL.Record({ 'err_code' : IDL.Nat32 }),\n    'system_transient' : IDL.Null,\n    'future' : IDL.Nat32,\n    'canister_reject' : IDL.Null,\n    'destination_invalid' : IDL.Null,\n    'system_fatal' : IDL.Null,\n  });\n  const Err = IDL.Record({ 'code' : ErrorCode, 'message' : IDL.Text });\n  const TaskResult = IDL.Tuple(Status__1, IDL.Opt(Receipt), IDL.Opt(Err));\n  const ErrorLog = IDL.Record({\n    'result' : IDL.Opt(TaskResult),\n    'time' : Time,\n    'ttid' : Ttid__1,\n    'callee' : IDL.Opt(Callee__1),\n  });\n  const Status__2 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Task = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const TaskEvent = IDL.Record({\n    'result' : TaskResult,\n    'callbackStatus' : IDL.Opt(Status__2),\n    'task' : Task,\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'ttid' : Ttid__1,\n    'attempts' : Attempts,\n    'txHash' : IDL.Vec(IDL.Nat8),\n  });\n  const SagaData = IDL.Record({\n    'orders' : IDL.Vec(IDL.Tuple(Toid__2, Order)),\n    'autoClearTimeout' : IDL.Int,\n    'aliveOrders' : IDL.Vec(IDL.Tuple(Toid__2, Time)),\n    'index' : IDL.Nat,\n    'actuator' : IDL.Record({\n      'tasks' : IDL.Tuple(\n        IDL.Vec(IDL.Tuple(Ttid, Task__1)),\n        IDL.Vec(IDL.Tuple(Ttid, Task__1)),\n      ),\n      'callees' : IDL.Vec(IDL.Tuple(Callee, CalleeStatus)),\n      'errorLogs' : IDL.Vec(IDL.Tuple(IDL.Nat, ErrorLog)),\n      'taskLogs' : IDL.Vec(IDL.Tuple(Ttid, TaskEvent)),\n      'index' : IDL.Nat,\n      'firstErrIndex' : IDL.Nat,\n      'errIndex' : IDL.Nat,\n      'firstIndex' : IDL.Nat,\n    }),\n    'taskEvents' : IDL.Vec(IDL.Tuple(Toid__2, IDL.Vec(Ttid))),\n    'firstIndex' : IDL.Nat,\n  });\n  const RoundItem = IDL.Record({\n    'end' : Time,\n    'content' : IDL.Text,\n    'isSettled' : IDL.Bool,\n    'name' : IDL.Text,\n    'minCapital' : IDL.Nat,\n    'start' : Time,\n    'closedPrice' : IDL.Opt(IDL.Float64),\n    'quoteToken' : IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n  });\n  const AmbassadorData = IDL.Tuple(IDL.Text, IDL.Nat, Vol__1);\n  const BackupResponse = IDL.Variant({\n    'timeSortedTxids' : IDL.Tuple(\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n    ),\n    'icdex_failedOrders' : IDL.Vec(IDL.Tuple(Txid__3, TradingOrder)),\n    'icdex_makers' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Nat, IDL.Principal))\n    ),\n    'drc205Data' : DRC205Data,\n    'icdex_vols' : IDL.Vec(IDL.Tuple(AccountId__2, Vol__1)),\n    'icdex_pendingOrders' : IDL.Vec(IDL.Tuple(AccountId__2, IDL.Vec(Txid__3))),\n    'ictcTaskCallbackEvents' : IDL.Vec(IDL.Tuple(Ttid, Time)),\n    'otherData' : IDL.Record({\n      'icdex_totalFee' : FeeBalance,\n      'icdex_totalVol' : Vol__1,\n      'activeRound' : IDL.Nat,\n      'icdex_index' : IDL.Nat,\n      'icdex_lastPrice' : OrderPrice__1,\n      'icdex_priceWeighted' : PriceWeighted,\n      'taDescription' : IDL.Text,\n    }),\n    'icdex_dip20Balances' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Principal, IDL.Nat))\n    ),\n    'clearingTxids' : IDL.Vec(Txid__3),\n    'icdex_nonces' : IDL.Vec(IDL.Tuple(AccountId__2, Nonce__2)),\n    'competitors' : IDL.Vec(\n      IDL.Tuple(IDL.Nat, IDL.Vec(IDL.Tuple(AccountId__2, CompResult)))\n    ),\n    'icdex_klines2' : IDL.Vec(\n      IDL.Tuple(KInterval, IDL.Tuple(IDL.Vec(KBar), IDL.Vec(KBar)))\n    ),\n    'sagaData' : SagaData,\n    'icdex_orders' : IDL.Vec(IDL.Tuple(Txid__3, TradingOrder)),\n    'icdex_orderBook' : IDL.Record({\n      'ask' : IDL.Vec(IDL.Tuple(Txid__3, OrderPrice__1)),\n      'bid' : IDL.Vec(IDL.Tuple(Txid__3, OrderPrice__1)),\n    }),\n    'rounds' : IDL.Vec(IDL.Tuple(IDL.Nat, RoundItem)),\n    'traderReferrers' : IDL.Vec(IDL.Tuple(AccountId__2, AccountId__2)),\n    'traderReferrerTemps' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(AccountId__2, IDL.Text, Time))\n    ),\n    'ambassadors' : IDL.Vec(IDL.Tuple(AccountId__2, AmbassadorData)),\n  });\n  const Nonce = IDL.Nat;\n  const Txid__1 = IDL.Vec(IDL.Nat8);\n  const Subaccount__1 = IDL.Vec(IDL.Nat8);\n  const Account__1 = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount__1),\n  });\n  const Vol = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const CompCapital__1 = IDL.Record({\n    'total' : IDL.Float64,\n    'value0' : IDL.Nat,\n    'value1' : IDL.Nat,\n  });\n  const CompResult__1 = IDL.Record({\n    'vol' : Vol,\n    'status' : IDL.Variant({ 'Active' : IDL.Null, 'Dropout' : IDL.Null }),\n    'icrc1Account' : Account__1,\n    'capital' : CompCapital__1,\n    'assetValue' : IDL.Opt(CompCapital__1),\n  });\n  const ListPage = IDL.Nat;\n  const ListSize = IDL.Nat;\n  const AccountId__4 = IDL.Vec(IDL.Nat8);\n  const RoundItem__1 = IDL.Record({\n    'end' : Time,\n    'content' : IDL.Text,\n    'isSettled' : IDL.Bool,\n    'name' : IDL.Text,\n    'minCapital' : IDL.Nat,\n    'start' : Time,\n    'closedPrice' : IDL.Opt(IDL.Float64),\n    'quoteToken' : IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n  });\n  const IcpE8s = IDL.Nat;\n  const DexConfig = IDL.Record({\n    'MAX_TPS' : IDL.Opt(IDL.Nat),\n    'ICTC_RUN_INTERVAL' : IDL.Opt(IDL.Nat),\n    'MAKER_BONUS_RATE' : IDL.Opt(IDL.Nat),\n    'MAX_PENDINGS' : IDL.Opt(IDL.Nat),\n    'ORDER_EXPIRATION_DURATION' : IDL.Opt(IDL.Int),\n    'TRADING_FEE' : IDL.Opt(IDL.Nat),\n    'UNIT_SIZE' : IDL.Opt(IDL.Nat),\n    'STORAGE_INTERVAL' : IDL.Opt(IDL.Nat),\n    'ICP_FEE' : IDL.Opt(IcpE8s),\n  });\n  const Config = IDL.Record({\n    'MAX_STORAGE_TRIES' : IDL.Opt(IDL.Nat),\n    'EN_DEBUG' : IDL.Opt(IDL.Bool),\n    'MAX_CACHE_NUMBER_PER' : IDL.Opt(IDL.Nat),\n    'MAX_CACHE_TIME' : IDL.Opt(IDL.Nat),\n  });\n  const TokenType = IDL.Variant({\n    'Icp' : IDL.Null,\n    'Token' : IDL.Principal,\n    'Cycles' : IDL.Null,\n  });\n  const TokenStd__1 = IDL.Variant({\n    'dft' : IDL.Null,\n    'ext' : IDL.Null,\n    'icp' : IDL.Null,\n    'other' : IDL.Text,\n    'cycles' : IDL.Null,\n    'ledger' : IDL.Null,\n    'icrc1' : IDL.Null,\n    'dip20' : IDL.Null,\n    'drc20' : IDL.Null,\n  });\n  const DexInfo = IDL.Record({\n    'feeRate' : IDL.Float64,\n    'mmType' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'token0' : IDL.Tuple(TokenType, TokenStd__1),\n    'token1' : IDL.Tuple(TokenType, TokenStd__1),\n    'pairName' : IDL.Text,\n    'dexName' : IDL.Text,\n    'canisterId' : IDL.Principal,\n  });\n  const Address__2 = IDL.Text;\n  const TxnRecord__3 = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const Txid__5 = IDL.Vec(IDL.Nat8);\n  const DRC207Support = IDL.Record({\n    'timer' : IDL.Record({\n      'interval_seconds' : IDL.Opt(IDL.Nat),\n      'enable' : IDL.Bool,\n    }),\n    'monitorable_by_self' : IDL.Bool,\n    'monitorable_by_blackhole' : IDL.Record({\n      'canister_id' : IDL.Opt(IDL.Principal),\n      'allowed' : IDL.Bool,\n    }),\n    'cycles_receivable' : IDL.Bool,\n  });\n  const FeeStatus = IDL.Record({\n    'feeRate' : IDL.Float64,\n    'feeBalance' : FeeBalance,\n    'totalFee' : FeeBalance,\n  });\n  const DexSetting = IDL.Record({\n    'MAX_TPS' : IDL.Nat,\n    'ICTC_RUN_INTERVAL' : IDL.Nat,\n    'MAKER_BONUS_RATE' : IDL.Nat,\n    'MAX_PENDINGS' : IDL.Nat,\n    'TRADING_FEE' : IDL.Nat,\n    'UNIT_SIZE' : IDL.Nat,\n    'STORAGE_INTERVAL' : IDL.Nat,\n    'ICP_FEE' : IcpE8s,\n  });\n  const TxAccount = IDL.Text;\n  const Toid__3 = IDL.Nat;\n  const CallType__1 = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : Account,\n      'icrc1_transfer' : TransferArgs,\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : ApproveArgs,\n      'icrc2_transfer_from' : TransferFromArgs,\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Principal, IDL.Nat),\n      'dip20Send' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Nat),\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : IDL.Tuple(IDL.Principal, IDL.Principal, IDL.Nat),\n      'approve' : IDL.Tuple(IDL.Principal, IDL.Nat),\n      'balanceOf' : IDL.Principal,\n      'transfer' : IDL.Tuple(IDL.Principal, IDL.Nat),\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Tuple(\n        IDL.Vec(To),\n        IDL.Vec(Amount__2),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'approve' : IDL.Tuple(\n        Spender,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'balanceOf' : Address__1,\n      'txnRecord' : BlobFill,\n      'lockTransfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'dropAccount' : IDL.Opt(Sa__1),\n      'executeTransfer' : IDL.Tuple(\n        BlobFill,\n        ExecuteType,\n        IDL.Opt(To),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'lockTransferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : AccountBalanceArgs,\n      'transfer' : TransferArgs__1,\n    }),\n    'ICTokens' : IDL.Variant({\n      'burn' : IDL.Tuple(\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'mint' : IDL.Tuple(\n        Address__1,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    '__skip' : IDL.Null,\n  });\n  const Order__1 = IDL.Record({\n    'status' : OrderStatus,\n    'tasks' : List_1,\n    'callbackStatus' : IDL.Opt(Status__3),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Text,\n    'comps' : List,\n    'time' : Time,\n    'compStrategy' : CompStrategy,\n    'allowPushing' : IDL.Variant({ 'Opening' : IDL.Null, 'Closed' : IDL.Null }),\n  });\n  const TokenSymbol = IDL.Text;\n  const TokenStd = IDL.Variant({\n    'dft' : IDL.Null,\n    'ext' : IDL.Null,\n    'icp' : IDL.Null,\n    'other' : IDL.Text,\n    'cycles' : IDL.Null,\n    'ledger' : IDL.Null,\n    'icrc1' : IDL.Null,\n    'dip20' : IDL.Null,\n    'drc20' : IDL.Null,\n  });\n  const TokenInfo = IDL.Tuple(IDL.Principal, TokenSymbol, TokenStd);\n  const Timestamp__4 = IDL.Nat;\n  const OrderFilled__1 = IDL.Record({\n    'time' : Time,\n    'token0Value' : BalanceChange,\n    'counterparty' : Txid,\n    'token1Value' : BalanceChange,\n  });\n  const OrderSide = IDL.Variant({ 'Buy' : IDL.Null, 'Sell' : IDL.Null });\n  const PriceResponse = IDL.Record({ 'quantity' : IDL.Nat, 'price' : IDL.Nat });\n  const Liquidity = IDL.Record({\n    'vol' : Vol__1,\n    'shares' : Amount,\n    'shareWeighted' : IDL.Record({\n      'updateTime' : Timestamp__1,\n      'shareTimeWeighted' : IDL.Nat,\n    }),\n    'unitValue' : IDL.Tuple(Amount, Amount),\n    'value0' : Amount,\n    'value1' : Amount,\n    'priceWeighted' : PriceWeighted,\n    'swapCount' : IDL.Nat64,\n  });\n  const TradingOrder__1 = IDL.Record({\n    'fee' : IDL.Record({ 'fee0' : IDL.Int, 'fee1' : IDL.Int }),\n    'gas' : IDL.Record({ 'gas0' : IDL.Nat, 'gas1' : IDL.Nat }),\n    'status' : TradingStatus,\n    'toids' : IDL.Vec(Toid),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'txid' : Txid,\n    'icrc1Account' : IDL.Opt(\n      IDL.Record({\n        'owner' : IDL.Principal,\n        'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      })\n    ),\n    'orderType' : OrderType__1,\n    'filled' : IDL.Vec(OrderFilled),\n    'expiration' : Time,\n    'nonce' : IDL.Nat,\n    'account' : AccountId__1,\n    'remaining' : OrderPrice__1,\n    'index' : IDL.Nat,\n    'orderPrice' : OrderPrice__1,\n    'refund' : IDL.Tuple(IDL.Nat, IDL.Nat, IDL.Nat),\n  });\n  const TrieList = IDL.Record({\n    'total' : IDL.Nat,\n    'data' : IDL.Vec(IDL.Tuple(Txid__1, TradingOrder__1)),\n    'totalPage' : IDL.Nat,\n  });\n  const TxnRecord = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const OrderStatusResponse = IDL.Variant({\n    'Failed' : TradingOrder,\n    'None' : IDL.Null,\n    'Completed' : TxnRecord,\n    'Pending' : TradingOrder,\n  });\n  const SysMode = IDL.Variant({\n    'DisabledTrading' : IDL.Null,\n    'ReadOnly' : IDL.Null,\n    'ClosingOnly' : IDL.Null,\n    'GeneralTrading' : IDL.Null,\n  });\n  const OrderPrice = IDL.Record({\n    'quantity' : IDL.Variant({\n      'Buy' : IDL.Tuple(Quantity, Amount),\n      'Sell' : Quantity,\n    }),\n    'price' : Price,\n  });\n  const OrderType = IDL.Variant({\n    'FAK' : IDL.Null,\n    'FOK' : IDL.Null,\n    'LMT' : IDL.Null,\n    'MKT' : IDL.Null,\n  });\n  const PeriodNs = IDL.Int;\n  const Data = IDL.Vec(IDL.Nat8);\n  const TradingResult = IDL.Variant({\n    'ok' : IDL.Record({\n      'status' : TradingStatus,\n      'txid' : Txid,\n      'filled' : IDL.Vec(OrderFilled),\n    }),\n    'err' : IDL.Record({\n      'code' : IDL.Variant({\n        'NonceError' : IDL.Null,\n        'InvalidAmount' : IDL.Null,\n        'UndefinedError' : IDL.Null,\n        'UnacceptableVolatility' : IDL.Null,\n        'TransactionBlocking' : IDL.Null,\n        'InsufficientBalance' : IDL.Null,\n        'TransferException' : IDL.Null,\n      }),\n      'message' : IDL.Text,\n    }),\n  });\n  const DebitToken = IDL.Principal;\n  return IDL.Service({\n    'IDO_config' : IDL.Func([IDOSetting], [], []),\n    'IDO_getConfig' : IDL.Func(\n        [],\n        [IDL.Opt(IDL.Principal), IDOSetting, IDL.Opt(IDORequirement)],\n        ['query'],\n      ),\n    'IDO_qualification' : IDL.Func(\n        [IDL.Opt(Address)],\n        [IDL.Vec(IDL.Tuple(Address, Participant))],\n        ['query'],\n      ),\n    'IDO_removeWhitelist' : IDL.Func([IDL.Vec(Address)], [], []),\n    'IDO_setFunder' : IDL.Func(\n        [IDL.Opt(IDL.Principal), IDL.Opt(IDORequirement)],\n        [],\n        [],\n      ),\n    'IDO_setWhitelist' : IDL.Func(\n        [IDL.Vec(IDL.Tuple(Address, Amount__1))],\n        [],\n        [],\n      ),\n    'IDO_updateQualification' : IDL.Func(\n        [IDL.Opt(Sa)],\n        [IDL.Opt(Participant)],\n        [],\n      ),\n    'backup' : IDL.Func([BackupRequest], [BackupResponse], []),\n    'cancel' : IDL.Func([Nonce, IDL.Opt(Sa)], [], []),\n    'cancelByTxid' : IDL.Func([Txid__1, IDL.Opt(Sa)], [], []),\n    'changeOwner' : IDL.Func([IDL.Principal], [IDL.Bool], []),\n    'comp_deposit' : IDL.Func([Amount__1, Amount__1, IDL.Opt(Sa)], [], []),\n    'comp_dropout' : IDL.Func([IDL.Opt(Sa)], [IDL.Bool], []),\n    'comp_fallback' : IDL.Func([IDL.Opt(Sa)], [Amount__1, Amount__1], []),\n    'comp_getDepositAccount' : IDL.Func(\n        [Address],\n        [\n          IDL.Record({\n            'depositing' : IDL.Tuple(Account__1, Address),\n            'balance' : IDL.Tuple(Account__1, Address),\n          }),\n        ],\n        ['query'],\n      ),\n    'comp_newRound' : IDL.Func(\n        [\n          IDL.Text,\n          IDL.Text,\n          Time,\n          Time,\n          IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n          IDL.Nat,\n          IDL.Bool,\n        ],\n        [IDL.Nat],\n        [],\n      ),\n    'comp_register' : IDL.Func([IDL.Opt(Sa)], [IDL.Bool], []),\n    'comp_result' : IDL.Func(\n        [IDL.Opt(IDL.Nat), Address],\n        [IDL.Opt(CompResult__1)],\n        ['query'],\n      ),\n    'comp_results' : IDL.Func(\n        [IDL.Opt(IDL.Nat), ListPage, ListSize],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(AccountId__4, CompResult__1)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'comp_round' : IDL.Func(\n        [IDL.Opt(IDL.Nat)],\n        [IDL.Nat, IDL.Opt(RoundItem__1)],\n        ['query'],\n      ),\n    'comp_settle' : IDL.Func([IDL.Nat], [], []),\n    'comp_withdraw' : IDL.Func([IDL.Opt(Sa)], [Amount__1, Amount__1], []),\n    'config' : IDL.Func([DexConfig], [IDL.Bool], []),\n    'count' : IDL.Func([IDL.Opt(Address)], [IDL.Nat], ['query']),\n    'drc205_canisterId' : IDL.Func([], [IDL.Principal], ['query']),\n    'drc205_config' : IDL.Func([Config], [IDL.Bool], []),\n    'drc205_dexInfo' : IDL.Func([], [DexInfo], ['query']),\n    'drc205_events' : IDL.Func(\n        [IDL.Opt(Address__2)],\n        [IDL.Vec(TxnRecord__3)],\n        ['query'],\n      ),\n    'drc205_getConfig' : IDL.Func([], [Setting], ['query']),\n    'drc205_pool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Txid__1, TxnRecord__3, IDL.Nat))],\n        ['query'],\n      ),\n    'drc205_txn' : IDL.Func([Txid__5], [IDL.Opt(TxnRecord__3)], ['query']),\n    'drc205_txn2' : IDL.Func([Txid__5], [IDL.Opt(TxnRecord__3)], []),\n    'drc207' : IDL.Func([], [DRC207Support], ['query']),\n    'fallback' : IDL.Func([Nonce, IDL.Opt(Sa)], [IDL.Bool], []),\n    'fallbackByTxid' : IDL.Func([Txid__1, IDL.Opt(Sa)], [IDL.Bool], []),\n    'fee' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'maker' : IDL.Record({ 'buy' : IDL.Float64, 'sell' : IDL.Float64 }),\n            'taker' : IDL.Record({ 'buy' : IDL.Float64, 'sell' : IDL.Float64 }),\n          }),\n        ],\n        ['query'],\n      ),\n    'feeStatus' : IDL.Func([], [FeeStatus], ['query']),\n    'getConfig' : IDL.Func([], [DexSetting], ['query']),\n    'getOwner' : IDL.Func([], [IDL.Principal], ['query']),\n    'getQuotes' : IDL.Func([KInterval], [IDL.Vec(KBar)], ['query']),\n    'getTxAccount' : IDL.Func(\n        [Address],\n        [Account__1, TxAccount, Nonce, Txid__1],\n        ['query'],\n      ),\n    'ictc_TM' : IDL.Func([], [IDL.Text], ['query']),\n    'ictc_addAdmin' : IDL.Func([IDL.Principal], [], []),\n    'ictc_appendTT' : IDL.Func(\n        [\n          IDL.Opt(IDL.Vec(IDL.Nat8)),\n          Toid__3,\n          IDL.Opt(Ttid__2),\n          IDL.Principal,\n          CallType__1,\n          IDL.Vec(Ttid__2),\n        ],\n        [Ttid__2],\n        [],\n      ),\n    'ictc_blockTO' : IDL.Func([Toid__3], [IDL.Opt(Toid__3)], []),\n    'ictc_clearLog' : IDL.Func([IDL.Opt(IDL.Int), IDL.Bool], [], []),\n    'ictc_clearTTPool' : IDL.Func([], [], []),\n    'ictc_completeTO' : IDL.Func([Toid__3, OrderStatus], [IDL.Bool], []),\n    'ictc_doneTO' : IDL.Func([Toid__3, OrderStatus, IDL.Bool], [IDL.Bool], []),\n    'ictc_doneTT' : IDL.Func(\n        [Toid__3, Ttid__2, IDL.Bool],\n        [IDL.Opt(Ttid__2)],\n        [],\n      ),\n    'ictc_getAdmins' : IDL.Func([], [IDL.Vec(IDL.Principal)], ['query']),\n    'ictc_getCalleeStatus' : IDL.Func(\n        [IDL.Principal],\n        [IDL.Opt(CalleeStatus)],\n        ['query'],\n      ),\n    'ictc_getPool' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'ttPool' : IDL.Record({\n              'total' : IDL.Nat,\n              'items' : IDL.Vec(IDL.Tuple(Ttid__2, Task__2)),\n            }),\n            'toPool' : IDL.Record({\n              'total' : IDL.Nat,\n              'items' : IDL.Vec(IDL.Tuple(Toid__3, IDL.Opt(Order__1))),\n            }),\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTO' : IDL.Func([Toid__3], [IDL.Opt(Order__1)], ['query']),\n    'ictc_getTOCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'ictc_getTOPool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Toid__3, IDL.Opt(Order__1)))],\n        ['query'],\n      ),\n    'ictc_getTOs' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(Toid__3, Order__1)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTT' : IDL.Func([Ttid__2], [IDL.Opt(TaskEvent)], ['query']),\n    'ictc_getTTByTO' : IDL.Func([Toid__3], [IDL.Vec(TaskEvent)], ['query']),\n    'ictc_getTTErrors' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(IDL.Nat, ErrorLog)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTTPool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Ttid__2, Task__2))],\n        ['query'],\n      ),\n    'ictc_getTTs' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(Ttid__2, TaskEvent)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_redoTT' : IDL.Func([Toid__3, Ttid__2], [IDL.Opt(Ttid__2)], []),\n    'ictc_removeAdmin' : IDL.Func([IDL.Principal], [], []),\n    'ictc_runTO' : IDL.Func([Toid__3], [IDL.Opt(OrderStatus)], []),\n    'ictc_runTT' : IDL.Func([], [IDL.Bool], []),\n    'info' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'decimals' : IDL.Nat8,\n            'setting' : DexSetting,\n            'owner' : IDL.Principal,\n            'name' : IDL.Text,\n            'version' : IDL.Text,\n            'token0' : TokenInfo,\n            'token1' : TokenInfo,\n            'paused' : IDL.Bool,\n          }),\n        ],\n        ['query'],\n      ),\n    'init' : IDL.Func([], [], []),\n    'latestFilled' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Timestamp__4, Txid__1, OrderFilled__1, OrderSide))],\n        ['query'],\n      ),\n    'level10' : IDL.Func(\n        [],\n        [\n          IDL.Nat,\n          IDL.Record({\n            'ask' : IDL.Vec(PriceResponse),\n            'bid' : IDL.Vec(PriceResponse),\n          }),\n        ],\n        ['query'],\n      ),\n    'level100' : IDL.Func(\n        [],\n        [\n          IDL.Nat,\n          IDL.Record({\n            'ask' : IDL.Vec(PriceResponse),\n            'bid' : IDL.Vec(PriceResponse),\n          }),\n        ],\n        ['query'],\n      ),\n    'liquidity' : IDL.Func([IDL.Opt(Address)], [Liquidity], ['query']),\n    'makerRebate' : IDL.Func([Address], [IDL.Float64, IDL.Float64], ['query']),\n    'name' : IDL.Func([], [IDL.Text], ['query']),\n    'orderExpirationDuration' : IDL.Func([], [IDL.Int], ['query']),\n    'pending' : IDL.Func(\n        [IDL.Opt(Address), IDL.Opt(ListPage), IDL.Opt(ListSize)],\n        [TrieList],\n        ['query'],\n      ),\n    'pendingAll' : IDL.Func(\n        [IDL.Opt(ListPage), IDL.Opt(ListSize)],\n        [TrieList],\n        ['query'],\n      ),\n    'pendingCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'prepare' : IDL.Func([Address], [TxAccount, Nonce], ['query']),\n    'recovery' : IDL.Func([BackupResponse], [IDL.Bool], []),\n    'removeVipMaker' : IDL.Func([Address], [], []),\n    'setOrderFail' : IDL.Func([IDL.Text], [IDL.Bool], []),\n    'setPause' : IDL.Func([IDL.Bool, IDL.Opt(Time)], [IDL.Bool], []),\n    'setUpgradeMode' : IDL.Func(\n        [IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null })],\n        [],\n        [],\n      ),\n    'setVipMaker' : IDL.Func([Address, IDL.Nat], [], []),\n    'stats' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'change24h' : IDL.Float64,\n            'vol24h' : Vol,\n            'totalVol' : Vol,\n            'price' : IDL.Float64,\n          }),\n        ],\n        ['query'],\n      ),\n    'status' : IDL.Func([Address, Nonce], [OrderStatusResponse], ['query']),\n    'statusByTxid' : IDL.Func([Txid__1], [OrderStatusResponse], ['query']),\n    'sync' : IDL.Func([], [], []),\n    'sysMode' : IDL.Func(\n        [],\n        [IDL.Record({ 'mode' : SysMode, 'openingTime' : Time })],\n        ['query'],\n      ),\n    'ta_ambassador' : IDL.Func(\n        [Address],\n        [IDL.Bool, IDL.Text, IDL.Nat, Vol],\n        ['query'],\n      ),\n    'ta_description' : IDL.Func([], [IDL.Text], ['query']),\n    'ta_getReferrer' : IDL.Func(\n        [Address],\n        [IDL.Opt(IDL.Tuple(Address, IDL.Bool))],\n        ['query'],\n      ),\n    'ta_setDescription' : IDL.Func([IDL.Text], [], []),\n    'ta_setReferrer' : IDL.Func(\n        [Address, IDL.Opt(IDL.Text), IDL.Opt(Sa)],\n        [IDL.Bool],\n        [],\n      ),\n    'ta_stats' : IDL.Func(\n        [IDL.Opt(IDL.Text)],\n        [IDL.Nat, IDL.Nat, Vol],\n        ['query'],\n      ),\n    'timerStart' : IDL.Func([IDL.Nat], [], []),\n    'timerStop' : IDL.Func([], [], []),\n    'token0' : IDL.Func([], [TokenType, IDL.Opt(TokenStd)], ['query']),\n    'token1' : IDL.Func([], [TokenType, IDL.Opt(TokenStd)], ['query']),\n    'tpsStats' : IDL.Func(\n        [],\n        [IDL.Nat, IDL.Float64, IDL.Nat, IDL.Nat, IDL.Int, IDL.Int],\n        ['query'],\n      ),\n    'trade' : IDL.Func(\n        [\n          OrderPrice,\n          OrderType,\n          IDL.Opt(PeriodNs),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'tradeMKT' : IDL.Func(\n        [DebitToken, Amount__1, IDL.Opt(Nonce), IDL.Opt(Sa), IDL.Opt(Data)],\n        [TradingResult],\n        [],\n      ),\n    'tradeMKT_b' : IDL.Func(\n        [\n          DebitToken,\n          Amount__1,\n          IDL.Opt(IDL.Nat),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n          IDL.Opt(\n            IDL.Record({ 'broker' : IDL.Principal, 'rate' : IDL.Float64 })\n          ),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'trade_b' : IDL.Func(\n        [\n          OrderPrice,\n          OrderType,\n          IDL.Opt(PeriodNs),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n          IDL.Opt(\n            IDL.Record({ 'broker' : IDL.Principal, 'rate' : IDL.Float64 })\n          ),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'userCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'version' : IDL.Func([], [IDL.Text], ['query']),\n    'wallet_receive' : IDL.Func([], [], []),\n    'withdraw_cycles' : IDL.Func([IDL.Nat], [], []),\n  });\n};\nexport const init = ({ IDL }) => { return []; };"
                },
                "method": {
                    "name": "stats",
                    "arg": {
                        "type": "tuple",
                        "subitems": []
                    },
                    "result": {
                        "type": "tuple",
                        "subitems": [
                            {
                                "key": "_0_",
                                "type": {
                                    "type": "record",
                                    "subitems": [
                                        {
                                            "key": "change24h",
                                            "type": {
                                                "type": "float64"
                                            }
                                        },
                                        {
                                            "key": "vol24h",
                                            "type": {
                                                "type": "record",
                                                "subitems": [
                                                    {
                                                        "key": "value0",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    },
                                                    {
                                                        "key": "value1",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "key": "totalVol",
                                            "type": {
                                                "type": "record",
                                                "subitems": [
                                                    {
                                                        "key": "value0",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    },
                                                    {
                                                        "key": "value1",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "key": "price",
                                            "type": {
                                                "type": "float64"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "arg": {
                    "type": {
                        "type": "tuple",
                        "subitems": []
                    },
                    "constraint": {
                        "type": "tuple",
                        "subitems": []
                    }
                },
                "identity": {
                    "from": "anonymous"
                }
            },
            "exported": {
                "target": "inner",
                "name": "f3df8f16-52e4-4928-b348-0534232b0d60"
            }
        },
        {
            "source": "inner",
            "inner": {
                "name": "f3df8f16-52e4-4928-b348-0534232b0d60",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "extra": {
                    "constant": false
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "data = data[0];\ndata = data['change24h'];\nresult = data;"
                },
                "to": {
                    "type": "float64"
                }
            },
            "exported": {
                "target": "inner",
                "name": ""
            }
        },
        {
            "source": "inner",
            "inner": {
                "name": "f3df8f16-52e4-4928-b348-0534232b0d60",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "extra": {
                    "constant": false
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "data = data[0];\ndata = data['price'];\nresult = data;"
                },
                "to": {
                    "type": "float64"
                }
            },
            "exported": {
                "target": "inner",
                "name": "d4566540-d13e-499b-9df8-e2889b3b3b62"
            }
        },
        {
            "source": "canister",
            "canister": {
                "canister_id": {
                    "fixed": true,
                    "value": "k7tml-iaaaa-aaaak-aecgq-cai"
                },
                "info": {
                    "module_hash": "c38df5ecc4def90e52b9fc4e2ff84fdd74fb88bef67fdc62c0f6a854c8511891",
                    "updated": 1685032278499
                },
                "candid": {
                    "custom": false,
                    "did": "type Vol__2 = \n record {\n   value0: nat;\n   value1: nat;\n };\ntype Vol__1 = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype Vol = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype TxnResult = \n variant {\n   err:\n    record {\n      code:\n       variant {\n         DuplicateExecutedTransfer;\n         InsufficientAllowance;\n         InsufficientBalance;\n         InsufficientGas;\n         LockedTransferExpired;\n         NoLockedTransfer;\n         NonceError;\n         UndefinedError;\n       };\n      message: text;\n    };\n   ok: Txid__4;\n };\ntype TxnRecord__3 = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype TxnRecord__2 = \n record {\n   caller: AccountId__3;\n   gas: Gas;\n   index: nat;\n   msgCaller: opt principal;\n   nonce: nat;\n   timestamp: Time__1;\n   transaction: Transaction;\n   txid: Txid__4;\n };\ntype TxnRecord__1 = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype TxnRecord = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype Txid__5 = blob;\ntype Txid__4 = blob;\ntype Txid__3 = blob;\ntype Txid__2 = blob;\ntype Txid__1 = blob;\ntype Txid = blob;\ntype TxReceipt = \n variant {\n   Err:\n    variant {\n      AmountTooSmall;\n      BlockUsed;\n      ErrorOperationStyle;\n      ErrorTo;\n      InsufficientAllowance;\n      InsufficientBalance;\n      LedgerTrap;\n      Other: text;\n      Unauthorized;\n    };\n   Ok: nat;\n };\ntype TxAccount = text;\ntype Ttid__2 = nat;\ntype Ttid__1 = nat;\ntype Ttid = nat;\ntype TrieList = \n record {\n   data: vec record {\n               Txid__1;\n               TradingOrder__1;\n             };\n   total: nat;\n   totalPage: nat;\n };\ntype TransferResult = \n variant {\n   Err: TransferError__2;\n   Ok: BlockIndex;\n };\ntype TransferFromError = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientAllowance: record {allowance: nat;};\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype TransferFromArgs = \n record {\n   amount: nat;\n   created_at_time: opt nat64;\n   fee: opt nat;\n   from: Account;\n   memo: opt blob;\n   to: Account;\n };\ntype TransferError__2 = \n variant {\n   BadFee: record {expected_fee: ICP;};\n   InsufficientFunds: record {balance: ICP;};\n   TxCreatedInFuture;\n   TxDuplicate: record {duplicate_of: BlockIndex;};\n   TxTooOld: record {allowed_window_nanos: nat64;};\n };\ntype TransferError__1 = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype TransferError = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture;\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld: record {allowed_window_nanos: Duration;};\n };\ntype TransferArgs__1 = \n record {\n   amount: ICP;\n   created_at_time: opt Timestamp__3;\n   fee: ICP;\n   from_subaccount: opt SubAccount;\n   memo: Memo;\n   to: AccountIdentifier;\n };\ntype TransferArgs = \n record {\n   amount: nat;\n   created_at_time: opt Timestamp__2;\n   fee: opt nat;\n   from_subaccount: opt Subaccount;\n   memo: opt blob;\n   to: Account;\n };\ntype Transaction = \n record {\n   data: opt blob;\n   from: AccountId__3;\n   operation: Operation;\n   to: AccountId__3;\n   value: nat;\n };\ntype TradingStatus = \n variant {\n   Cancelled;\n   Closed;\n   Pending;\n   Todo;\n };\ntype TradingResult = \n variant {\n   err:\n    record {\n      code:\n       variant {\n         InsufficientBalance;\n         InvalidAmount;\n         NonceError;\n         TransactionBlocking;\n         TransferException;\n         UnacceptableVolatility;\n         UndefinedError;\n       };\n      message: text;\n    };\n   ok: record {\n         filled: vec OrderFilled;\n         status: TradingStatus;\n         txid: Txid;\n       };\n };\ntype TradingOrder__1 = \n record {\n   account: AccountId__1;\n   data: opt blob;\n   expiration: Time;\n   fee: record {\n          fee0: int;\n          fee1: int;\n        };\n   filled: vec OrderFilled;\n   gas: record {\n          gas0: nat;\n          gas1: nat;\n        };\n   icrc1Account: opt record {\n                       owner: principal;\n                       subaccount: opt blob;\n                     };\n   index: nat;\n   nonce: nat;\n   orderPrice: OrderPrice__1;\n   orderType: OrderType__1;\n   refund: record {\n             nat;\n             nat;\n             nat;\n           };\n   remaining: OrderPrice__1;\n   status: TradingStatus;\n   time: Time;\n   toids: vec Toid;\n   txid: Txid;\n };\ntype TradingOrder = \n record {\n   account: AccountId__1;\n   data: opt blob;\n   expiration: Time;\n   fee: record {\n          fee0: int;\n          fee1: int;\n        };\n   filled: vec OrderFilled;\n   gas: record {\n          gas0: nat;\n          gas1: nat;\n        };\n   icrc1Account: opt record {\n                       owner: principal;\n                       subaccount: opt blob;\n                     };\n   index: nat;\n   nonce: nat;\n   orderPrice: OrderPrice__1;\n   orderType: OrderType__1;\n   refund: record {\n             nat;\n             nat;\n             nat;\n           };\n   remaining: OrderPrice__1;\n   status: TradingStatus;\n   time: Time;\n   toids: vec Toid;\n   txid: Txid;\n };\ntype TokenType__1 = \n variant {\n   Cycles;\n   Icp;\n   Token: principal;\n };\ntype TokenType = \n variant {\n   Cycles;\n   Icp;\n   Token: principal;\n };\ntype TokenSymbol = text;\ntype TokenStd__1 = \n variant {\n   cycles;\n   dft;\n   dip20;\n   drc20;\n   ext;\n   icp;\n   icrc1;\n   ledger;\n   other: text;\n };\ntype TokenStd = \n variant {\n   cycles;\n   dft;\n   dip20;\n   drc20;\n   ext;\n   icp;\n   icrc1;\n   ledger;\n   other: text;\n };\ntype TokenInfo = \n record {\n   principal;\n   TokenSymbol;\n   TokenStd;\n };\ntype Toid__3 = nat;\ntype Toid__2 = nat;\ntype Toid__1 = nat;\ntype Toid = nat;\ntype To = text;\ntype Timestamp__4 = nat;\ntype Timestamp__3 = record {timestamp_nanos: nat64;};\ntype Timestamp__2 = nat64;\ntype Timestamp__1 = nat;\ntype Timestamp = nat;\ntype Timeout = nat32;\ntype Time__1 = int;\ntype Time = int;\ntype Tcid = nat;\ntype Task__2 = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype Task__1 = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype TaskResult = \n record {\n   Status__1;\n   opt Receipt;\n   opt Err;\n };\ntype TaskEvent = \n record {\n   attempts: Attempts;\n   callbackStatus: opt Status__2;\n   result: TaskResult;\n   task: Task;\n   time: Time;\n   toid: opt Toid__1;\n   ttid: Ttid__1;\n   txHash: blob;\n };\ntype Task = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype SysMode = \n variant {\n   ClosingOnly;\n   DisabledTrading;\n   GeneralTrading;\n   ReadOnly;\n };\ntype Subaccount__1 = blob;\ntype Subaccount = blob;\ntype SubAccount = blob;\ntype Status__3 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status__2 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status__1 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status = \n variant {\n   Cancelled;\n   Completed;\n   Failed;\n   PartiallyCompletedAndCancelled;\n   Pending;\n };\ntype Spender = text;\ntype Shares = nat;\ntype ShareChange = \n variant {\n   Burn: Shares;\n   Mint: Shares;\n   NoChange;\n };\ntype Setting = \n record {\n   EN_DEBUG: bool;\n   MAX_CACHE_NUMBER_PER: nat;\n   MAX_CACHE_TIME: nat;\n   MAX_STORAGE_TRIES: nat;\n };\ntype SagaTask = \n record {\n   comp: opt Compensation;\n   status: Status__3;\n   task: Task__2;\n   ttid: Ttid__2;\n };\ntype SagaData = \n record {\n   actuator:\n    record {\n      callees: vec record {\n                     Callee;\n                     CalleeStatus;\n                   };\n      errIndex: nat;\n      errorLogs: vec record {\n                       nat;\n                       ErrorLog;\n                     };\n      firstErrIndex: nat;\n      firstIndex: nat;\n      index: nat;\n      taskLogs: vec record {\n                      Ttid;\n                      TaskEvent;\n                    };\n      tasks: record {\n               vec record {\n                     Ttid;\n                     Task__1;\n                   };\n               vec record {\n                     Ttid;\n                     Task__1;\n                   };\n             };\n    };\n   aliveOrders: vec record {\n                      Toid__2;\n                      Time;\n                    };\n   autoClearTimeout: int;\n   firstIndex: nat;\n   index: nat;\n   orders: vec record {\n                 Toid__2;\n                 Order;\n               };\n   taskEvents: vec record {\n                     Toid__2;\n                     vec Ttid;\n                   };\n };\ntype Sa__1 = vec nat8;\ntype Sa = vec nat8;\ntype RoundItem__1 = \n record {\n   closedPrice: opt float64;\n   content: text;\n   end: Time;\n   isSettled: bool;\n   minCapital: nat;\n   name: text;\n   quoteToken: variant {\n                 token0;\n                 token1;\n               };\n   start: Time;\n };\ntype RoundItem = \n record {\n   closedPrice: opt float64;\n   content: text;\n   end: Time;\n   isSettled: bool;\n   minCapital: nat;\n   name: text;\n   quoteToken: variant {\n                 token0;\n                 token1;\n               };\n   start: Time;\n };\ntype Receipt = \n variant {\n   DIP20:\n    variant {\n      approve: TxReceipt;\n      balanceOf: nat;\n      transfer: TxReceipt;\n      transferFrom: TxReceipt;\n    };\n   DRC20:\n    variant {\n      approve: TxnResult;\n      balanceOf: Amount__2;\n      dropAccount;\n      executeTransfer: TxnResult;\n      lockTransfer: TxnResult;\n      lockTransferFrom: TxnResult;\n      transfer: TxnResult;\n      transferBatch: vec TxnResult;\n      transferFrom: TxnResult;\n      txnRecord: opt TxnRecord__2;\n    };\n   ICRC1:\n    variant {\n      icrc1_balance_of: nat;\n      icrc1_transfer: variant {\n                        Err: TransferError;\n                        Ok: nat;\n                      };\n    };\n   ICRC1New:\n    variant {\n      icrc1_balance_of: nat;\n      icrc1_transfer: variant {\n                        Err: TransferError__1;\n                        Ok: nat;\n                      };\n    };\n   ICRC2:\n    variant {\n      icrc2_approve: variant {\n                       Err: ApproveError;\n                       Ok: nat;\n                     };\n      icrc2_transfer_from: variant {\n                             Err: TransferFromError;\n                             Ok: nat;\n                           };\n    };\n   ICTokens: variant {\n               burn: TxnResult;\n               mint: TxnResult;\n             };\n   Ledger: variant {\n             account_balance: ICP;\n             transfer: TransferResult;\n           };\n   This: variant {\n           dip20Send;\n           dip20SendComp;\n         };\n   __block;\n   __skip;\n };\ntype Quantity = nat;\ntype PriceWeighted = \n record {\n   token0TimeWeighted: nat;\n   token1TimeWeighted: nat;\n   updateTime: Timestamp__1;\n };\ntype PriceResponse = \n record {\n   price: nat;\n   quantity: nat;\n };\ntype Price = nat;\ntype PeriodNs = int;\ntype Participant = \n record {\n   historyVol: float64;\n   limit: Amount__1;\n   updatedTime: Time;\n   used: Amount__1;\n };\ntype Order__1 = \n record {\n   allowPushing: variant {\n                   Closed;\n                   Opening;\n                 };\n   callbackStatus: opt Status__3;\n   compStrategy: CompStrategy;\n   comps: List;\n   data: opt blob;\n   name: text;\n   status: OrderStatus;\n   tasks: List_1;\n   time: Time;\n };\ntype OrderType__1 = \n variant {\n   FAK;\n   FOK;\n   LMT;\n   MKT;\n };\ntype OrderType = \n variant {\n   FAK;\n   FOK;\n   LMT;\n   MKT;\n };\ntype OrderStatusResponse = \n variant {\n   Completed: TxnRecord;\n   Failed: TradingOrder;\n   None;\n   Pending: TradingOrder;\n };\ntype OrderStatus = \n variant {\n   Blocking;\n   Compensating;\n   Doing;\n   Done;\n   Recovered;\n   Todo;\n };\ntype OrderSide = \n variant {\n   Buy;\n   Sell;\n };\ntype OrderPrice__1 = \n record {\n   price: Price;\n   quantity: variant {\n               Buy: record {\n                      Quantity;\n                      Amount;\n                    };\n               Sell: Quantity;\n             };\n };\ntype OrderPrice = \n record {\n   price: Price;\n   quantity: variant {\n               Buy: record {\n                      Quantity;\n                      Amount;\n                    };\n               Sell: Quantity;\n             };\n };\ntype OrderFilled__1 = \n record {\n   counterparty: Txid;\n   time: Time;\n   token0Value: BalanceChange;\n   token1Value: BalanceChange;\n };\ntype OrderFilled = \n record {\n   counterparty: Txid;\n   time: Time;\n   token0Value: BalanceChange;\n   token1Value: BalanceChange;\n };\ntype Order = \n record {\n   allowPushing: variant {\n                   Closed;\n                   Opening;\n                 };\n   callbackStatus: opt Status__3;\n   compStrategy: CompStrategy;\n   comps: List;\n   data: opt blob;\n   name: text;\n   status: OrderStatus;\n   tasks: List_1;\n   time: Time;\n };\ntype OperationType = \n variant {\n   AddLiquidity;\n   Claim;\n   RemoveLiquidity;\n   Swap;\n };\ntype Operation = \n variant {\n   approve: record {allowance: nat;};\n   executeTransfer: record {\n                      fallback: nat;\n                      lockedTxid: Txid__4;\n                    };\n   lockTransfer:\n    record {\n      decider: AccountId__3;\n      expiration: Time__1;\n      locked: nat;\n    };\n   transfer: record {action: variant {\n                               burn;\n                               mint;\n                               send;\n                             };};\n };\ntype Nonce__3 = nat;\ntype Nonce__2 = nat;\ntype Nonce__1 = nat;\ntype Nonce = nat;\ntype Memo = nat64;\ntype List_1 = \n opt record {\n       SagaTask;\n       List_1;\n     };\ntype ListSize = nat;\ntype ListPage = nat;\ntype List = \n opt record {\n       CompTask;\n       List;\n     };\ntype Liquidity = \n record {\n   priceWeighted: PriceWeighted;\n   shareWeighted: record {\n                    shareTimeWeighted: nat;\n                    updateTime: Timestamp__1;\n                  };\n   shares: Amount;\n   swapCount: nat64;\n   unitValue: record {\n                Amount;\n                Amount;\n              };\n   value0: Amount;\n   value1: Amount;\n   vol: Vol__1;\n };\ntype KInterval = nat;\ntype KBar = \n record {\n   close: nat;\n   high: nat;\n   kid: nat;\n   low: nat;\n   open: nat;\n   updatedTs: Timestamp;\n   vol: Vol__2;\n };\ntype InitArgs = \n record {\n   name: text;\n   owner: opt principal;\n   token0: principal;\n   token1: principal;\n   unitSize: nat64;\n };\ntype IcpE8s = nat;\ntype IDOSetting = \n record {\n   IDOClosingTime: Time;\n   IDOEnabled: bool;\n   IDOLimitPerAccount: Amount__1;\n   IDOOpeningTime: Time;\n   IDOSupplies: vec record {\n                      price: float64;\n                      supply: Amount__1;\n                    };\n   IDOTotalSupply: record {\n                     IDOSupply: Amount__1;\n                     percentageOfTotal: float64;\n                   };\n   IDOWhitelistEnabled: bool;\n };\ntype IDORequirement = \n record {\n   pairs: vec record {\n                pair: principal;\n                token1ToUsdRatio: float64;\n              };\n   threshold: float64;\n };\ntype ICP = record {e8s: nat64;};\ntype Gas = \n variant {\n   cycles: nat;\n   noFee;\n   token: nat;\n };\ntype From = text;\ntype FeeStatus = \n record {\n   feeBalance: FeeBalance;\n   feeRate: float64;\n   totalFee: FeeBalance;\n };\ntype FeeBalance = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype ExecuteType = \n variant {\n   fallback;\n   send: nat;\n   sendAll;\n };\ntype ErrorLog = \n record {\n   callee: opt Callee__1;\n   result: opt TaskResult;\n   time: Time;\n   ttid: Ttid__1;\n };\ntype ErrorCode = \n variant {\n   call_error: record {err_code: nat32;};\n   canister_error;\n   canister_reject;\n   destination_invalid;\n   future: nat32;\n   system_fatal;\n   system_transient;\n };\ntype Err = \n record {\n   code: ErrorCode;\n   message: text;\n };\ntype Duration = nat64;\ntype DexSetting = \n record {\n   ICP_FEE: IcpE8s;\n   ICTC_RUN_INTERVAL: nat;\n   MAKER_BONUS_RATE: nat;\n   MAX_PENDINGS: nat;\n   MAX_TPS: nat;\n   STORAGE_INTERVAL: nat;\n   TRADING_FEE: nat;\n   UNIT_SIZE: nat;\n };\ntype DexInfo = \n record {\n   canisterId: principal;\n   dexName: text;\n   feeRate: float64;\n   mmType: variant {\n             AMM;\n             OrderBook;\n           };\n   pairName: text;\n   token0: record {\n             TokenType;\n             TokenStd__1;\n           };\n   token1: record {\n             TokenType;\n             TokenStd__1;\n           };\n };\ntype DexConfig = \n record {\n   ICP_FEE: opt IcpE8s;\n   ICTC_RUN_INTERVAL: opt nat;\n   MAKER_BONUS_RATE: opt nat;\n   MAX_PENDINGS: opt nat;\n   MAX_TPS: opt nat;\n   ORDER_EXPIRATION_DURATION: opt int;\n   STORAGE_INTERVAL: opt nat;\n   TRADING_FEE: opt nat;\n   UNIT_SIZE: opt nat;\n };\ntype Decider = text;\ntype DebitToken = principal;\ntype Data__2 = blob;\ntype Data__1 = blob;\ntype Data = blob;\ntype DRC207Support = \n record {\n   cycles_receivable: bool;\n   monitorable_by_blackhole:\n    record {\n      allowed: bool;\n      canister_id: opt principal;\n    };\n   monitorable_by_self: bool;\n   timer: record {\n            enable: bool;\n            interval_seconds: opt nat;\n          };\n };\ntype DRC205Data = \n record {\n   accountLastTxns:\n    vec record {\n          AccountId__2;\n          record {\n            vec Txid__3;\n            vec Txid__3;\n          };\n        };\n   globalLastTxns: record {\n                     vec Txid__3;\n                     vec Txid__3;\n                   };\n   globalTxns:\n    record {\n      vec record {\n            Txid__3;\n            Time;\n          };\n      vec record {\n            Txid__3;\n            Time;\n          };\n    };\n   setting: Setting;\n   storagePool: vec record {\n                      Txid__3;\n                      TxnRecord__1;\n                      nat;\n                    };\n   txnRecords: vec record {\n                     Txid__3;\n                     TxnRecord__1;\n                   };\n };\ntype CyclesWallet = principal;\ntype Config = \n record {\n   EN_DEBUG: opt bool;\n   MAX_CACHE_NUMBER_PER: opt nat;\n   MAX_CACHE_TIME: opt nat;\n   MAX_STORAGE_TRIES: opt nat;\n };\ntype Compensation = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype CompTask = \n record {\n   comp: Compensation;\n   forTtid: Ttid__2;\n   status: Status__3;\n   tcid: Tcid;\n };\ntype CompStrategy = \n variant {\n   Backward;\n   Forward;\n };\ntype CompResult__1 = \n record {\n   assetValue: opt CompCapital__1;\n   capital: CompCapital__1;\n   icrc1Account: Account__1;\n   status: variant {\n             Active;\n             Dropout;\n           };\n   vol: Vol;\n };\ntype CompResult = \n record {\n   assetValue: opt CompCapital;\n   capital: CompCapital;\n   icrc1Account: record {\n                   owner: principal;\n                   subaccount: opt blob;\n                 };\n   status: variant {\n             Active;\n             Dropout;\n           };\n   vol: Vol__1;\n };\ntype CompCapital__1 = \n record {\n   total: float64;\n   value0: nat;\n   value1: nat;\n };\ntype CompCapital = \n record {\n   total: float64;\n   value0: nat;\n   value1: nat;\n };\ntype Callee__1 = principal;\ntype CalleeStatus = \n record {\n   continuousFailure: nat;\n   failureCount: nat;\n   successCount: nat;\n };\ntype Callee = principal;\ntype CallType__1 = \n variant {\n   DIP20:\n    variant {\n      approve: record {\n                 principal;\n                 nat;\n               };\n      balanceOf: principal;\n      transfer: record {\n                  principal;\n                  nat;\n                };\n      transferFrom: record {\n                      principal;\n                      principal;\n                      nat;\n                    };\n    };\n   DRC20:\n    variant {\n      approve: record {\n                 Spender;\n                 Amount__2;\n                 opt Nonce__3;\n                 opt Sa__1;\n                 opt Data__2;\n               };\n      balanceOf: Address__1;\n      dropAccount: opt Sa__1;\n      executeTransfer:\n       record {\n         BlobFill;\n         ExecuteType;\n         opt To;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransfer:\n       record {\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transfer: record {\n                  To;\n                  Amount__2;\n                  opt Nonce__3;\n                  opt Sa__1;\n                  opt Data__2;\n                };\n      transferBatch:\n       record {\n         vec To;\n         vec Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      txnRecord: BlobFill;\n    };\n   ICRC1: variant {\n            icrc1_balance_of: Account;\n            icrc1_transfer: TransferArgs;\n          };\n   ICRC2:\n    variant {\n      icrc2_approve: ApproveArgs;\n      icrc2_transfer_from: TransferFromArgs;\n    };\n   ICTokens:\n    variant {\n      burn: record {\n              Amount__2;\n              opt Nonce__3;\n              opt Sa__1;\n              opt Data__2;\n            };\n      mint: record {\n              Address__1;\n              Amount__2;\n              opt Nonce__3;\n              opt Data__2;\n            };\n    };\n   Ledger:\n    variant {\n      account_balance: AccountBalanceArgs;\n      transfer: TransferArgs__1;\n    };\n   This:\n    variant {\n      dip20Send: record {\n                   blob;\n                   nat;\n                 };\n      dip20SendComp: record {\n                       blob;\n                       principal;\n                       nat;\n                     };\n    };\n   __block;\n   __skip;\n };\ntype CallType = \n variant {\n   DIP20:\n    variant {\n      approve: record {\n                 principal;\n                 nat;\n               };\n      balanceOf: principal;\n      transfer: record {\n                  principal;\n                  nat;\n                };\n      transferFrom: record {\n                      principal;\n                      principal;\n                      nat;\n                    };\n    };\n   DRC20:\n    variant {\n      approve: record {\n                 Spender;\n                 Amount__2;\n                 opt Nonce__3;\n                 opt Sa__1;\n                 opt Data__2;\n               };\n      balanceOf: Address__1;\n      dropAccount: opt Sa__1;\n      executeTransfer:\n       record {\n         BlobFill;\n         ExecuteType;\n         opt To;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransfer:\n       record {\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transfer: record {\n                  To;\n                  Amount__2;\n                  opt Nonce__3;\n                  opt Sa__1;\n                  opt Data__2;\n                };\n      transferBatch:\n       record {\n         vec To;\n         vec Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      txnRecord: BlobFill;\n    };\n   ICRC1: variant {\n            icrc1_balance_of: Account;\n            icrc1_transfer: TransferArgs;\n          };\n   ICRC2:\n    variant {\n      icrc2_approve: ApproveArgs;\n      icrc2_transfer_from: TransferFromArgs;\n    };\n   ICTokens:\n    variant {\n      burn: record {\n              Amount__2;\n              opt Nonce__3;\n              opt Sa__1;\n              opt Data__2;\n            };\n      mint: record {\n              Address__1;\n              Amount__2;\n              opt Nonce__3;\n              opt Data__2;\n            };\n    };\n   Ledger:\n    variant {\n      account_balance: AccountBalanceArgs;\n      transfer: TransferArgs__1;\n    };\n   This:\n    variant {\n      dip20Send: record {\n                   blob;\n                   nat;\n                 };\n      dip20SendComp: record {\n                       blob;\n                       principal;\n                       nat;\n                     };\n    };\n   __block;\n   __skip;\n };\ntype BlockIndex = nat64;\ntype BlobFill = \n variant {\n   AutoFill;\n   ManualFill: blob;\n };\ntype BalanceChange__1 = \n variant {\n   CreditRecord: nat;\n   DebitRecord: nat;\n   NoChange;\n };\ntype BalanceChange = \n variant {\n   CreditRecord: nat;\n   DebitRecord: nat;\n   NoChange;\n };\ntype BackupResponse = \n variant {\n   ambassadors: vec record {\n                      AccountId__2;\n                      AmbassadorData;\n                    };\n   clearingTxids: vec Txid__3;\n   competitors: vec record {\n                      nat;\n                      vec record {\n                            AccountId__2;\n                            CompResult;\n                          };\n                    };\n   drc205Data: DRC205Data;\n   icdex_dip20Balances: vec record {\n                              AccountId__2;\n                              record {\n                                principal;\n                                nat;\n                              };\n                            };\n   icdex_failedOrders: vec record {\n                             Txid__3;\n                             TradingOrder;\n                           };\n   icdex_klines2: vec record {\n                        KInterval;\n                        record {\n                          vec KBar;\n                          vec KBar;\n                        };\n                      };\n   icdex_makers: vec record {\n                       AccountId__2;\n                       record {\n                         nat;\n                         principal;\n                       };\n                     };\n   icdex_nonces: vec record {\n                       AccountId__2;\n                       Nonce__2;\n                     };\n   icdex_orderBook:\n    record {\n      ask: vec record {\n                 Txid__3;\n                 OrderPrice__1;\n               };\n      bid: vec record {\n                 Txid__3;\n                 OrderPrice__1;\n               };\n    };\n   icdex_orders: vec record {\n                       Txid__3;\n                       TradingOrder;\n                     };\n   icdex_pendingOrders: vec record {\n                              AccountId__2;\n                              vec Txid__3;\n                            };\n   icdex_vols: vec record {\n                     AccountId__2;\n                     Vol__1;\n                   };\n   ictcTaskCallbackEvents: vec record {\n                                 Ttid;\n                                 Time;\n                               };\n   otherData:\n    record {\n      activeRound: nat;\n      icdex_index: nat;\n      icdex_lastPrice: OrderPrice__1;\n      icdex_priceWeighted: PriceWeighted;\n      icdex_totalFee: FeeBalance;\n      icdex_totalVol: Vol__1;\n      taDescription: text;\n    };\n   rounds: vec record {\n                 nat;\n                 RoundItem;\n               };\n   sagaData: SagaData;\n   timeSortedTxids:\n    record {\n      vec record {\n            Txid__3;\n            Time;\n          };\n      vec record {\n            Txid__3;\n            Time;\n          };\n    };\n   traderReferrerTemps:\n    vec record {\n          AccountId__2;\n          record {\n            AccountId__2;\n            text;\n            Time;\n          };\n        };\n   traderReferrers: vec record {\n                          AccountId__2;\n                          AccountId__2;\n                        };\n };\ntype BackupRequest = \n variant {\n   ambassadors;\n   clearingTxids;\n   competitors;\n   drc205Data: variant {\n                 All;\n                 Base;\n               };\n   icdex_dip20Balances;\n   icdex_failedOrders;\n   icdex_klines2;\n   icdex_makers;\n   icdex_nonces;\n   icdex_orderBook;\n   icdex_orders;\n   icdex_pendingOrders;\n   icdex_vols;\n   ictcTaskCallbackEvents;\n   otherData;\n   rounds;\n   sagaData: variant {\n               All;\n               Base;\n             };\n   timeSortedTxids;\n   traderReferrerTemps;\n   traderReferrers;\n };\ntype Attempts = nat;\ntype ApproveError = \n variant {\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype ApproveArgs = \n record {\n   amount: nat;\n   created_at_time: opt nat64;\n   fee: opt nat;\n   from_subaccount: opt blob;\n   memo: opt blob;\n   spender: principal;\n };\ntype Amount__2 = nat;\ntype Amount__1 = nat;\ntype Amount = nat;\ntype AmbassadorData = \n record {\n   text;\n   nat;\n   Vol__1;\n };\ntype Address__2 = text;\ntype Address__1 = text;\ntype Address = text;\ntype Account__1 = \n record {\n   owner: principal;\n   subaccount: opt Subaccount__1;\n };\ntype AccountIdentifier = blob;\ntype AccountId__4 = blob;\ntype AccountId__3 = blob;\ntype AccountId__2 = blob;\ntype AccountId__1 = blob;\ntype AccountId = blob;\ntype AccountBalanceArgs = record {account: AccountIdentifier;};\ntype Account = \n record {\n   owner: principal;\n   subaccount: opt Subaccount;\n };\nservice : {\n  IDO_config: (IDOSetting) -> ();\n  IDO_getConfig: () -> (opt principal, IDOSetting, opt IDORequirement) query;\n  IDO_qualification: (opt Address) ->\n   (vec record {\n          Address;\n          Participant;\n        }) query;\n  IDO_removeWhitelist: (vec Address) -> ();\n  IDO_setFunder: (opt principal, opt IDORequirement) -> ();\n  IDO_setWhitelist: (vec record {\n                           Address;\n                           Amount__1;\n                         }) -> ();\n  IDO_updateQualification: (opt Sa) -> (opt Participant);\n  backup: (BackupRequest) -> (BackupResponse);\n  cancel: (Nonce, opt Sa) -> ();\n  cancelByTxid: (Txid__1, opt Sa) -> ();\n  changeOwner: (principal) -> (bool);\n  comp_deposit: (Amount__1, Amount__1, opt Sa) -> ();\n  comp_dropout: (opt Sa) -> (bool);\n  comp_fallback: (opt Sa) -> (Amount__1, Amount__1);\n  comp_getDepositAccount: (Address) ->\n   (record {\n      balance: record {\n                 Account__1;\n                 Address;\n               };\n      depositing: record {\n                    Account__1;\n                    Address;\n                  };\n    }) query;\n  comp_newRound: (text, text, Time, Time, variant {\n                                            token0;\n                                            token1;\n                                          }, nat, bool) -> (nat);\n  comp_register: (opt Sa) -> (bool);\n  comp_result: (opt nat, Address) -> (opt CompResult__1) query;\n  comp_results: (opt nat, ListPage, ListSize) ->\n   (record {\n      data: vec record {\n                  AccountId__4;\n                  CompResult__1;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  comp_round: (opt nat) -> (nat, opt RoundItem__1) query;\n  comp_settle: (nat) -> ();\n  comp_withdraw: (opt Sa) -> (Amount__1, Amount__1);\n  config: (DexConfig) -> (bool);\n  count: (opt Address) -> (nat) query;\n  drc205_canisterId: () -> (principal) query;\n  drc205_config: (Config) -> (bool);\n  drc205_dexInfo: () -> (DexInfo) query;\n  drc205_events: (opt Address__2) -> (vec TxnRecord__3) query;\n  drc205_getConfig: () -> (Setting) query;\n  drc205_pool: () -> (vec record {\n                            Txid__1;\n                            TxnRecord__3;\n                            nat;\n                          }) query;\n  drc205_txn: (Txid__5) -> (opt TxnRecord__3) query;\n  drc205_txn2: (Txid__5) -> (opt TxnRecord__3);\n  drc207: () -> (DRC207Support) query;\n  fallback: (Nonce, opt Sa) -> (bool);\n  fallbackByTxid: (Txid__1, opt Sa) -> (bool);\n  fee: () ->\n   (record {\n      maker: record {\n               buy: float64;\n               sell: float64;\n             };\n      taker: record {\n               buy: float64;\n               sell: float64;\n             };\n    }) query;\n  feeStatus: () -> (FeeStatus) query;\n  getConfig: () -> (DexSetting) query;\n  getOwner: () -> (principal) query;\n  getQuotes: (KInterval) -> (vec KBar) query;\n  getTxAccount: (Address) -> (Account__1, TxAccount, Nonce, Txid__1) query;\n  ictc_TM: () -> (text) query;\n  ictc_addAdmin: (principal) -> ();\n  ictc_appendTT: (opt blob, Toid__3, opt Ttid__2, principal, CallType__1,\n   vec Ttid__2) -> (Ttid__2);\n  ictc_blockTO: (Toid__3) -> (opt Toid__3);\n  ictc_clearLog: (opt int, bool) -> ();\n  ictc_clearTTPool: () -> ();\n  ictc_completeTO: (Toid__3, OrderStatus) -> (bool);\n  ictc_doneTO: (Toid__3, OrderStatus, bool) -> (bool);\n  ictc_doneTT: (Toid__3, Ttid__2, bool) -> (opt Ttid__2);\n  ictc_getAdmins: () -> (vec principal) query;\n  ictc_getCalleeStatus: (principal) -> (opt CalleeStatus) query;\n  ictc_getPool: () ->\n   (record {\n      toPool: record {\n                items: vec record {\n                             Toid__3;\n                             opt Order__1;\n                           };\n                total: nat;\n              };\n      ttPool: record {\n                items: vec record {\n                             Ttid__2;\n                             Task__2;\n                           };\n                total: nat;\n              };\n    }) query;\n  ictc_getTO: (Toid__3) -> (opt Order__1) query;\n  ictc_getTOCount: () -> (nat) query;\n  ictc_getTOPool: () -> (vec record {\n                               Toid__3;\n                               opt Order__1;\n                             }) query;\n  ictc_getTOs: (nat, nat) ->\n   (record {\n      data: vec record {\n                  Toid__3;\n                  Order__1;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_getTT: (Ttid__2) -> (opt TaskEvent) query;\n  ictc_getTTByTO: (Toid__3) -> (vec TaskEvent) query;\n  ictc_getTTErrors: (nat, nat) ->\n   (record {\n      data: vec record {\n                  nat;\n                  ErrorLog;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_getTTPool: () -> (vec record {\n                               Ttid__2;\n                               Task__2;\n                             }) query;\n  ictc_getTTs: (nat, nat) ->\n   (record {\n      data: vec record {\n                  Ttid__2;\n                  TaskEvent;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_redoTT: (Toid__3, Ttid__2) -> (opt Ttid__2);\n  ictc_removeAdmin: (principal) -> ();\n  ictc_runTO: (Toid__3) -> (opt OrderStatus);\n  ictc_runTT: () -> (bool);\n  info: () ->\n   (record {\n      decimals: nat8;\n      name: text;\n      owner: principal;\n      paused: bool;\n      setting: DexSetting;\n      token0: TokenInfo;\n      token1: TokenInfo;\n      version: text;\n    }) query;\n  init: () -> ();\n  latestFilled: () ->\n   (vec record {\n          Timestamp__4;\n          Txid__1;\n          OrderFilled__1;\n          OrderSide;\n        }) query;\n  level10: () -> (nat,\n   record {\n     ask: vec PriceResponse;\n     bid: vec PriceResponse;\n   }) query;\n  level100: () -> (nat,\n   record {\n     ask: vec PriceResponse;\n     bid: vec PriceResponse;\n   }) query;\n  liquidity: (opt Address) -> (Liquidity) query;\n  makerRebate: (Address) -> (float64, float64) query;\n  name: () -> (text) query;\n  orderExpirationDuration: () -> (int) query;\n  pending: (opt Address, opt ListPage, opt ListSize) -> (TrieList) query;\n  pendingAll: (opt ListPage, opt ListSize) -> (TrieList) query;\n  pendingCount: () -> (nat) query;\n  prepare: (Address) -> (TxAccount, Nonce) query;\n  recovery: (BackupResponse) -> (bool);\n  removeVipMaker: (Address) -> ();\n  setOrderFail: (text) -> (bool);\n  setPause: (bool, opt Time) -> (bool);\n  setUpgradeMode: (variant {\n                     All;\n                     Base;\n                   }) -> ();\n  setVipMaker: (Address, nat) -> ();\n  stats: () ->\n   (record {\n      change24h: float64;\n      price: float64;\n      totalVol: Vol;\n      vol24h: Vol;\n    }) query;\n  status: (Address, Nonce) -> (OrderStatusResponse) query;\n  statusByTxid: (Txid__1) -> (OrderStatusResponse) query;\n  sync: () -> ();\n  sysMode: () -> (record {\n                    mode: SysMode;\n                    openingTime: Time;\n                  }) query;\n  ta_ambassador: (Address) -> (bool, text, nat, Vol) query;\n  ta_description: () -> (text) query;\n  ta_getReferrer: (Address) -> (opt record {\n                                      Address;\n                                      bool;\n                                    }) query;\n  ta_setDescription: (text) -> ();\n  ta_setReferrer: (Address, opt text, opt Sa) -> (bool);\n  ta_stats: (opt text) -> (nat, nat, Vol) query;\n  timerStart: (nat) -> ();\n  timerStop: () -> ();\n  token0: () -> (TokenType, opt TokenStd) query;\n  token1: () -> (TokenType, opt TokenStd) query;\n  tpsStats: () -> (nat, float64, nat, nat, int, int) query;\n  trade: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa,\n   opt Data) -> (TradingResult);\n  tradeMKT: (DebitToken, Amount__1, opt Nonce, opt Sa, opt Data) ->\n   (TradingResult);\n  tradeMKT_b: (DebitToken, Amount__1, opt nat, opt Nonce, opt Sa, opt Data,\n   opt record {\n         broker: principal;\n         rate: float64;\n       }) -> (TradingResult);\n  trade_b: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa, opt Data,\n   opt record {\n         broker: principal;\n         rate: float64;\n       }) -> (TradingResult);\n  userCount: () -> (nat) query;\n  version: () -> (text) query;\n  wallet_receive: () -> ();\n  withdraw_cycles: (nat) -> ();\n}\n",
                    "javascript": "export const idlFactory = ({ IDL }) => {\n  const List = IDL.Rec();\n  const List_1 = IDL.Rec();\n  const Amount__1 = IDL.Nat;\n  const Time = IDL.Int;\n  const IDOSetting = IDL.Record({\n    'IDOSupplies' : IDL.Vec(\n      IDL.Record({ 'supply' : Amount__1, 'price' : IDL.Float64 })\n    ),\n    'IDOWhitelistEnabled' : IDL.Bool,\n    'IDOOpeningTime' : Time,\n    'IDOTotalSupply' : IDL.Record({\n      'IDOSupply' : Amount__1,\n      'percentageOfTotal' : IDL.Float64,\n    }),\n    'IDOEnabled' : IDL.Bool,\n    'IDOLimitPerAccount' : Amount__1,\n    'IDOClosingTime' : Time,\n  });\n  const IDORequirement = IDL.Record({\n    'threshold' : IDL.Float64,\n    'pairs' : IDL.Vec(\n      IDL.Record({ 'pair' : IDL.Principal, 'token1ToUsdRatio' : IDL.Float64 })\n    ),\n  });\n  const Address = IDL.Text;\n  const Participant = IDL.Record({\n    'updatedTime' : Time,\n    'used' : Amount__1,\n    'limit' : Amount__1,\n    'historyVol' : IDL.Float64,\n  });\n  const Sa = IDL.Vec(IDL.Nat8);\n  const BackupRequest = IDL.Variant({\n    'timeSortedTxids' : IDL.Null,\n    'icdex_failedOrders' : IDL.Null,\n    'icdex_makers' : IDL.Null,\n    'drc205Data' : IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null }),\n    'icdex_vols' : IDL.Null,\n    'icdex_pendingOrders' : IDL.Null,\n    'ictcTaskCallbackEvents' : IDL.Null,\n    'otherData' : IDL.Null,\n    'icdex_dip20Balances' : IDL.Null,\n    'clearingTxids' : IDL.Null,\n    'icdex_nonces' : IDL.Null,\n    'competitors' : IDL.Null,\n    'icdex_klines2' : IDL.Null,\n    'sagaData' : IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null }),\n    'icdex_orders' : IDL.Null,\n    'icdex_orderBook' : IDL.Null,\n    'rounds' : IDL.Null,\n    'traderReferrers' : IDL.Null,\n    'traderReferrerTemps' : IDL.Null,\n    'ambassadors' : IDL.Null,\n  });\n  const Txid__3 = IDL.Vec(IDL.Nat8);\n  const TradingStatus = IDL.Variant({\n    'Todo' : IDL.Null,\n    'Closed' : IDL.Null,\n    'Cancelled' : IDL.Null,\n    'Pending' : IDL.Null,\n  });\n  const Toid = IDL.Nat;\n  const Txid = IDL.Vec(IDL.Nat8);\n  const OrderType__1 = IDL.Variant({\n    'FAK' : IDL.Null,\n    'FOK' : IDL.Null,\n    'LMT' : IDL.Null,\n    'MKT' : IDL.Null,\n  });\n  const BalanceChange = IDL.Variant({\n    'DebitRecord' : IDL.Nat,\n    'CreditRecord' : IDL.Nat,\n    'NoChange' : IDL.Null,\n  });\n  const OrderFilled = IDL.Record({\n    'time' : Time,\n    'token0Value' : BalanceChange,\n    'counterparty' : Txid,\n    'token1Value' : BalanceChange,\n  });\n  const AccountId__1 = IDL.Vec(IDL.Nat8);\n  const Quantity = IDL.Nat;\n  const Amount = IDL.Nat;\n  const Price = IDL.Nat;\n  const OrderPrice__1 = IDL.Record({\n    'quantity' : IDL.Variant({\n      'Buy' : IDL.Tuple(Quantity, Amount),\n      'Sell' : Quantity,\n    }),\n    'price' : Price,\n  });\n  const TradingOrder = IDL.Record({\n    'fee' : IDL.Record({ 'fee0' : IDL.Int, 'fee1' : IDL.Int }),\n    'gas' : IDL.Record({ 'gas0' : IDL.Nat, 'gas1' : IDL.Nat }),\n    'status' : TradingStatus,\n    'toids' : IDL.Vec(Toid),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'txid' : Txid,\n    'icrc1Account' : IDL.Opt(\n      IDL.Record({\n        'owner' : IDL.Principal,\n        'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      })\n    ),\n    'orderType' : OrderType__1,\n    'filled' : IDL.Vec(OrderFilled),\n    'expiration' : Time,\n    'nonce' : IDL.Nat,\n    'account' : AccountId__1,\n    'remaining' : OrderPrice__1,\n    'index' : IDL.Nat,\n    'orderPrice' : OrderPrice__1,\n    'refund' : IDL.Tuple(IDL.Nat, IDL.Nat, IDL.Nat),\n  });\n  const AccountId__2 = IDL.Vec(IDL.Nat8);\n  const Setting = IDL.Record({\n    'MAX_STORAGE_TRIES' : IDL.Nat,\n    'EN_DEBUG' : IDL.Bool,\n    'MAX_CACHE_NUMBER_PER' : IDL.Nat,\n    'MAX_CACHE_TIME' : IDL.Nat,\n  });\n  const Status = IDL.Variant({\n    'Failed' : IDL.Null,\n    'Cancelled' : IDL.Null,\n    'PartiallyCompletedAndCancelled' : IDL.Null,\n    'Completed' : IDL.Null,\n    'Pending' : IDL.Null,\n  });\n  const Shares = IDL.Nat;\n  const ShareChange = IDL.Variant({\n    'Burn' : Shares,\n    'Mint' : Shares,\n    'NoChange' : IDL.Null,\n  });\n  const BalanceChange__1 = IDL.Variant({\n    'DebitRecord' : IDL.Nat,\n    'CreditRecord' : IDL.Nat,\n    'NoChange' : IDL.Null,\n  });\n  const Data__1 = IDL.Vec(IDL.Nat8);\n  const Txid__2 = IDL.Vec(IDL.Nat8);\n  const TokenType__1 = IDL.Variant({\n    'Icp' : IDL.Null,\n    'Token' : IDL.Principal,\n    'Cycles' : IDL.Null,\n  });\n  const Nonce__1 = IDL.Nat;\n  const OperationType = IDL.Variant({\n    'AddLiquidity' : IDL.Null,\n    'Swap' : IDL.Null,\n    'Claim' : IDL.Null,\n    'RemoveLiquidity' : IDL.Null,\n  });\n  const AccountId = IDL.Vec(IDL.Nat8);\n  const CyclesWallet = IDL.Principal;\n  const TxnRecord__1 = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const DRC205Data = IDL.Record({\n    'accountLastTxns' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Vec(Txid__3), IDL.Vec(Txid__3)))\n    ),\n    'setting' : Setting,\n    'globalLastTxns' : IDL.Tuple(IDL.Vec(Txid__3), IDL.Vec(Txid__3)),\n    'storagePool' : IDL.Vec(IDL.Tuple(Txid__3, TxnRecord__1, IDL.Nat)),\n    'globalTxns' : IDL.Tuple(\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n    ),\n    'txnRecords' : IDL.Vec(IDL.Tuple(Txid__3, TxnRecord__1)),\n  });\n  const Vol__1 = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const Ttid = IDL.Nat;\n  const FeeBalance = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const Timestamp__1 = IDL.Nat;\n  const PriceWeighted = IDL.Record({\n    'updateTime' : Timestamp__1,\n    'token1TimeWeighted' : IDL.Nat,\n    'token0TimeWeighted' : IDL.Nat,\n  });\n  const Nonce__2 = IDL.Nat;\n  const CompCapital = IDL.Record({\n    'total' : IDL.Float64,\n    'value0' : IDL.Nat,\n    'value1' : IDL.Nat,\n  });\n  const CompResult = IDL.Record({\n    'vol' : Vol__1,\n    'status' : IDL.Variant({ 'Active' : IDL.Null, 'Dropout' : IDL.Null }),\n    'icrc1Account' : IDL.Record({\n      'owner' : IDL.Principal,\n      'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n    'capital' : CompCapital,\n    'assetValue' : IDL.Opt(CompCapital),\n  });\n  const KInterval = IDL.Nat;\n  const Vol__2 = IDL.Record({ 'value0' : IDL.Nat, 'value1' : IDL.Nat });\n  const Timestamp = IDL.Nat;\n  const KBar = IDL.Record({\n    'kid' : IDL.Nat,\n    'low' : IDL.Nat,\n    'vol' : Vol__2,\n    'high' : IDL.Nat,\n    'close' : IDL.Nat,\n    'open' : IDL.Nat,\n    'updatedTs' : Timestamp,\n  });\n  const Toid__2 = IDL.Nat;\n  const OrderStatus = IDL.Variant({\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Recovered' : IDL.Null,\n    'Compensating' : IDL.Null,\n    'Blocking' : IDL.Null,\n  });\n  const Status__3 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Ttid__1 = IDL.Nat;\n  const Toid__1 = IDL.Nat;\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const Timestamp__2 = IDL.Nat64;\n  const TransferArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(Subaccount),\n    'created_at_time' : IDL.Opt(Timestamp__2),\n    'amount' : IDL.Nat,\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Principal,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n  });\n  const To = IDL.Text;\n  const Amount__2 = IDL.Nat;\n  const Nonce__3 = IDL.Nat;\n  const Sa__1 = IDL.Vec(IDL.Nat8);\n  const Data__2 = IDL.Vec(IDL.Nat8);\n  const From = IDL.Text;\n  const Spender = IDL.Text;\n  const Address__1 = IDL.Text;\n  const BlobFill = IDL.Variant({\n    'AutoFill' : IDL.Null,\n    'ManualFill' : IDL.Vec(IDL.Nat8),\n  });\n  const Timeout = IDL.Nat32;\n  const Decider = IDL.Text;\n  const ExecuteType = IDL.Variant({\n    'fallback' : IDL.Null,\n    'send' : IDL.Nat,\n    'sendAll' : IDL.Null,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const ICP = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Memo = IDL.Nat64;\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Timestamp__3 = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const TransferArgs__1 = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : ICP,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Timestamp__3),\n    'amount' : ICP,\n  });\n  const CallType = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : Account,\n      'icrc1_transfer' : TransferArgs,\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : ApproveArgs,\n      'icrc2_transfer_from' : TransferFromArgs,\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Principal, IDL.Nat),\n      'dip20Send' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Nat),\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : IDL.Tuple(IDL.Principal, IDL.Principal, IDL.Nat),\n      'approve' : IDL.Tuple(IDL.Principal, IDL.Nat),\n      'balanceOf' : IDL.Principal,\n      'transfer' : IDL.Tuple(IDL.Principal, IDL.Nat),\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Tuple(\n        IDL.Vec(To),\n        IDL.Vec(Amount__2),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'approve' : IDL.Tuple(\n        Spender,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'balanceOf' : Address__1,\n      'txnRecord' : BlobFill,\n      'lockTransfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'dropAccount' : IDL.Opt(Sa__1),\n      'executeTransfer' : IDL.Tuple(\n        BlobFill,\n        ExecuteType,\n        IDL.Opt(To),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'lockTransferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : AccountBalanceArgs,\n      'transfer' : TransferArgs__1,\n    }),\n    'ICTokens' : IDL.Variant({\n      'burn' : IDL.Tuple(\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'mint' : IDL.Tuple(\n        Address__1,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    '__skip' : IDL.Null,\n  });\n  const Attempts = IDL.Nat;\n  const Callee__1 = IDL.Principal;\n  const Compensation = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Task__2 = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Ttid__2 = IDL.Nat;\n  const SagaTask = IDL.Record({\n    'status' : Status__3,\n    'comp' : IDL.Opt(Compensation),\n    'task' : Task__2,\n    'ttid' : Ttid__2,\n  });\n  List_1.fill(IDL.Opt(IDL.Tuple(SagaTask, List_1)));\n  const Tcid = IDL.Nat;\n  const CompTask = IDL.Record({\n    'status' : Status__3,\n    'comp' : Compensation,\n    'tcid' : Tcid,\n    'forTtid' : Ttid__2,\n  });\n  List.fill(IDL.Opt(IDL.Tuple(CompTask, List)));\n  const CompStrategy = IDL.Variant({\n    'Backward' : IDL.Null,\n    'Forward' : IDL.Null,\n  });\n  const Order = IDL.Record({\n    'status' : OrderStatus,\n    'tasks' : List_1,\n    'callbackStatus' : IDL.Opt(Status__3),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Text,\n    'comps' : List,\n    'time' : Time,\n    'compStrategy' : CompStrategy,\n    'allowPushing' : IDL.Variant({ 'Opening' : IDL.Null, 'Closed' : IDL.Null }),\n  });\n  const Task__1 = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Callee = IDL.Principal;\n  const CalleeStatus = IDL.Record({\n    'continuousFailure' : IDL.Nat,\n    'successCount' : IDL.Nat,\n    'failureCount' : IDL.Nat,\n  });\n  const Status__1 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Duration = IDL.Nat64;\n  const TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Null,\n    'TooOld' : IDL.Record({ 'allowed_window_nanos' : Duration }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : IDL.Nat }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const TxReceipt = IDL.Variant({\n    'Ok' : IDL.Nat,\n    'Err' : IDL.Variant({\n      'InsufficientAllowance' : IDL.Null,\n      'InsufficientBalance' : IDL.Null,\n      'ErrorOperationStyle' : IDL.Null,\n      'Unauthorized' : IDL.Null,\n      'LedgerTrap' : IDL.Null,\n      'ErrorTo' : IDL.Null,\n      'Other' : IDL.Text,\n      'BlockUsed' : IDL.Null,\n      'AmountTooSmall' : IDL.Null,\n    }),\n  });\n  const Txid__4 = IDL.Vec(IDL.Nat8);\n  const TxnResult = IDL.Variant({\n    'ok' : Txid__4,\n    'err' : IDL.Record({\n      'code' : IDL.Variant({\n        'NonceError' : IDL.Null,\n        'InsufficientGas' : IDL.Null,\n        'InsufficientAllowance' : IDL.Null,\n        'UndefinedError' : IDL.Null,\n        'InsufficientBalance' : IDL.Null,\n        'NoLockedTransfer' : IDL.Null,\n        'DuplicateExecutedTransfer' : IDL.Null,\n        'LockedTransferExpired' : IDL.Null,\n      }),\n      'message' : IDL.Text,\n    }),\n  });\n  const Gas = IDL.Variant({\n    'token' : IDL.Nat,\n    'cycles' : IDL.Nat,\n    'noFee' : IDL.Null,\n  });\n  const AccountId__3 = IDL.Vec(IDL.Nat8);\n  const Time__1 = IDL.Int;\n  const Operation = IDL.Variant({\n    'approve' : IDL.Record({ 'allowance' : IDL.Nat }),\n    'lockTransfer' : IDL.Record({\n      'locked' : IDL.Nat,\n      'expiration' : Time__1,\n      'decider' : AccountId__3,\n    }),\n    'transfer' : IDL.Record({\n      'action' : IDL.Variant({\n        'burn' : IDL.Null,\n        'mint' : IDL.Null,\n        'send' : IDL.Null,\n      }),\n    }),\n    'executeTransfer' : IDL.Record({\n      'fallback' : IDL.Nat,\n      'lockedTxid' : Txid__4,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'to' : AccountId__3,\n    'value' : IDL.Nat,\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from' : AccountId__3,\n    'operation' : Operation,\n  });\n  const TxnRecord__2 = IDL.Record({\n    'gas' : Gas,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'transaction' : Transaction,\n    'txid' : Txid__4,\n    'nonce' : IDL.Nat,\n    'timestamp' : Time__1,\n    'caller' : AccountId__3,\n    'index' : IDL.Nat,\n  });\n  const TransferError__1 = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const BlockIndex = IDL.Nat64;\n  const TransferError__2 = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : ICP }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : ICP }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError__2,\n  });\n  const Receipt = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : IDL.Nat,\n      'icrc1_transfer' : IDL.Variant({ 'Ok' : IDL.Nat, 'Err' : TransferError }),\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : IDL.Variant({ 'Ok' : IDL.Nat, 'Err' : ApproveError }),\n      'icrc2_transfer_from' : IDL.Variant({\n        'Ok' : IDL.Nat,\n        'Err' : TransferFromError,\n      }),\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Null,\n      'dip20Send' : IDL.Null,\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : TxReceipt,\n      'approve' : TxReceipt,\n      'balanceOf' : IDL.Nat,\n      'transfer' : TxReceipt,\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Vec(TxnResult),\n      'transferFrom' : TxnResult,\n      'approve' : TxnResult,\n      'balanceOf' : Amount__2,\n      'txnRecord' : IDL.Opt(TxnRecord__2),\n      'lockTransfer' : TxnResult,\n      'transfer' : TxnResult,\n      'dropAccount' : IDL.Null,\n      'executeTransfer' : TxnResult,\n      'lockTransferFrom' : TxnResult,\n    }),\n    'ICRC1New' : IDL.Variant({\n      'icrc1_balance_of' : IDL.Nat,\n      'icrc1_transfer' : IDL.Variant({\n        'Ok' : IDL.Nat,\n        'Err' : TransferError__1,\n      }),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : ICP,\n      'transfer' : TransferResult,\n    }),\n    'ICTokens' : IDL.Variant({ 'burn' : TxnResult, 'mint' : TxnResult }),\n    '__skip' : IDL.Null,\n  });\n  const ErrorCode = IDL.Variant({\n    'canister_error' : IDL.Null,\n    'call_error' : IDL.Record({ 'err_code' : IDL.Nat32 }),\n    'system_transient' : IDL.Null,\n    'future' : IDL.Nat32,\n    'canister_reject' : IDL.Null,\n    'destination_invalid' : IDL.Null,\n    'system_fatal' : IDL.Null,\n  });\n  const Err = IDL.Record({ 'code' : ErrorCode, 'message' : IDL.Text });\n  const TaskResult = IDL.Tuple(Status__1, IDL.Opt(Receipt), IDL.Opt(Err));\n  const ErrorLog = IDL.Record({\n    'result' : IDL.Opt(TaskResult),\n    'time' : Time,\n    'ttid' : Ttid__1,\n    'callee' : IDL.Opt(Callee__1),\n  });\n  const Status__2 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Task = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const TaskEvent = IDL.Record({\n    'result' : TaskResult,\n    'callbackStatus' : IDL.Opt(Status__2),\n    'task' : Task,\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'ttid' : Ttid__1,\n    'attempts' : Attempts,\n    'txHash' : IDL.Vec(IDL.Nat8),\n  });\n  const SagaData = IDL.Record({\n    'orders' : IDL.Vec(IDL.Tuple(Toid__2, Order)),\n    'autoClearTimeout' : IDL.Int,\n    'aliveOrders' : IDL.Vec(IDL.Tuple(Toid__2, Time)),\n    'index' : IDL.Nat,\n    'actuator' : IDL.Record({\n      'tasks' : IDL.Tuple(\n        IDL.Vec(IDL.Tuple(Ttid, Task__1)),\n        IDL.Vec(IDL.Tuple(Ttid, Task__1)),\n      ),\n      'callees' : IDL.Vec(IDL.Tuple(Callee, CalleeStatus)),\n      'errorLogs' : IDL.Vec(IDL.Tuple(IDL.Nat, ErrorLog)),\n      'taskLogs' : IDL.Vec(IDL.Tuple(Ttid, TaskEvent)),\n      'index' : IDL.Nat,\n      'firstErrIndex' : IDL.Nat,\n      'errIndex' : IDL.Nat,\n      'firstIndex' : IDL.Nat,\n    }),\n    'taskEvents' : IDL.Vec(IDL.Tuple(Toid__2, IDL.Vec(Ttid))),\n    'firstIndex' : IDL.Nat,\n  });\n  const RoundItem = IDL.Record({\n    'end' : Time,\n    'content' : IDL.Text,\n    'isSettled' : IDL.Bool,\n    'name' : IDL.Text,\n    'minCapital' : IDL.Nat,\n    'start' : Time,\n    'closedPrice' : IDL.Opt(IDL.Float64),\n    'quoteToken' : IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n  });\n  const AmbassadorData = IDL.Tuple(IDL.Text, IDL.Nat, Vol__1);\n  const BackupResponse = IDL.Variant({\n    'timeSortedTxids' : IDL.Tuple(\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n    ),\n    'icdex_failedOrders' : IDL.Vec(IDL.Tuple(Txid__3, TradingOrder)),\n    'icdex_makers' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Nat, IDL.Principal))\n    ),\n    'drc205Data' : DRC205Data,\n    'icdex_vols' : IDL.Vec(IDL.Tuple(AccountId__2, Vol__1)),\n    'icdex_pendingOrders' : IDL.Vec(IDL.Tuple(AccountId__2, IDL.Vec(Txid__3))),\n    'ictcTaskCallbackEvents' : IDL.Vec(IDL.Tuple(Ttid, Time)),\n    'otherData' : IDL.Record({\n      'icdex_totalFee' : FeeBalance,\n      'icdex_totalVol' : Vol__1,\n      'activeRound' : IDL.Nat,\n      'icdex_index' : IDL.Nat,\n      'icdex_lastPrice' : OrderPrice__1,\n      'icdex_priceWeighted' : PriceWeighted,\n      'taDescription' : IDL.Text,\n    }),\n    'icdex_dip20Balances' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Principal, IDL.Nat))\n    ),\n    'clearingTxids' : IDL.Vec(Txid__3),\n    'icdex_nonces' : IDL.Vec(IDL.Tuple(AccountId__2, Nonce__2)),\n    'competitors' : IDL.Vec(\n      IDL.Tuple(IDL.Nat, IDL.Vec(IDL.Tuple(AccountId__2, CompResult)))\n    ),\n    'icdex_klines2' : IDL.Vec(\n      IDL.Tuple(KInterval, IDL.Tuple(IDL.Vec(KBar), IDL.Vec(KBar)))\n    ),\n    'sagaData' : SagaData,\n    'icdex_orders' : IDL.Vec(IDL.Tuple(Txid__3, TradingOrder)),\n    'icdex_orderBook' : IDL.Record({\n      'ask' : IDL.Vec(IDL.Tuple(Txid__3, OrderPrice__1)),\n      'bid' : IDL.Vec(IDL.Tuple(Txid__3, OrderPrice__1)),\n    }),\n    'rounds' : IDL.Vec(IDL.Tuple(IDL.Nat, RoundItem)),\n    'traderReferrers' : IDL.Vec(IDL.Tuple(AccountId__2, AccountId__2)),\n    'traderReferrerTemps' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(AccountId__2, IDL.Text, Time))\n    ),\n    'ambassadors' : IDL.Vec(IDL.Tuple(AccountId__2, AmbassadorData)),\n  });\n  const Nonce = IDL.Nat;\n  const Txid__1 = IDL.Vec(IDL.Nat8);\n  const Subaccount__1 = IDL.Vec(IDL.Nat8);\n  const Account__1 = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount__1),\n  });\n  const Vol = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const CompCapital__1 = IDL.Record({\n    'total' : IDL.Float64,\n    'value0' : IDL.Nat,\n    'value1' : IDL.Nat,\n  });\n  const CompResult__1 = IDL.Record({\n    'vol' : Vol,\n    'status' : IDL.Variant({ 'Active' : IDL.Null, 'Dropout' : IDL.Null }),\n    'icrc1Account' : Account__1,\n    'capital' : CompCapital__1,\n    'assetValue' : IDL.Opt(CompCapital__1),\n  });\n  const ListPage = IDL.Nat;\n  const ListSize = IDL.Nat;\n  const AccountId__4 = IDL.Vec(IDL.Nat8);\n  const RoundItem__1 = IDL.Record({\n    'end' : Time,\n    'content' : IDL.Text,\n    'isSettled' : IDL.Bool,\n    'name' : IDL.Text,\n    'minCapital' : IDL.Nat,\n    'start' : Time,\n    'closedPrice' : IDL.Opt(IDL.Float64),\n    'quoteToken' : IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n  });\n  const IcpE8s = IDL.Nat;\n  const DexConfig = IDL.Record({\n    'MAX_TPS' : IDL.Opt(IDL.Nat),\n    'ICTC_RUN_INTERVAL' : IDL.Opt(IDL.Nat),\n    'MAKER_BONUS_RATE' : IDL.Opt(IDL.Nat),\n    'MAX_PENDINGS' : IDL.Opt(IDL.Nat),\n    'ORDER_EXPIRATION_DURATION' : IDL.Opt(IDL.Int),\n    'TRADING_FEE' : IDL.Opt(IDL.Nat),\n    'UNIT_SIZE' : IDL.Opt(IDL.Nat),\n    'STORAGE_INTERVAL' : IDL.Opt(IDL.Nat),\n    'ICP_FEE' : IDL.Opt(IcpE8s),\n  });\n  const Config = IDL.Record({\n    'MAX_STORAGE_TRIES' : IDL.Opt(IDL.Nat),\n    'EN_DEBUG' : IDL.Opt(IDL.Bool),\n    'MAX_CACHE_NUMBER_PER' : IDL.Opt(IDL.Nat),\n    'MAX_CACHE_TIME' : IDL.Opt(IDL.Nat),\n  });\n  const TokenType = IDL.Variant({\n    'Icp' : IDL.Null,\n    'Token' : IDL.Principal,\n    'Cycles' : IDL.Null,\n  });\n  const TokenStd__1 = IDL.Variant({\n    'dft' : IDL.Null,\n    'ext' : IDL.Null,\n    'icp' : IDL.Null,\n    'other' : IDL.Text,\n    'cycles' : IDL.Null,\n    'ledger' : IDL.Null,\n    'icrc1' : IDL.Null,\n    'dip20' : IDL.Null,\n    'drc20' : IDL.Null,\n  });\n  const DexInfo = IDL.Record({\n    'feeRate' : IDL.Float64,\n    'mmType' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'token0' : IDL.Tuple(TokenType, TokenStd__1),\n    'token1' : IDL.Tuple(TokenType, TokenStd__1),\n    'pairName' : IDL.Text,\n    'dexName' : IDL.Text,\n    'canisterId' : IDL.Principal,\n  });\n  const Address__2 = IDL.Text;\n  const TxnRecord__3 = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const Txid__5 = IDL.Vec(IDL.Nat8);\n  const DRC207Support = IDL.Record({\n    'timer' : IDL.Record({\n      'interval_seconds' : IDL.Opt(IDL.Nat),\n      'enable' : IDL.Bool,\n    }),\n    'monitorable_by_self' : IDL.Bool,\n    'monitorable_by_blackhole' : IDL.Record({\n      'canister_id' : IDL.Opt(IDL.Principal),\n      'allowed' : IDL.Bool,\n    }),\n    'cycles_receivable' : IDL.Bool,\n  });\n  const FeeStatus = IDL.Record({\n    'feeRate' : IDL.Float64,\n    'feeBalance' : FeeBalance,\n    'totalFee' : FeeBalance,\n  });\n  const DexSetting = IDL.Record({\n    'MAX_TPS' : IDL.Nat,\n    'ICTC_RUN_INTERVAL' : IDL.Nat,\n    'MAKER_BONUS_RATE' : IDL.Nat,\n    'MAX_PENDINGS' : IDL.Nat,\n    'TRADING_FEE' : IDL.Nat,\n    'UNIT_SIZE' : IDL.Nat,\n    'STORAGE_INTERVAL' : IDL.Nat,\n    'ICP_FEE' : IcpE8s,\n  });\n  const TxAccount = IDL.Text;\n  const Toid__3 = IDL.Nat;\n  const CallType__1 = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : Account,\n      'icrc1_transfer' : TransferArgs,\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : ApproveArgs,\n      'icrc2_transfer_from' : TransferFromArgs,\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Principal, IDL.Nat),\n      'dip20Send' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Nat),\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : IDL.Tuple(IDL.Principal, IDL.Principal, IDL.Nat),\n      'approve' : IDL.Tuple(IDL.Principal, IDL.Nat),\n      'balanceOf' : IDL.Principal,\n      'transfer' : IDL.Tuple(IDL.Principal, IDL.Nat),\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Tuple(\n        IDL.Vec(To),\n        IDL.Vec(Amount__2),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'approve' : IDL.Tuple(\n        Spender,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'balanceOf' : Address__1,\n      'txnRecord' : BlobFill,\n      'lockTransfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'dropAccount' : IDL.Opt(Sa__1),\n      'executeTransfer' : IDL.Tuple(\n        BlobFill,\n        ExecuteType,\n        IDL.Opt(To),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'lockTransferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : AccountBalanceArgs,\n      'transfer' : TransferArgs__1,\n    }),\n    'ICTokens' : IDL.Variant({\n      'burn' : IDL.Tuple(\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'mint' : IDL.Tuple(\n        Address__1,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    '__skip' : IDL.Null,\n  });\n  const Order__1 = IDL.Record({\n    'status' : OrderStatus,\n    'tasks' : List_1,\n    'callbackStatus' : IDL.Opt(Status__3),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Text,\n    'comps' : List,\n    'time' : Time,\n    'compStrategy' : CompStrategy,\n    'allowPushing' : IDL.Variant({ 'Opening' : IDL.Null, 'Closed' : IDL.Null }),\n  });\n  const TokenSymbol = IDL.Text;\n  const TokenStd = IDL.Variant({\n    'dft' : IDL.Null,\n    'ext' : IDL.Null,\n    'icp' : IDL.Null,\n    'other' : IDL.Text,\n    'cycles' : IDL.Null,\n    'ledger' : IDL.Null,\n    'icrc1' : IDL.Null,\n    'dip20' : IDL.Null,\n    'drc20' : IDL.Null,\n  });\n  const TokenInfo = IDL.Tuple(IDL.Principal, TokenSymbol, TokenStd);\n  const Timestamp__4 = IDL.Nat;\n  const OrderFilled__1 = IDL.Record({\n    'time' : Time,\n    'token0Value' : BalanceChange,\n    'counterparty' : Txid,\n    'token1Value' : BalanceChange,\n  });\n  const OrderSide = IDL.Variant({ 'Buy' : IDL.Null, 'Sell' : IDL.Null });\n  const PriceResponse = IDL.Record({ 'quantity' : IDL.Nat, 'price' : IDL.Nat });\n  const Liquidity = IDL.Record({\n    'vol' : Vol__1,\n    'shares' : Amount,\n    'shareWeighted' : IDL.Record({\n      'updateTime' : Timestamp__1,\n      'shareTimeWeighted' : IDL.Nat,\n    }),\n    'unitValue' : IDL.Tuple(Amount, Amount),\n    'value0' : Amount,\n    'value1' : Amount,\n    'priceWeighted' : PriceWeighted,\n    'swapCount' : IDL.Nat64,\n  });\n  const TradingOrder__1 = IDL.Record({\n    'fee' : IDL.Record({ 'fee0' : IDL.Int, 'fee1' : IDL.Int }),\n    'gas' : IDL.Record({ 'gas0' : IDL.Nat, 'gas1' : IDL.Nat }),\n    'status' : TradingStatus,\n    'toids' : IDL.Vec(Toid),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'txid' : Txid,\n    'icrc1Account' : IDL.Opt(\n      IDL.Record({\n        'owner' : IDL.Principal,\n        'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      })\n    ),\n    'orderType' : OrderType__1,\n    'filled' : IDL.Vec(OrderFilled),\n    'expiration' : Time,\n    'nonce' : IDL.Nat,\n    'account' : AccountId__1,\n    'remaining' : OrderPrice__1,\n    'index' : IDL.Nat,\n    'orderPrice' : OrderPrice__1,\n    'refund' : IDL.Tuple(IDL.Nat, IDL.Nat, IDL.Nat),\n  });\n  const TrieList = IDL.Record({\n    'total' : IDL.Nat,\n    'data' : IDL.Vec(IDL.Tuple(Txid__1, TradingOrder__1)),\n    'totalPage' : IDL.Nat,\n  });\n  const TxnRecord = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const OrderStatusResponse = IDL.Variant({\n    'Failed' : TradingOrder,\n    'None' : IDL.Null,\n    'Completed' : TxnRecord,\n    'Pending' : TradingOrder,\n  });\n  const SysMode = IDL.Variant({\n    'DisabledTrading' : IDL.Null,\n    'ReadOnly' : IDL.Null,\n    'ClosingOnly' : IDL.Null,\n    'GeneralTrading' : IDL.Null,\n  });\n  const OrderPrice = IDL.Record({\n    'quantity' : IDL.Variant({\n      'Buy' : IDL.Tuple(Quantity, Amount),\n      'Sell' : Quantity,\n    }),\n    'price' : Price,\n  });\n  const OrderType = IDL.Variant({\n    'FAK' : IDL.Null,\n    'FOK' : IDL.Null,\n    'LMT' : IDL.Null,\n    'MKT' : IDL.Null,\n  });\n  const PeriodNs = IDL.Int;\n  const Data = IDL.Vec(IDL.Nat8);\n  const TradingResult = IDL.Variant({\n    'ok' : IDL.Record({\n      'status' : TradingStatus,\n      'txid' : Txid,\n      'filled' : IDL.Vec(OrderFilled),\n    }),\n    'err' : IDL.Record({\n      'code' : IDL.Variant({\n        'NonceError' : IDL.Null,\n        'InvalidAmount' : IDL.Null,\n        'UndefinedError' : IDL.Null,\n        'UnacceptableVolatility' : IDL.Null,\n        'TransactionBlocking' : IDL.Null,\n        'InsufficientBalance' : IDL.Null,\n        'TransferException' : IDL.Null,\n      }),\n      'message' : IDL.Text,\n    }),\n  });\n  const DebitToken = IDL.Principal;\n  return IDL.Service({\n    'IDO_config' : IDL.Func([IDOSetting], [], []),\n    'IDO_getConfig' : IDL.Func(\n        [],\n        [IDL.Opt(IDL.Principal), IDOSetting, IDL.Opt(IDORequirement)],\n        ['query'],\n      ),\n    'IDO_qualification' : IDL.Func(\n        [IDL.Opt(Address)],\n        [IDL.Vec(IDL.Tuple(Address, Participant))],\n        ['query'],\n      ),\n    'IDO_removeWhitelist' : IDL.Func([IDL.Vec(Address)], [], []),\n    'IDO_setFunder' : IDL.Func(\n        [IDL.Opt(IDL.Principal), IDL.Opt(IDORequirement)],\n        [],\n        [],\n      ),\n    'IDO_setWhitelist' : IDL.Func(\n        [IDL.Vec(IDL.Tuple(Address, Amount__1))],\n        [],\n        [],\n      ),\n    'IDO_updateQualification' : IDL.Func(\n        [IDL.Opt(Sa)],\n        [IDL.Opt(Participant)],\n        [],\n      ),\n    'backup' : IDL.Func([BackupRequest], [BackupResponse], []),\n    'cancel' : IDL.Func([Nonce, IDL.Opt(Sa)], [], []),\n    'cancelByTxid' : IDL.Func([Txid__1, IDL.Opt(Sa)], [], []),\n    'changeOwner' : IDL.Func([IDL.Principal], [IDL.Bool], []),\n    'comp_deposit' : IDL.Func([Amount__1, Amount__1, IDL.Opt(Sa)], [], []),\n    'comp_dropout' : IDL.Func([IDL.Opt(Sa)], [IDL.Bool], []),\n    'comp_fallback' : IDL.Func([IDL.Opt(Sa)], [Amount__1, Amount__1], []),\n    'comp_getDepositAccount' : IDL.Func(\n        [Address],\n        [\n          IDL.Record({\n            'depositing' : IDL.Tuple(Account__1, Address),\n            'balance' : IDL.Tuple(Account__1, Address),\n          }),\n        ],\n        ['query'],\n      ),\n    'comp_newRound' : IDL.Func(\n        [\n          IDL.Text,\n          IDL.Text,\n          Time,\n          Time,\n          IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n          IDL.Nat,\n          IDL.Bool,\n        ],\n        [IDL.Nat],\n        [],\n      ),\n    'comp_register' : IDL.Func([IDL.Opt(Sa)], [IDL.Bool], []),\n    'comp_result' : IDL.Func(\n        [IDL.Opt(IDL.Nat), Address],\n        [IDL.Opt(CompResult__1)],\n        ['query'],\n      ),\n    'comp_results' : IDL.Func(\n        [IDL.Opt(IDL.Nat), ListPage, ListSize],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(AccountId__4, CompResult__1)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'comp_round' : IDL.Func(\n        [IDL.Opt(IDL.Nat)],\n        [IDL.Nat, IDL.Opt(RoundItem__1)],\n        ['query'],\n      ),\n    'comp_settle' : IDL.Func([IDL.Nat], [], []),\n    'comp_withdraw' : IDL.Func([IDL.Opt(Sa)], [Amount__1, Amount__1], []),\n    'config' : IDL.Func([DexConfig], [IDL.Bool], []),\n    'count' : IDL.Func([IDL.Opt(Address)], [IDL.Nat], ['query']),\n    'drc205_canisterId' : IDL.Func([], [IDL.Principal], ['query']),\n    'drc205_config' : IDL.Func([Config], [IDL.Bool], []),\n    'drc205_dexInfo' : IDL.Func([], [DexInfo], ['query']),\n    'drc205_events' : IDL.Func(\n        [IDL.Opt(Address__2)],\n        [IDL.Vec(TxnRecord__3)],\n        ['query'],\n      ),\n    'drc205_getConfig' : IDL.Func([], [Setting], ['query']),\n    'drc205_pool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Txid__1, TxnRecord__3, IDL.Nat))],\n        ['query'],\n      ),\n    'drc205_txn' : IDL.Func([Txid__5], [IDL.Opt(TxnRecord__3)], ['query']),\n    'drc205_txn2' : IDL.Func([Txid__5], [IDL.Opt(TxnRecord__3)], []),\n    'drc207' : IDL.Func([], [DRC207Support], ['query']),\n    'fallback' : IDL.Func([Nonce, IDL.Opt(Sa)], [IDL.Bool], []),\n    'fallbackByTxid' : IDL.Func([Txid__1, IDL.Opt(Sa)], [IDL.Bool], []),\n    'fee' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'maker' : IDL.Record({ 'buy' : IDL.Float64, 'sell' : IDL.Float64 }),\n            'taker' : IDL.Record({ 'buy' : IDL.Float64, 'sell' : IDL.Float64 }),\n          }),\n        ],\n        ['query'],\n      ),\n    'feeStatus' : IDL.Func([], [FeeStatus], ['query']),\n    'getConfig' : IDL.Func([], [DexSetting], ['query']),\n    'getOwner' : IDL.Func([], [IDL.Principal], ['query']),\n    'getQuotes' : IDL.Func([KInterval], [IDL.Vec(KBar)], ['query']),\n    'getTxAccount' : IDL.Func(\n        [Address],\n        [Account__1, TxAccount, Nonce, Txid__1],\n        ['query'],\n      ),\n    'ictc_TM' : IDL.Func([], [IDL.Text], ['query']),\n    'ictc_addAdmin' : IDL.Func([IDL.Principal], [], []),\n    'ictc_appendTT' : IDL.Func(\n        [\n          IDL.Opt(IDL.Vec(IDL.Nat8)),\n          Toid__3,\n          IDL.Opt(Ttid__2),\n          IDL.Principal,\n          CallType__1,\n          IDL.Vec(Ttid__2),\n        ],\n        [Ttid__2],\n        [],\n      ),\n    'ictc_blockTO' : IDL.Func([Toid__3], [IDL.Opt(Toid__3)], []),\n    'ictc_clearLog' : IDL.Func([IDL.Opt(IDL.Int), IDL.Bool], [], []),\n    'ictc_clearTTPool' : IDL.Func([], [], []),\n    'ictc_completeTO' : IDL.Func([Toid__3, OrderStatus], [IDL.Bool], []),\n    'ictc_doneTO' : IDL.Func([Toid__3, OrderStatus, IDL.Bool], [IDL.Bool], []),\n    'ictc_doneTT' : IDL.Func(\n        [Toid__3, Ttid__2, IDL.Bool],\n        [IDL.Opt(Ttid__2)],\n        [],\n      ),\n    'ictc_getAdmins' : IDL.Func([], [IDL.Vec(IDL.Principal)], ['query']),\n    'ictc_getCalleeStatus' : IDL.Func(\n        [IDL.Principal],\n        [IDL.Opt(CalleeStatus)],\n        ['query'],\n      ),\n    'ictc_getPool' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'ttPool' : IDL.Record({\n              'total' : IDL.Nat,\n              'items' : IDL.Vec(IDL.Tuple(Ttid__2, Task__2)),\n            }),\n            'toPool' : IDL.Record({\n              'total' : IDL.Nat,\n              'items' : IDL.Vec(IDL.Tuple(Toid__3, IDL.Opt(Order__1))),\n            }),\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTO' : IDL.Func([Toid__3], [IDL.Opt(Order__1)], ['query']),\n    'ictc_getTOCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'ictc_getTOPool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Toid__3, IDL.Opt(Order__1)))],\n        ['query'],\n      ),\n    'ictc_getTOs' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(Toid__3, Order__1)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTT' : IDL.Func([Ttid__2], [IDL.Opt(TaskEvent)], ['query']),\n    'ictc_getTTByTO' : IDL.Func([Toid__3], [IDL.Vec(TaskEvent)], ['query']),\n    'ictc_getTTErrors' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(IDL.Nat, ErrorLog)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTTPool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Ttid__2, Task__2))],\n        ['query'],\n      ),\n    'ictc_getTTs' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(Ttid__2, TaskEvent)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_redoTT' : IDL.Func([Toid__3, Ttid__2], [IDL.Opt(Ttid__2)], []),\n    'ictc_removeAdmin' : IDL.Func([IDL.Principal], [], []),\n    'ictc_runTO' : IDL.Func([Toid__3], [IDL.Opt(OrderStatus)], []),\n    'ictc_runTT' : IDL.Func([], [IDL.Bool], []),\n    'info' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'decimals' : IDL.Nat8,\n            'setting' : DexSetting,\n            'owner' : IDL.Principal,\n            'name' : IDL.Text,\n            'version' : IDL.Text,\n            'token0' : TokenInfo,\n            'token1' : TokenInfo,\n            'paused' : IDL.Bool,\n          }),\n        ],\n        ['query'],\n      ),\n    'init' : IDL.Func([], [], []),\n    'latestFilled' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Timestamp__4, Txid__1, OrderFilled__1, OrderSide))],\n        ['query'],\n      ),\n    'level10' : IDL.Func(\n        [],\n        [\n          IDL.Nat,\n          IDL.Record({\n            'ask' : IDL.Vec(PriceResponse),\n            'bid' : IDL.Vec(PriceResponse),\n          }),\n        ],\n        ['query'],\n      ),\n    'level100' : IDL.Func(\n        [],\n        [\n          IDL.Nat,\n          IDL.Record({\n            'ask' : IDL.Vec(PriceResponse),\n            'bid' : IDL.Vec(PriceResponse),\n          }),\n        ],\n        ['query'],\n      ),\n    'liquidity' : IDL.Func([IDL.Opt(Address)], [Liquidity], ['query']),\n    'makerRebate' : IDL.Func([Address], [IDL.Float64, IDL.Float64], ['query']),\n    'name' : IDL.Func([], [IDL.Text], ['query']),\n    'orderExpirationDuration' : IDL.Func([], [IDL.Int], ['query']),\n    'pending' : IDL.Func(\n        [IDL.Opt(Address), IDL.Opt(ListPage), IDL.Opt(ListSize)],\n        [TrieList],\n        ['query'],\n      ),\n    'pendingAll' : IDL.Func(\n        [IDL.Opt(ListPage), IDL.Opt(ListSize)],\n        [TrieList],\n        ['query'],\n      ),\n    'pendingCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'prepare' : IDL.Func([Address], [TxAccount, Nonce], ['query']),\n    'recovery' : IDL.Func([BackupResponse], [IDL.Bool], []),\n    'removeVipMaker' : IDL.Func([Address], [], []),\n    'setOrderFail' : IDL.Func([IDL.Text], [IDL.Bool], []),\n    'setPause' : IDL.Func([IDL.Bool, IDL.Opt(Time)], [IDL.Bool], []),\n    'setUpgradeMode' : IDL.Func(\n        [IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null })],\n        [],\n        [],\n      ),\n    'setVipMaker' : IDL.Func([Address, IDL.Nat], [], []),\n    'stats' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'change24h' : IDL.Float64,\n            'vol24h' : Vol,\n            'totalVol' : Vol,\n            'price' : IDL.Float64,\n          }),\n        ],\n        ['query'],\n      ),\n    'status' : IDL.Func([Address, Nonce], [OrderStatusResponse], ['query']),\n    'statusByTxid' : IDL.Func([Txid__1], [OrderStatusResponse], ['query']),\n    'sync' : IDL.Func([], [], []),\n    'sysMode' : IDL.Func(\n        [],\n        [IDL.Record({ 'mode' : SysMode, 'openingTime' : Time })],\n        ['query'],\n      ),\n    'ta_ambassador' : IDL.Func(\n        [Address],\n        [IDL.Bool, IDL.Text, IDL.Nat, Vol],\n        ['query'],\n      ),\n    'ta_description' : IDL.Func([], [IDL.Text], ['query']),\n    'ta_getReferrer' : IDL.Func(\n        [Address],\n        [IDL.Opt(IDL.Tuple(Address, IDL.Bool))],\n        ['query'],\n      ),\n    'ta_setDescription' : IDL.Func([IDL.Text], [], []),\n    'ta_setReferrer' : IDL.Func(\n        [Address, IDL.Opt(IDL.Text), IDL.Opt(Sa)],\n        [IDL.Bool],\n        [],\n      ),\n    'ta_stats' : IDL.Func(\n        [IDL.Opt(IDL.Text)],\n        [IDL.Nat, IDL.Nat, Vol],\n        ['query'],\n      ),\n    'timerStart' : IDL.Func([IDL.Nat], [], []),\n    'timerStop' : IDL.Func([], [], []),\n    'token0' : IDL.Func([], [TokenType, IDL.Opt(TokenStd)], ['query']),\n    'token1' : IDL.Func([], [TokenType, IDL.Opt(TokenStd)], ['query']),\n    'tpsStats' : IDL.Func(\n        [],\n        [IDL.Nat, IDL.Float64, IDL.Nat, IDL.Nat, IDL.Int, IDL.Int],\n        ['query'],\n      ),\n    'trade' : IDL.Func(\n        [\n          OrderPrice,\n          OrderType,\n          IDL.Opt(PeriodNs),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'tradeMKT' : IDL.Func(\n        [DebitToken, Amount__1, IDL.Opt(Nonce), IDL.Opt(Sa), IDL.Opt(Data)],\n        [TradingResult],\n        [],\n      ),\n    'tradeMKT_b' : IDL.Func(\n        [\n          DebitToken,\n          Amount__1,\n          IDL.Opt(IDL.Nat),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n          IDL.Opt(\n            IDL.Record({ 'broker' : IDL.Principal, 'rate' : IDL.Float64 })\n          ),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'trade_b' : IDL.Func(\n        [\n          OrderPrice,\n          OrderType,\n          IDL.Opt(PeriodNs),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n          IDL.Opt(\n            IDL.Record({ 'broker' : IDL.Principal, 'rate' : IDL.Float64 })\n          ),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'userCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'version' : IDL.Func([], [IDL.Text], ['query']),\n    'wallet_receive' : IDL.Func([], [], []),\n    'withdraw_cycles' : IDL.Func([IDL.Nat], [], []),\n  });\n};\nexport const init = ({ IDL }) => { return []; };"
                },
                "method": {
                    "name": "stats",
                    "arg": {
                        "type": "tuple",
                        "subitems": []
                    },
                    "result": {
                        "type": "tuple",
                        "subitems": [
                            {
                                "key": "_0_",
                                "type": {
                                    "type": "record",
                                    "subitems": [
                                        {
                                            "key": "change24h",
                                            "type": {
                                                "type": "float64"
                                            }
                                        },
                                        {
                                            "key": "vol24h",
                                            "type": {
                                                "type": "record",
                                                "subitems": [
                                                    {
                                                        "key": "value0",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    },
                                                    {
                                                        "key": "value1",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "key": "totalVol",
                                            "type": {
                                                "type": "record",
                                                "subitems": [
                                                    {
                                                        "key": "value0",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    },
                                                    {
                                                        "key": "value1",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "key": "price",
                                            "type": {
                                                "type": "float64"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "arg": {
                    "type": {
                        "type": "tuple",
                        "subitems": []
                    },
                    "constraint": {
                        "type": "tuple",
                        "subitems": []
                    }
                },
                "identity": {
                    "from": "anonymous"
                }
            },
            "exported": {
                "target": "inner",
                "name": "fb7e0500-c468-4c7b-9d01-c4e837a8cfae"
            }
        },
        {
            "source": "inner",
            "inner": {
                "name": "fb7e0500-c468-4c7b-9d01-c4e837a8cfae",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "extra": {
                    "constant": false
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "data = data[0];\ndata = data['change24h'];\nresult = data;"
                },
                "to": {
                    "type": "float64"
                }
            },
            "exported": {
                "target": "inner",
                "name": ""
            }
        },
        {
            "source": "inner",
            "inner": {
                "name": "fb7e0500-c468-4c7b-9d01-c4e837a8cfae",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "extra": {
                    "constant": false
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "data = data[0];\ndata = data['price'];\nresult = data;"
                },
                "to": {
                    "type": "float64"
                }
            },
            "exported": {
                "target": "inner",
                "name": "87020f13-f21a-48e0-8db0-09fef581133b"
            }
        },
        {
            "source": "canister",
            "canister": {
                "canister_id": {
                    "fixed": true,
                    "value": "2xiqo-wqaaa-aaaak-aek3a-cai"
                },
                "info": {
                    "module_hash": "c38df5ecc4def90e52b9fc4e2ff84fdd74fb88bef67fdc62c0f6a854c8511891",
                    "updated": 1685032322882
                },
                "candid": {
                    "custom": false,
                    "did": "type Vol__2 = \n record {\n   value0: nat;\n   value1: nat;\n };\ntype Vol__1 = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype Vol = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype TxnResult = \n variant {\n   err:\n    record {\n      code:\n       variant {\n         DuplicateExecutedTransfer;\n         InsufficientAllowance;\n         InsufficientBalance;\n         InsufficientGas;\n         LockedTransferExpired;\n         NoLockedTransfer;\n         NonceError;\n         UndefinedError;\n       };\n      message: text;\n    };\n   ok: Txid__4;\n };\ntype TxnRecord__3 = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype TxnRecord__2 = \n record {\n   caller: AccountId__3;\n   gas: Gas;\n   index: nat;\n   msgCaller: opt principal;\n   nonce: nat;\n   timestamp: Time__1;\n   transaction: Transaction;\n   txid: Txid__4;\n };\ntype TxnRecord__1 = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype TxnRecord = \n record {\n   account: AccountId;\n   caller: AccountId;\n   cyclesWallet: opt CyclesWallet;\n   data: opt Data__1;\n   details:\n    vec\n     record {\n       counterparty: Txid__2;\n       time: Time;\n       token0Value: BalanceChange__1;\n       token1Value: BalanceChange__1;\n     };\n   fee: record {\n          token0Fee: int;\n          token1Fee: int;\n        };\n   filled:\n    record {\n      token0Value: BalanceChange__1;\n      token1Value: BalanceChange__1;\n    };\n   index: nat;\n   msgCaller: opt principal;\n   nonce: Nonce__1;\n   operation: OperationType;\n   order:\n    record {\n      token0Value: opt BalanceChange__1;\n      token1Value: opt BalanceChange__1;\n    };\n   orderMode: variant {\n                AMM;\n                OrderBook;\n              };\n   orderType: opt variant {\n                    FAK;\n                    FOK;\n                    LMT;\n                    MKT;\n                  };\n   shares: ShareChange;\n   status: Status;\n   time: Time;\n   token0: TokenType__1;\n   token1: TokenType__1;\n   txid: Txid__2;\n };\ntype Txid__5 = blob;\ntype Txid__4 = blob;\ntype Txid__3 = blob;\ntype Txid__2 = blob;\ntype Txid__1 = blob;\ntype Txid = blob;\ntype TxReceipt = \n variant {\n   Err:\n    variant {\n      AmountTooSmall;\n      BlockUsed;\n      ErrorOperationStyle;\n      ErrorTo;\n      InsufficientAllowance;\n      InsufficientBalance;\n      LedgerTrap;\n      Other: text;\n      Unauthorized;\n    };\n   Ok: nat;\n };\ntype TxAccount = text;\ntype Ttid__2 = nat;\ntype Ttid__1 = nat;\ntype Ttid = nat;\ntype TrieList = \n record {\n   data: vec record {\n               Txid__1;\n               TradingOrder__1;\n             };\n   total: nat;\n   totalPage: nat;\n };\ntype TransferResult = \n variant {\n   Err: TransferError__2;\n   Ok: BlockIndex;\n };\ntype TransferFromError = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientAllowance: record {allowance: nat;};\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype TransferFromArgs = \n record {\n   amount: nat;\n   created_at_time: opt nat64;\n   fee: opt nat;\n   from: Account;\n   memo: opt blob;\n   to: Account;\n };\ntype TransferError__2 = \n variant {\n   BadFee: record {expected_fee: ICP;};\n   InsufficientFunds: record {balance: ICP;};\n   TxCreatedInFuture;\n   TxDuplicate: record {duplicate_of: BlockIndex;};\n   TxTooOld: record {allowed_window_nanos: nat64;};\n };\ntype TransferError__1 = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype TransferError = \n variant {\n   BadBurn: record {min_burn_amount: nat;};\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture;\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld: record {allowed_window_nanos: Duration;};\n };\ntype TransferArgs__1 = \n record {\n   amount: ICP;\n   created_at_time: opt Timestamp__3;\n   fee: ICP;\n   from_subaccount: opt SubAccount;\n   memo: Memo;\n   to: AccountIdentifier;\n };\ntype TransferArgs = \n record {\n   amount: nat;\n   created_at_time: opt Timestamp__2;\n   fee: opt nat;\n   from_subaccount: opt Subaccount;\n   memo: opt blob;\n   to: Account;\n };\ntype Transaction = \n record {\n   data: opt blob;\n   from: AccountId__3;\n   operation: Operation;\n   to: AccountId__3;\n   value: nat;\n };\ntype TradingStatus = \n variant {\n   Cancelled;\n   Closed;\n   Pending;\n   Todo;\n };\ntype TradingResult = \n variant {\n   err:\n    record {\n      code:\n       variant {\n         InsufficientBalance;\n         InvalidAmount;\n         NonceError;\n         TransactionBlocking;\n         TransferException;\n         UnacceptableVolatility;\n         UndefinedError;\n       };\n      message: text;\n    };\n   ok: record {\n         filled: vec OrderFilled;\n         status: TradingStatus;\n         txid: Txid;\n       };\n };\ntype TradingOrder__1 = \n record {\n   account: AccountId__1;\n   data: opt blob;\n   expiration: Time;\n   fee: record {\n          fee0: int;\n          fee1: int;\n        };\n   filled: vec OrderFilled;\n   gas: record {\n          gas0: nat;\n          gas1: nat;\n        };\n   icrc1Account: opt record {\n                       owner: principal;\n                       subaccount: opt blob;\n                     };\n   index: nat;\n   nonce: nat;\n   orderPrice: OrderPrice__1;\n   orderType: OrderType__1;\n   refund: record {\n             nat;\n             nat;\n             nat;\n           };\n   remaining: OrderPrice__1;\n   status: TradingStatus;\n   time: Time;\n   toids: vec Toid;\n   txid: Txid;\n };\ntype TradingOrder = \n record {\n   account: AccountId__1;\n   data: opt blob;\n   expiration: Time;\n   fee: record {\n          fee0: int;\n          fee1: int;\n        };\n   filled: vec OrderFilled;\n   gas: record {\n          gas0: nat;\n          gas1: nat;\n        };\n   icrc1Account: opt record {\n                       owner: principal;\n                       subaccount: opt blob;\n                     };\n   index: nat;\n   nonce: nat;\n   orderPrice: OrderPrice__1;\n   orderType: OrderType__1;\n   refund: record {\n             nat;\n             nat;\n             nat;\n           };\n   remaining: OrderPrice__1;\n   status: TradingStatus;\n   time: Time;\n   toids: vec Toid;\n   txid: Txid;\n };\ntype TokenType__1 = \n variant {\n   Cycles;\n   Icp;\n   Token: principal;\n };\ntype TokenType = \n variant {\n   Cycles;\n   Icp;\n   Token: principal;\n };\ntype TokenSymbol = text;\ntype TokenStd__1 = \n variant {\n   cycles;\n   dft;\n   dip20;\n   drc20;\n   ext;\n   icp;\n   icrc1;\n   ledger;\n   other: text;\n };\ntype TokenStd = \n variant {\n   cycles;\n   dft;\n   dip20;\n   drc20;\n   ext;\n   icp;\n   icrc1;\n   ledger;\n   other: text;\n };\ntype TokenInfo = \n record {\n   principal;\n   TokenSymbol;\n   TokenStd;\n };\ntype Toid__3 = nat;\ntype Toid__2 = nat;\ntype Toid__1 = nat;\ntype Toid = nat;\ntype To = text;\ntype Timestamp__4 = nat;\ntype Timestamp__3 = record {timestamp_nanos: nat64;};\ntype Timestamp__2 = nat64;\ntype Timestamp__1 = nat;\ntype Timestamp = nat;\ntype Timeout = nat32;\ntype Time__1 = int;\ntype Time = int;\ntype Tcid = nat;\ntype Task__2 = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype Task__1 = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype TaskResult = \n record {\n   Status__1;\n   opt Receipt;\n   opt Err;\n };\ntype TaskEvent = \n record {\n   attempts: Attempts;\n   callbackStatus: opt Status__2;\n   result: TaskResult;\n   task: Task;\n   time: Time;\n   toid: opt Toid__1;\n   ttid: Ttid__1;\n   txHash: blob;\n };\ntype Task = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype SysMode = \n variant {\n   ClosingOnly;\n   DisabledTrading;\n   GeneralTrading;\n   ReadOnly;\n };\ntype Subaccount__1 = blob;\ntype Subaccount = blob;\ntype SubAccount = blob;\ntype Status__3 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status__2 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status__1 = \n variant {\n   Doing;\n   Done;\n   Error;\n   Todo;\n   Unknown;\n };\ntype Status = \n variant {\n   Cancelled;\n   Completed;\n   Failed;\n   PartiallyCompletedAndCancelled;\n   Pending;\n };\ntype Spender = text;\ntype Shares = nat;\ntype ShareChange = \n variant {\n   Burn: Shares;\n   Mint: Shares;\n   NoChange;\n };\ntype Setting = \n record {\n   EN_DEBUG: bool;\n   MAX_CACHE_NUMBER_PER: nat;\n   MAX_CACHE_TIME: nat;\n   MAX_STORAGE_TRIES: nat;\n };\ntype SagaTask = \n record {\n   comp: opt Compensation;\n   status: Status__3;\n   task: Task__2;\n   ttid: Ttid__2;\n };\ntype SagaData = \n record {\n   actuator:\n    record {\n      callees: vec record {\n                     Callee;\n                     CalleeStatus;\n                   };\n      errIndex: nat;\n      errorLogs: vec record {\n                       nat;\n                       ErrorLog;\n                     };\n      firstErrIndex: nat;\n      firstIndex: nat;\n      index: nat;\n      taskLogs: vec record {\n                      Ttid;\n                      TaskEvent;\n                    };\n      tasks: record {\n               vec record {\n                     Ttid;\n                     Task__1;\n                   };\n               vec record {\n                     Ttid;\n                     Task__1;\n                   };\n             };\n    };\n   aliveOrders: vec record {\n                      Toid__2;\n                      Time;\n                    };\n   autoClearTimeout: int;\n   firstIndex: nat;\n   index: nat;\n   orders: vec record {\n                 Toid__2;\n                 Order;\n               };\n   taskEvents: vec record {\n                     Toid__2;\n                     vec Ttid;\n                   };\n };\ntype Sa__1 = vec nat8;\ntype Sa = vec nat8;\ntype RoundItem__1 = \n record {\n   closedPrice: opt float64;\n   content: text;\n   end: Time;\n   isSettled: bool;\n   minCapital: nat;\n   name: text;\n   quoteToken: variant {\n                 token0;\n                 token1;\n               };\n   start: Time;\n };\ntype RoundItem = \n record {\n   closedPrice: opt float64;\n   content: text;\n   end: Time;\n   isSettled: bool;\n   minCapital: nat;\n   name: text;\n   quoteToken: variant {\n                 token0;\n                 token1;\n               };\n   start: Time;\n };\ntype Receipt = \n variant {\n   DIP20:\n    variant {\n      approve: TxReceipt;\n      balanceOf: nat;\n      transfer: TxReceipt;\n      transferFrom: TxReceipt;\n    };\n   DRC20:\n    variant {\n      approve: TxnResult;\n      balanceOf: Amount__2;\n      dropAccount;\n      executeTransfer: TxnResult;\n      lockTransfer: TxnResult;\n      lockTransferFrom: TxnResult;\n      transfer: TxnResult;\n      transferBatch: vec TxnResult;\n      transferFrom: TxnResult;\n      txnRecord: opt TxnRecord__2;\n    };\n   ICRC1:\n    variant {\n      icrc1_balance_of: nat;\n      icrc1_transfer: variant {\n                        Err: TransferError;\n                        Ok: nat;\n                      };\n    };\n   ICRC1New:\n    variant {\n      icrc1_balance_of: nat;\n      icrc1_transfer: variant {\n                        Err: TransferError__1;\n                        Ok: nat;\n                      };\n    };\n   ICRC2:\n    variant {\n      icrc2_approve: variant {\n                       Err: ApproveError;\n                       Ok: nat;\n                     };\n      icrc2_transfer_from: variant {\n                             Err: TransferFromError;\n                             Ok: nat;\n                           };\n    };\n   ICTokens: variant {\n               burn: TxnResult;\n               mint: TxnResult;\n             };\n   Ledger: variant {\n             account_balance: ICP;\n             transfer: TransferResult;\n           };\n   This: variant {\n           dip20Send;\n           dip20SendComp;\n         };\n   __block;\n   __skip;\n };\ntype Quantity = nat;\ntype PriceWeighted = \n record {\n   token0TimeWeighted: nat;\n   token1TimeWeighted: nat;\n   updateTime: Timestamp__1;\n };\ntype PriceResponse = \n record {\n   price: nat;\n   quantity: nat;\n };\ntype Price = nat;\ntype PeriodNs = int;\ntype Participant = \n record {\n   historyVol: float64;\n   limit: Amount__1;\n   updatedTime: Time;\n   used: Amount__1;\n };\ntype Order__1 = \n record {\n   allowPushing: variant {\n                   Closed;\n                   Opening;\n                 };\n   callbackStatus: opt Status__3;\n   compStrategy: CompStrategy;\n   comps: List;\n   data: opt blob;\n   name: text;\n   status: OrderStatus;\n   tasks: List_1;\n   time: Time;\n };\ntype OrderType__1 = \n variant {\n   FAK;\n   FOK;\n   LMT;\n   MKT;\n };\ntype OrderType = \n variant {\n   FAK;\n   FOK;\n   LMT;\n   MKT;\n };\ntype OrderStatusResponse = \n variant {\n   Completed: TxnRecord;\n   Failed: TradingOrder;\n   None;\n   Pending: TradingOrder;\n };\ntype OrderStatus = \n variant {\n   Blocking;\n   Compensating;\n   Doing;\n   Done;\n   Recovered;\n   Todo;\n };\ntype OrderSide = \n variant {\n   Buy;\n   Sell;\n };\ntype OrderPrice__1 = \n record {\n   price: Price;\n   quantity: variant {\n               Buy: record {\n                      Quantity;\n                      Amount;\n                    };\n               Sell: Quantity;\n             };\n };\ntype OrderPrice = \n record {\n   price: Price;\n   quantity: variant {\n               Buy: record {\n                      Quantity;\n                      Amount;\n                    };\n               Sell: Quantity;\n             };\n };\ntype OrderFilled__1 = \n record {\n   counterparty: Txid;\n   time: Time;\n   token0Value: BalanceChange;\n   token1Value: BalanceChange;\n };\ntype OrderFilled = \n record {\n   counterparty: Txid;\n   time: Time;\n   token0Value: BalanceChange;\n   token1Value: BalanceChange;\n };\ntype Order = \n record {\n   allowPushing: variant {\n                   Closed;\n                   Opening;\n                 };\n   callbackStatus: opt Status__3;\n   compStrategy: CompStrategy;\n   comps: List;\n   data: opt blob;\n   name: text;\n   status: OrderStatus;\n   tasks: List_1;\n   time: Time;\n };\ntype OperationType = \n variant {\n   AddLiquidity;\n   Claim;\n   RemoveLiquidity;\n   Swap;\n };\ntype Operation = \n variant {\n   approve: record {allowance: nat;};\n   executeTransfer: record {\n                      fallback: nat;\n                      lockedTxid: Txid__4;\n                    };\n   lockTransfer:\n    record {\n      decider: AccountId__3;\n      expiration: Time__1;\n      locked: nat;\n    };\n   transfer: record {action: variant {\n                               burn;\n                               mint;\n                               send;\n                             };};\n };\ntype Nonce__3 = nat;\ntype Nonce__2 = nat;\ntype Nonce__1 = nat;\ntype Nonce = nat;\ntype Memo = nat64;\ntype List_1 = \n opt record {\n       SagaTask;\n       List_1;\n     };\ntype ListSize = nat;\ntype ListPage = nat;\ntype List = \n opt record {\n       CompTask;\n       List;\n     };\ntype Liquidity = \n record {\n   priceWeighted: PriceWeighted;\n   shareWeighted: record {\n                    shareTimeWeighted: nat;\n                    updateTime: Timestamp__1;\n                  };\n   shares: Amount;\n   swapCount: nat64;\n   unitValue: record {\n                Amount;\n                Amount;\n              };\n   value0: Amount;\n   value1: Amount;\n   vol: Vol__1;\n };\ntype KInterval = nat;\ntype KBar = \n record {\n   close: nat;\n   high: nat;\n   kid: nat;\n   low: nat;\n   open: nat;\n   updatedTs: Timestamp;\n   vol: Vol__2;\n };\ntype InitArgs = \n record {\n   name: text;\n   owner: opt principal;\n   token0: principal;\n   token1: principal;\n   unitSize: nat64;\n };\ntype IcpE8s = nat;\ntype IDOSetting = \n record {\n   IDOClosingTime: Time;\n   IDOEnabled: bool;\n   IDOLimitPerAccount: Amount__1;\n   IDOOpeningTime: Time;\n   IDOSupplies: vec record {\n                      price: float64;\n                      supply: Amount__1;\n                    };\n   IDOTotalSupply: record {\n                     IDOSupply: Amount__1;\n                     percentageOfTotal: float64;\n                   };\n   IDOWhitelistEnabled: bool;\n };\ntype IDORequirement = \n record {\n   pairs: vec record {\n                pair: principal;\n                token1ToUsdRatio: float64;\n              };\n   threshold: float64;\n };\ntype ICP = record {e8s: nat64;};\ntype Gas = \n variant {\n   cycles: nat;\n   noFee;\n   token: nat;\n };\ntype From = text;\ntype FeeStatus = \n record {\n   feeBalance: FeeBalance;\n   feeRate: float64;\n   totalFee: FeeBalance;\n };\ntype FeeBalance = \n record {\n   value0: Amount;\n   value1: Amount;\n };\ntype ExecuteType = \n variant {\n   fallback;\n   send: nat;\n   sendAll;\n };\ntype ErrorLog = \n record {\n   callee: opt Callee__1;\n   result: opt TaskResult;\n   time: Time;\n   ttid: Ttid__1;\n };\ntype ErrorCode = \n variant {\n   call_error: record {err_code: nat32;};\n   canister_error;\n   canister_reject;\n   destination_invalid;\n   future: nat32;\n   system_fatal;\n   system_transient;\n };\ntype Err = \n record {\n   code: ErrorCode;\n   message: text;\n };\ntype Duration = nat64;\ntype DexSetting = \n record {\n   ICP_FEE: IcpE8s;\n   ICTC_RUN_INTERVAL: nat;\n   MAKER_BONUS_RATE: nat;\n   MAX_PENDINGS: nat;\n   MAX_TPS: nat;\n   STORAGE_INTERVAL: nat;\n   TRADING_FEE: nat;\n   UNIT_SIZE: nat;\n };\ntype DexInfo = \n record {\n   canisterId: principal;\n   dexName: text;\n   feeRate: float64;\n   mmType: variant {\n             AMM;\n             OrderBook;\n           };\n   pairName: text;\n   token0: record {\n             TokenType;\n             TokenStd__1;\n           };\n   token1: record {\n             TokenType;\n             TokenStd__1;\n           };\n };\ntype DexConfig = \n record {\n   ICP_FEE: opt IcpE8s;\n   ICTC_RUN_INTERVAL: opt nat;\n   MAKER_BONUS_RATE: opt nat;\n   MAX_PENDINGS: opt nat;\n   MAX_TPS: opt nat;\n   ORDER_EXPIRATION_DURATION: opt int;\n   STORAGE_INTERVAL: opt nat;\n   TRADING_FEE: opt nat;\n   UNIT_SIZE: opt nat;\n };\ntype Decider = text;\ntype DebitToken = principal;\ntype Data__2 = blob;\ntype Data__1 = blob;\ntype Data = blob;\ntype DRC207Support = \n record {\n   cycles_receivable: bool;\n   monitorable_by_blackhole:\n    record {\n      allowed: bool;\n      canister_id: opt principal;\n    };\n   monitorable_by_self: bool;\n   timer: record {\n            enable: bool;\n            interval_seconds: opt nat;\n          };\n };\ntype DRC205Data = \n record {\n   accountLastTxns:\n    vec record {\n          AccountId__2;\n          record {\n            vec Txid__3;\n            vec Txid__3;\n          };\n        };\n   globalLastTxns: record {\n                     vec Txid__3;\n                     vec Txid__3;\n                   };\n   globalTxns:\n    record {\n      vec record {\n            Txid__3;\n            Time;\n          };\n      vec record {\n            Txid__3;\n            Time;\n          };\n    };\n   setting: Setting;\n   storagePool: vec record {\n                      Txid__3;\n                      TxnRecord__1;\n                      nat;\n                    };\n   txnRecords: vec record {\n                     Txid__3;\n                     TxnRecord__1;\n                   };\n };\ntype CyclesWallet = principal;\ntype Config = \n record {\n   EN_DEBUG: opt bool;\n   MAX_CACHE_NUMBER_PER: opt nat;\n   MAX_CACHE_TIME: opt nat;\n   MAX_STORAGE_TRIES: opt nat;\n };\ntype Compensation = \n record {\n   attemptsMax: Attempts;\n   callType: CallType;\n   callee: Callee__1;\n   cycles: nat;\n   data: opt blob;\n   forTtid: opt Ttid__1;\n   preTtid: vec Ttid__1;\n   recallInterval: int;\n   time: Time;\n   toid: opt Toid__1;\n };\ntype CompTask = \n record {\n   comp: Compensation;\n   forTtid: Ttid__2;\n   status: Status__3;\n   tcid: Tcid;\n };\ntype CompStrategy = \n variant {\n   Backward;\n   Forward;\n };\ntype CompResult__1 = \n record {\n   assetValue: opt CompCapital__1;\n   capital: CompCapital__1;\n   icrc1Account: Account__1;\n   status: variant {\n             Active;\n             Dropout;\n           };\n   vol: Vol;\n };\ntype CompResult = \n record {\n   assetValue: opt CompCapital;\n   capital: CompCapital;\n   icrc1Account: record {\n                   owner: principal;\n                   subaccount: opt blob;\n                 };\n   status: variant {\n             Active;\n             Dropout;\n           };\n   vol: Vol__1;\n };\ntype CompCapital__1 = \n record {\n   total: float64;\n   value0: nat;\n   value1: nat;\n };\ntype CompCapital = \n record {\n   total: float64;\n   value0: nat;\n   value1: nat;\n };\ntype Callee__1 = principal;\ntype CalleeStatus = \n record {\n   continuousFailure: nat;\n   failureCount: nat;\n   successCount: nat;\n };\ntype Callee = principal;\ntype CallType__1 = \n variant {\n   DIP20:\n    variant {\n      approve: record {\n                 principal;\n                 nat;\n               };\n      balanceOf: principal;\n      transfer: record {\n                  principal;\n                  nat;\n                };\n      transferFrom: record {\n                      principal;\n                      principal;\n                      nat;\n                    };\n    };\n   DRC20:\n    variant {\n      approve: record {\n                 Spender;\n                 Amount__2;\n                 opt Nonce__3;\n                 opt Sa__1;\n                 opt Data__2;\n               };\n      balanceOf: Address__1;\n      dropAccount: opt Sa__1;\n      executeTransfer:\n       record {\n         BlobFill;\n         ExecuteType;\n         opt To;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransfer:\n       record {\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transfer: record {\n                  To;\n                  Amount__2;\n                  opt Nonce__3;\n                  opt Sa__1;\n                  opt Data__2;\n                };\n      transferBatch:\n       record {\n         vec To;\n         vec Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      txnRecord: BlobFill;\n    };\n   ICRC1: variant {\n            icrc1_balance_of: Account;\n            icrc1_transfer: TransferArgs;\n          };\n   ICRC2:\n    variant {\n      icrc2_approve: ApproveArgs;\n      icrc2_transfer_from: TransferFromArgs;\n    };\n   ICTokens:\n    variant {\n      burn: record {\n              Amount__2;\n              opt Nonce__3;\n              opt Sa__1;\n              opt Data__2;\n            };\n      mint: record {\n              Address__1;\n              Amount__2;\n              opt Nonce__3;\n              opt Data__2;\n            };\n    };\n   Ledger:\n    variant {\n      account_balance: AccountBalanceArgs;\n      transfer: TransferArgs__1;\n    };\n   This:\n    variant {\n      dip20Send: record {\n                   blob;\n                   nat;\n                 };\n      dip20SendComp: record {\n                       blob;\n                       principal;\n                       nat;\n                     };\n    };\n   __block;\n   __skip;\n };\ntype CallType = \n variant {\n   DIP20:\n    variant {\n      approve: record {\n                 principal;\n                 nat;\n               };\n      balanceOf: principal;\n      transfer: record {\n                  principal;\n                  nat;\n                };\n      transferFrom: record {\n                      principal;\n                      principal;\n                      nat;\n                    };\n    };\n   DRC20:\n    variant {\n      approve: record {\n                 Spender;\n                 Amount__2;\n                 opt Nonce__3;\n                 opt Sa__1;\n                 opt Data__2;\n               };\n      balanceOf: Address__1;\n      dropAccount: opt Sa__1;\n      executeTransfer:\n       record {\n         BlobFill;\n         ExecuteType;\n         opt To;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransfer:\n       record {\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      lockTransferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         Timeout;\n         opt Decider;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transfer: record {\n                  To;\n                  Amount__2;\n                  opt Nonce__3;\n                  opt Sa__1;\n                  opt Data__2;\n                };\n      transferBatch:\n       record {\n         vec To;\n         vec Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      transferFrom:\n       record {\n         From;\n         To;\n         Amount__2;\n         opt Nonce__3;\n         opt Sa__1;\n         opt Data__2;\n       };\n      txnRecord: BlobFill;\n    };\n   ICRC1: variant {\n            icrc1_balance_of: Account;\n            icrc1_transfer: TransferArgs;\n          };\n   ICRC2:\n    variant {\n      icrc2_approve: ApproveArgs;\n      icrc2_transfer_from: TransferFromArgs;\n    };\n   ICTokens:\n    variant {\n      burn: record {\n              Amount__2;\n              opt Nonce__3;\n              opt Sa__1;\n              opt Data__2;\n            };\n      mint: record {\n              Address__1;\n              Amount__2;\n              opt Nonce__3;\n              opt Data__2;\n            };\n    };\n   Ledger:\n    variant {\n      account_balance: AccountBalanceArgs;\n      transfer: TransferArgs__1;\n    };\n   This:\n    variant {\n      dip20Send: record {\n                   blob;\n                   nat;\n                 };\n      dip20SendComp: record {\n                       blob;\n                       principal;\n                       nat;\n                     };\n    };\n   __block;\n   __skip;\n };\ntype BlockIndex = nat64;\ntype BlobFill = \n variant {\n   AutoFill;\n   ManualFill: blob;\n };\ntype BalanceChange__1 = \n variant {\n   CreditRecord: nat;\n   DebitRecord: nat;\n   NoChange;\n };\ntype BalanceChange = \n variant {\n   CreditRecord: nat;\n   DebitRecord: nat;\n   NoChange;\n };\ntype BackupResponse = \n variant {\n   ambassadors: vec record {\n                      AccountId__2;\n                      AmbassadorData;\n                    };\n   clearingTxids: vec Txid__3;\n   competitors: vec record {\n                      nat;\n                      vec record {\n                            AccountId__2;\n                            CompResult;\n                          };\n                    };\n   drc205Data: DRC205Data;\n   icdex_dip20Balances: vec record {\n                              AccountId__2;\n                              record {\n                                principal;\n                                nat;\n                              };\n                            };\n   icdex_failedOrders: vec record {\n                             Txid__3;\n                             TradingOrder;\n                           };\n   icdex_klines2: vec record {\n                        KInterval;\n                        record {\n                          vec KBar;\n                          vec KBar;\n                        };\n                      };\n   icdex_makers: vec record {\n                       AccountId__2;\n                       record {\n                         nat;\n                         principal;\n                       };\n                     };\n   icdex_nonces: vec record {\n                       AccountId__2;\n                       Nonce__2;\n                     };\n   icdex_orderBook:\n    record {\n      ask: vec record {\n                 Txid__3;\n                 OrderPrice__1;\n               };\n      bid: vec record {\n                 Txid__3;\n                 OrderPrice__1;\n               };\n    };\n   icdex_orders: vec record {\n                       Txid__3;\n                       TradingOrder;\n                     };\n   icdex_pendingOrders: vec record {\n                              AccountId__2;\n                              vec Txid__3;\n                            };\n   icdex_vols: vec record {\n                     AccountId__2;\n                     Vol__1;\n                   };\n   ictcTaskCallbackEvents: vec record {\n                                 Ttid;\n                                 Time;\n                               };\n   otherData:\n    record {\n      activeRound: nat;\n      icdex_index: nat;\n      icdex_lastPrice: OrderPrice__1;\n      icdex_priceWeighted: PriceWeighted;\n      icdex_totalFee: FeeBalance;\n      icdex_totalVol: Vol__1;\n      taDescription: text;\n    };\n   rounds: vec record {\n                 nat;\n                 RoundItem;\n               };\n   sagaData: SagaData;\n   timeSortedTxids:\n    record {\n      vec record {\n            Txid__3;\n            Time;\n          };\n      vec record {\n            Txid__3;\n            Time;\n          };\n    };\n   traderReferrerTemps:\n    vec record {\n          AccountId__2;\n          record {\n            AccountId__2;\n            text;\n            Time;\n          };\n        };\n   traderReferrers: vec record {\n                          AccountId__2;\n                          AccountId__2;\n                        };\n };\ntype BackupRequest = \n variant {\n   ambassadors;\n   clearingTxids;\n   competitors;\n   drc205Data: variant {\n                 All;\n                 Base;\n               };\n   icdex_dip20Balances;\n   icdex_failedOrders;\n   icdex_klines2;\n   icdex_makers;\n   icdex_nonces;\n   icdex_orderBook;\n   icdex_orders;\n   icdex_pendingOrders;\n   icdex_vols;\n   ictcTaskCallbackEvents;\n   otherData;\n   rounds;\n   sagaData: variant {\n               All;\n               Base;\n             };\n   timeSortedTxids;\n   traderReferrerTemps;\n   traderReferrers;\n };\ntype Attempts = nat;\ntype ApproveError = \n variant {\n   BadFee: record {expected_fee: nat;};\n   CreatedInFuture: record {ledger_time: nat64;};\n   Duplicate: record {duplicate_of: nat;};\n   GenericError: record {\n                   error_code: nat;\n                   message: text;\n                 };\n   InsufficientFunds: record {balance: nat;};\n   TemporarilyUnavailable;\n   TooOld;\n };\ntype ApproveArgs = \n record {\n   amount: nat;\n   created_at_time: opt nat64;\n   fee: opt nat;\n   from_subaccount: opt blob;\n   memo: opt blob;\n   spender: principal;\n };\ntype Amount__2 = nat;\ntype Amount__1 = nat;\ntype Amount = nat;\ntype AmbassadorData = \n record {\n   text;\n   nat;\n   Vol__1;\n };\ntype Address__2 = text;\ntype Address__1 = text;\ntype Address = text;\ntype Account__1 = \n record {\n   owner: principal;\n   subaccount: opt Subaccount__1;\n };\ntype AccountIdentifier = blob;\ntype AccountId__4 = blob;\ntype AccountId__3 = blob;\ntype AccountId__2 = blob;\ntype AccountId__1 = blob;\ntype AccountId = blob;\ntype AccountBalanceArgs = record {account: AccountIdentifier;};\ntype Account = \n record {\n   owner: principal;\n   subaccount: opt Subaccount;\n };\nservice : {\n  IDO_config: (IDOSetting) -> ();\n  IDO_getConfig: () -> (opt principal, IDOSetting, opt IDORequirement) query;\n  IDO_qualification: (opt Address) ->\n   (vec record {\n          Address;\n          Participant;\n        }) query;\n  IDO_removeWhitelist: (vec Address) -> ();\n  IDO_setFunder: (opt principal, opt IDORequirement) -> ();\n  IDO_setWhitelist: (vec record {\n                           Address;\n                           Amount__1;\n                         }) -> ();\n  IDO_updateQualification: (opt Sa) -> (opt Participant);\n  backup: (BackupRequest) -> (BackupResponse);\n  cancel: (Nonce, opt Sa) -> ();\n  cancelByTxid: (Txid__1, opt Sa) -> ();\n  changeOwner: (principal) -> (bool);\n  comp_deposit: (Amount__1, Amount__1, opt Sa) -> ();\n  comp_dropout: (opt Sa) -> (bool);\n  comp_fallback: (opt Sa) -> (Amount__1, Amount__1);\n  comp_getDepositAccount: (Address) ->\n   (record {\n      balance: record {\n                 Account__1;\n                 Address;\n               };\n      depositing: record {\n                    Account__1;\n                    Address;\n                  };\n    }) query;\n  comp_newRound: (text, text, Time, Time, variant {\n                                            token0;\n                                            token1;\n                                          }, nat, bool) -> (nat);\n  comp_register: (opt Sa) -> (bool);\n  comp_result: (opt nat, Address) -> (opt CompResult__1) query;\n  comp_results: (opt nat, ListPage, ListSize) ->\n   (record {\n      data: vec record {\n                  AccountId__4;\n                  CompResult__1;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  comp_round: (opt nat) -> (nat, opt RoundItem__1) query;\n  comp_settle: (nat) -> ();\n  comp_withdraw: (opt Sa) -> (Amount__1, Amount__1);\n  config: (DexConfig) -> (bool);\n  count: (opt Address) -> (nat) query;\n  drc205_canisterId: () -> (principal) query;\n  drc205_config: (Config) -> (bool);\n  drc205_dexInfo: () -> (DexInfo) query;\n  drc205_events: (opt Address__2) -> (vec TxnRecord__3) query;\n  drc205_getConfig: () -> (Setting) query;\n  drc205_pool: () -> (vec record {\n                            Txid__1;\n                            TxnRecord__3;\n                            nat;\n                          }) query;\n  drc205_txn: (Txid__5) -> (opt TxnRecord__3) query;\n  drc205_txn2: (Txid__5) -> (opt TxnRecord__3);\n  drc207: () -> (DRC207Support) query;\n  fallback: (Nonce, opt Sa) -> (bool);\n  fallbackByTxid: (Txid__1, opt Sa) -> (bool);\n  fee: () ->\n   (record {\n      maker: record {\n               buy: float64;\n               sell: float64;\n             };\n      taker: record {\n               buy: float64;\n               sell: float64;\n             };\n    }) query;\n  feeStatus: () -> (FeeStatus) query;\n  getConfig: () -> (DexSetting) query;\n  getOwner: () -> (principal) query;\n  getQuotes: (KInterval) -> (vec KBar) query;\n  getTxAccount: (Address) -> (Account__1, TxAccount, Nonce, Txid__1) query;\n  ictc_TM: () -> (text) query;\n  ictc_addAdmin: (principal) -> ();\n  ictc_appendTT: (opt blob, Toid__3, opt Ttid__2, principal, CallType__1,\n   vec Ttid__2) -> (Ttid__2);\n  ictc_blockTO: (Toid__3) -> (opt Toid__3);\n  ictc_clearLog: (opt int, bool) -> ();\n  ictc_clearTTPool: () -> ();\n  ictc_completeTO: (Toid__3, OrderStatus) -> (bool);\n  ictc_doneTO: (Toid__3, OrderStatus, bool) -> (bool);\n  ictc_doneTT: (Toid__3, Ttid__2, bool) -> (opt Ttid__2);\n  ictc_getAdmins: () -> (vec principal) query;\n  ictc_getCalleeStatus: (principal) -> (opt CalleeStatus) query;\n  ictc_getPool: () ->\n   (record {\n      toPool: record {\n                items: vec record {\n                             Toid__3;\n                             opt Order__1;\n                           };\n                total: nat;\n              };\n      ttPool: record {\n                items: vec record {\n                             Ttid__2;\n                             Task__2;\n                           };\n                total: nat;\n              };\n    }) query;\n  ictc_getTO: (Toid__3) -> (opt Order__1) query;\n  ictc_getTOCount: () -> (nat) query;\n  ictc_getTOPool: () -> (vec record {\n                               Toid__3;\n                               opt Order__1;\n                             }) query;\n  ictc_getTOs: (nat, nat) ->\n   (record {\n      data: vec record {\n                  Toid__3;\n                  Order__1;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_getTT: (Ttid__2) -> (opt TaskEvent) query;\n  ictc_getTTByTO: (Toid__3) -> (vec TaskEvent) query;\n  ictc_getTTErrors: (nat, nat) ->\n   (record {\n      data: vec record {\n                  nat;\n                  ErrorLog;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_getTTPool: () -> (vec record {\n                               Ttid__2;\n                               Task__2;\n                             }) query;\n  ictc_getTTs: (nat, nat) ->\n   (record {\n      data: vec record {\n                  Ttid__2;\n                  TaskEvent;\n                };\n      total: nat;\n      totalPage: nat;\n    }) query;\n  ictc_redoTT: (Toid__3, Ttid__2) -> (opt Ttid__2);\n  ictc_removeAdmin: (principal) -> ();\n  ictc_runTO: (Toid__3) -> (opt OrderStatus);\n  ictc_runTT: () -> (bool);\n  info: () ->\n   (record {\n      decimals: nat8;\n      name: text;\n      owner: principal;\n      paused: bool;\n      setting: DexSetting;\n      token0: TokenInfo;\n      token1: TokenInfo;\n      version: text;\n    }) query;\n  init: () -> ();\n  latestFilled: () ->\n   (vec record {\n          Timestamp__4;\n          Txid__1;\n          OrderFilled__1;\n          OrderSide;\n        }) query;\n  level10: () -> (nat,\n   record {\n     ask: vec PriceResponse;\n     bid: vec PriceResponse;\n   }) query;\n  level100: () -> (nat,\n   record {\n     ask: vec PriceResponse;\n     bid: vec PriceResponse;\n   }) query;\n  liquidity: (opt Address) -> (Liquidity) query;\n  makerRebate: (Address) -> (float64, float64) query;\n  name: () -> (text) query;\n  orderExpirationDuration: () -> (int) query;\n  pending: (opt Address, opt ListPage, opt ListSize) -> (TrieList) query;\n  pendingAll: (opt ListPage, opt ListSize) -> (TrieList) query;\n  pendingCount: () -> (nat) query;\n  prepare: (Address) -> (TxAccount, Nonce) query;\n  recovery: (BackupResponse) -> (bool);\n  removeVipMaker: (Address) -> ();\n  setOrderFail: (text) -> (bool);\n  setPause: (bool, opt Time) -> (bool);\n  setUpgradeMode: (variant {\n                     All;\n                     Base;\n                   }) -> ();\n  setVipMaker: (Address, nat) -> ();\n  stats: () ->\n   (record {\n      change24h: float64;\n      price: float64;\n      totalVol: Vol;\n      vol24h: Vol;\n    }) query;\n  status: (Address, Nonce) -> (OrderStatusResponse) query;\n  statusByTxid: (Txid__1) -> (OrderStatusResponse) query;\n  sync: () -> ();\n  sysMode: () -> (record {\n                    mode: SysMode;\n                    openingTime: Time;\n                  }) query;\n  ta_ambassador: (Address) -> (bool, text, nat, Vol) query;\n  ta_description: () -> (text) query;\n  ta_getReferrer: (Address) -> (opt record {\n                                      Address;\n                                      bool;\n                                    }) query;\n  ta_setDescription: (text) -> ();\n  ta_setReferrer: (Address, opt text, opt Sa) -> (bool);\n  ta_stats: (opt text) -> (nat, nat, Vol) query;\n  timerStart: (nat) -> ();\n  timerStop: () -> ();\n  token0: () -> (TokenType, opt TokenStd) query;\n  token1: () -> (TokenType, opt TokenStd) query;\n  tpsStats: () -> (nat, float64, nat, nat, int, int) query;\n  trade: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa,\n   opt Data) -> (TradingResult);\n  tradeMKT: (DebitToken, Amount__1, opt Nonce, opt Sa, opt Data) ->\n   (TradingResult);\n  tradeMKT_b: (DebitToken, Amount__1, opt nat, opt Nonce, opt Sa, opt Data,\n   opt record {\n         broker: principal;\n         rate: float64;\n       }) -> (TradingResult);\n  trade_b: (OrderPrice, OrderType, opt PeriodNs, opt Nonce, opt Sa, opt Data,\n   opt record {\n         broker: principal;\n         rate: float64;\n       }) -> (TradingResult);\n  userCount: () -> (nat) query;\n  version: () -> (text) query;\n  wallet_receive: () -> ();\n  withdraw_cycles: (nat) -> ();\n}\n",
                    "javascript": "export const idlFactory = ({ IDL }) => {\n  const List = IDL.Rec();\n  const List_1 = IDL.Rec();\n  const Amount__1 = IDL.Nat;\n  const Time = IDL.Int;\n  const IDOSetting = IDL.Record({\n    'IDOSupplies' : IDL.Vec(\n      IDL.Record({ 'supply' : Amount__1, 'price' : IDL.Float64 })\n    ),\n    'IDOWhitelistEnabled' : IDL.Bool,\n    'IDOOpeningTime' : Time,\n    'IDOTotalSupply' : IDL.Record({\n      'IDOSupply' : Amount__1,\n      'percentageOfTotal' : IDL.Float64,\n    }),\n    'IDOEnabled' : IDL.Bool,\n    'IDOLimitPerAccount' : Amount__1,\n    'IDOClosingTime' : Time,\n  });\n  const IDORequirement = IDL.Record({\n    'threshold' : IDL.Float64,\n    'pairs' : IDL.Vec(\n      IDL.Record({ 'pair' : IDL.Principal, 'token1ToUsdRatio' : IDL.Float64 })\n    ),\n  });\n  const Address = IDL.Text;\n  const Participant = IDL.Record({\n    'updatedTime' : Time,\n    'used' : Amount__1,\n    'limit' : Amount__1,\n    'historyVol' : IDL.Float64,\n  });\n  const Sa = IDL.Vec(IDL.Nat8);\n  const BackupRequest = IDL.Variant({\n    'timeSortedTxids' : IDL.Null,\n    'icdex_failedOrders' : IDL.Null,\n    'icdex_makers' : IDL.Null,\n    'drc205Data' : IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null }),\n    'icdex_vols' : IDL.Null,\n    'icdex_pendingOrders' : IDL.Null,\n    'ictcTaskCallbackEvents' : IDL.Null,\n    'otherData' : IDL.Null,\n    'icdex_dip20Balances' : IDL.Null,\n    'clearingTxids' : IDL.Null,\n    'icdex_nonces' : IDL.Null,\n    'competitors' : IDL.Null,\n    'icdex_klines2' : IDL.Null,\n    'sagaData' : IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null }),\n    'icdex_orders' : IDL.Null,\n    'icdex_orderBook' : IDL.Null,\n    'rounds' : IDL.Null,\n    'traderReferrers' : IDL.Null,\n    'traderReferrerTemps' : IDL.Null,\n    'ambassadors' : IDL.Null,\n  });\n  const Txid__3 = IDL.Vec(IDL.Nat8);\n  const TradingStatus = IDL.Variant({\n    'Todo' : IDL.Null,\n    'Closed' : IDL.Null,\n    'Cancelled' : IDL.Null,\n    'Pending' : IDL.Null,\n  });\n  const Toid = IDL.Nat;\n  const Txid = IDL.Vec(IDL.Nat8);\n  const OrderType__1 = IDL.Variant({\n    'FAK' : IDL.Null,\n    'FOK' : IDL.Null,\n    'LMT' : IDL.Null,\n    'MKT' : IDL.Null,\n  });\n  const BalanceChange = IDL.Variant({\n    'DebitRecord' : IDL.Nat,\n    'CreditRecord' : IDL.Nat,\n    'NoChange' : IDL.Null,\n  });\n  const OrderFilled = IDL.Record({\n    'time' : Time,\n    'token0Value' : BalanceChange,\n    'counterparty' : Txid,\n    'token1Value' : BalanceChange,\n  });\n  const AccountId__1 = IDL.Vec(IDL.Nat8);\n  const Quantity = IDL.Nat;\n  const Amount = IDL.Nat;\n  const Price = IDL.Nat;\n  const OrderPrice__1 = IDL.Record({\n    'quantity' : IDL.Variant({\n      'Buy' : IDL.Tuple(Quantity, Amount),\n      'Sell' : Quantity,\n    }),\n    'price' : Price,\n  });\n  const TradingOrder = IDL.Record({\n    'fee' : IDL.Record({ 'fee0' : IDL.Int, 'fee1' : IDL.Int }),\n    'gas' : IDL.Record({ 'gas0' : IDL.Nat, 'gas1' : IDL.Nat }),\n    'status' : TradingStatus,\n    'toids' : IDL.Vec(Toid),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'txid' : Txid,\n    'icrc1Account' : IDL.Opt(\n      IDL.Record({\n        'owner' : IDL.Principal,\n        'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      })\n    ),\n    'orderType' : OrderType__1,\n    'filled' : IDL.Vec(OrderFilled),\n    'expiration' : Time,\n    'nonce' : IDL.Nat,\n    'account' : AccountId__1,\n    'remaining' : OrderPrice__1,\n    'index' : IDL.Nat,\n    'orderPrice' : OrderPrice__1,\n    'refund' : IDL.Tuple(IDL.Nat, IDL.Nat, IDL.Nat),\n  });\n  const AccountId__2 = IDL.Vec(IDL.Nat8);\n  const Setting = IDL.Record({\n    'MAX_STORAGE_TRIES' : IDL.Nat,\n    'EN_DEBUG' : IDL.Bool,\n    'MAX_CACHE_NUMBER_PER' : IDL.Nat,\n    'MAX_CACHE_TIME' : IDL.Nat,\n  });\n  const Status = IDL.Variant({\n    'Failed' : IDL.Null,\n    'Cancelled' : IDL.Null,\n    'PartiallyCompletedAndCancelled' : IDL.Null,\n    'Completed' : IDL.Null,\n    'Pending' : IDL.Null,\n  });\n  const Shares = IDL.Nat;\n  const ShareChange = IDL.Variant({\n    'Burn' : Shares,\n    'Mint' : Shares,\n    'NoChange' : IDL.Null,\n  });\n  const BalanceChange__1 = IDL.Variant({\n    'DebitRecord' : IDL.Nat,\n    'CreditRecord' : IDL.Nat,\n    'NoChange' : IDL.Null,\n  });\n  const Data__1 = IDL.Vec(IDL.Nat8);\n  const Txid__2 = IDL.Vec(IDL.Nat8);\n  const TokenType__1 = IDL.Variant({\n    'Icp' : IDL.Null,\n    'Token' : IDL.Principal,\n    'Cycles' : IDL.Null,\n  });\n  const Nonce__1 = IDL.Nat;\n  const OperationType = IDL.Variant({\n    'AddLiquidity' : IDL.Null,\n    'Swap' : IDL.Null,\n    'Claim' : IDL.Null,\n    'RemoveLiquidity' : IDL.Null,\n  });\n  const AccountId = IDL.Vec(IDL.Nat8);\n  const CyclesWallet = IDL.Principal;\n  const TxnRecord__1 = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const DRC205Data = IDL.Record({\n    'accountLastTxns' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Vec(Txid__3), IDL.Vec(Txid__3)))\n    ),\n    'setting' : Setting,\n    'globalLastTxns' : IDL.Tuple(IDL.Vec(Txid__3), IDL.Vec(Txid__3)),\n    'storagePool' : IDL.Vec(IDL.Tuple(Txid__3, TxnRecord__1, IDL.Nat)),\n    'globalTxns' : IDL.Tuple(\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n    ),\n    'txnRecords' : IDL.Vec(IDL.Tuple(Txid__3, TxnRecord__1)),\n  });\n  const Vol__1 = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const Ttid = IDL.Nat;\n  const FeeBalance = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const Timestamp__1 = IDL.Nat;\n  const PriceWeighted = IDL.Record({\n    'updateTime' : Timestamp__1,\n    'token1TimeWeighted' : IDL.Nat,\n    'token0TimeWeighted' : IDL.Nat,\n  });\n  const Nonce__2 = IDL.Nat;\n  const CompCapital = IDL.Record({\n    'total' : IDL.Float64,\n    'value0' : IDL.Nat,\n    'value1' : IDL.Nat,\n  });\n  const CompResult = IDL.Record({\n    'vol' : Vol__1,\n    'status' : IDL.Variant({ 'Active' : IDL.Null, 'Dropout' : IDL.Null }),\n    'icrc1Account' : IDL.Record({\n      'owner' : IDL.Principal,\n      'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    }),\n    'capital' : CompCapital,\n    'assetValue' : IDL.Opt(CompCapital),\n  });\n  const KInterval = IDL.Nat;\n  const Vol__2 = IDL.Record({ 'value0' : IDL.Nat, 'value1' : IDL.Nat });\n  const Timestamp = IDL.Nat;\n  const KBar = IDL.Record({\n    'kid' : IDL.Nat,\n    'low' : IDL.Nat,\n    'vol' : Vol__2,\n    'high' : IDL.Nat,\n    'close' : IDL.Nat,\n    'open' : IDL.Nat,\n    'updatedTs' : Timestamp,\n  });\n  const Toid__2 = IDL.Nat;\n  const OrderStatus = IDL.Variant({\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Recovered' : IDL.Null,\n    'Compensating' : IDL.Null,\n    'Blocking' : IDL.Null,\n  });\n  const Status__3 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Ttid__1 = IDL.Nat;\n  const Toid__1 = IDL.Nat;\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const Timestamp__2 = IDL.Nat64;\n  const TransferArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(Subaccount),\n    'created_at_time' : IDL.Opt(Timestamp__2),\n    'amount' : IDL.Nat,\n  });\n  const ApproveArgs = IDL.Record({\n    'fee' : IDL.Opt(IDL.Nat),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n    'spender' : IDL.Principal,\n  });\n  const TransferFromArgs = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(IDL.Nat),\n    'from' : Account,\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'created_at_time' : IDL.Opt(IDL.Nat64),\n    'amount' : IDL.Nat,\n  });\n  const To = IDL.Text;\n  const Amount__2 = IDL.Nat;\n  const Nonce__3 = IDL.Nat;\n  const Sa__1 = IDL.Vec(IDL.Nat8);\n  const Data__2 = IDL.Vec(IDL.Nat8);\n  const From = IDL.Text;\n  const Spender = IDL.Text;\n  const Address__1 = IDL.Text;\n  const BlobFill = IDL.Variant({\n    'AutoFill' : IDL.Null,\n    'ManualFill' : IDL.Vec(IDL.Nat8),\n  });\n  const Timeout = IDL.Nat32;\n  const Decider = IDL.Text;\n  const ExecuteType = IDL.Variant({\n    'fallback' : IDL.Null,\n    'send' : IDL.Nat,\n    'sendAll' : IDL.Null,\n  });\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const ICP = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Memo = IDL.Nat64;\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const Timestamp__3 = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const TransferArgs__1 = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : ICP,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(Timestamp__3),\n    'amount' : ICP,\n  });\n  const CallType = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : Account,\n      'icrc1_transfer' : TransferArgs,\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : ApproveArgs,\n      'icrc2_transfer_from' : TransferFromArgs,\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Principal, IDL.Nat),\n      'dip20Send' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Nat),\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : IDL.Tuple(IDL.Principal, IDL.Principal, IDL.Nat),\n      'approve' : IDL.Tuple(IDL.Principal, IDL.Nat),\n      'balanceOf' : IDL.Principal,\n      'transfer' : IDL.Tuple(IDL.Principal, IDL.Nat),\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Tuple(\n        IDL.Vec(To),\n        IDL.Vec(Amount__2),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'approve' : IDL.Tuple(\n        Spender,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'balanceOf' : Address__1,\n      'txnRecord' : BlobFill,\n      'lockTransfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'dropAccount' : IDL.Opt(Sa__1),\n      'executeTransfer' : IDL.Tuple(\n        BlobFill,\n        ExecuteType,\n        IDL.Opt(To),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'lockTransferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : AccountBalanceArgs,\n      'transfer' : TransferArgs__1,\n    }),\n    'ICTokens' : IDL.Variant({\n      'burn' : IDL.Tuple(\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'mint' : IDL.Tuple(\n        Address__1,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    '__skip' : IDL.Null,\n  });\n  const Attempts = IDL.Nat;\n  const Callee__1 = IDL.Principal;\n  const Compensation = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Task__2 = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Ttid__2 = IDL.Nat;\n  const SagaTask = IDL.Record({\n    'status' : Status__3,\n    'comp' : IDL.Opt(Compensation),\n    'task' : Task__2,\n    'ttid' : Ttid__2,\n  });\n  List_1.fill(IDL.Opt(IDL.Tuple(SagaTask, List_1)));\n  const Tcid = IDL.Nat;\n  const CompTask = IDL.Record({\n    'status' : Status__3,\n    'comp' : Compensation,\n    'tcid' : Tcid,\n    'forTtid' : Ttid__2,\n  });\n  List.fill(IDL.Opt(IDL.Tuple(CompTask, List)));\n  const CompStrategy = IDL.Variant({\n    'Backward' : IDL.Null,\n    'Forward' : IDL.Null,\n  });\n  const Order = IDL.Record({\n    'status' : OrderStatus,\n    'tasks' : List_1,\n    'callbackStatus' : IDL.Opt(Status__3),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Text,\n    'comps' : List,\n    'time' : Time,\n    'compStrategy' : CompStrategy,\n    'allowPushing' : IDL.Variant({ 'Opening' : IDL.Null, 'Closed' : IDL.Null }),\n  });\n  const Task__1 = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const Callee = IDL.Principal;\n  const CalleeStatus = IDL.Record({\n    'continuousFailure' : IDL.Nat,\n    'successCount' : IDL.Nat,\n    'failureCount' : IDL.Nat,\n  });\n  const Status__1 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Duration = IDL.Nat64;\n  const TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Null,\n    'TooOld' : IDL.Record({ 'allowed_window_nanos' : Duration }),\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const ApproveError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const TransferFromError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'InsufficientAllowance' : IDL.Record({ 'allowance' : IDL.Nat }),\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const TxReceipt = IDL.Variant({\n    'Ok' : IDL.Nat,\n    'Err' : IDL.Variant({\n      'InsufficientAllowance' : IDL.Null,\n      'InsufficientBalance' : IDL.Null,\n      'ErrorOperationStyle' : IDL.Null,\n      'Unauthorized' : IDL.Null,\n      'LedgerTrap' : IDL.Null,\n      'ErrorTo' : IDL.Null,\n      'Other' : IDL.Text,\n      'BlockUsed' : IDL.Null,\n      'AmountTooSmall' : IDL.Null,\n    }),\n  });\n  const Txid__4 = IDL.Vec(IDL.Nat8);\n  const TxnResult = IDL.Variant({\n    'ok' : Txid__4,\n    'err' : IDL.Record({\n      'code' : IDL.Variant({\n        'NonceError' : IDL.Null,\n        'InsufficientGas' : IDL.Null,\n        'InsufficientAllowance' : IDL.Null,\n        'UndefinedError' : IDL.Null,\n        'InsufficientBalance' : IDL.Null,\n        'NoLockedTransfer' : IDL.Null,\n        'DuplicateExecutedTransfer' : IDL.Null,\n        'LockedTransferExpired' : IDL.Null,\n      }),\n      'message' : IDL.Text,\n    }),\n  });\n  const Gas = IDL.Variant({\n    'token' : IDL.Nat,\n    'cycles' : IDL.Nat,\n    'noFee' : IDL.Null,\n  });\n  const AccountId__3 = IDL.Vec(IDL.Nat8);\n  const Time__1 = IDL.Int;\n  const Operation = IDL.Variant({\n    'approve' : IDL.Record({ 'allowance' : IDL.Nat }),\n    'lockTransfer' : IDL.Record({\n      'locked' : IDL.Nat,\n      'expiration' : Time__1,\n      'decider' : AccountId__3,\n    }),\n    'transfer' : IDL.Record({\n      'action' : IDL.Variant({\n        'burn' : IDL.Null,\n        'mint' : IDL.Null,\n        'send' : IDL.Null,\n      }),\n    }),\n    'executeTransfer' : IDL.Record({\n      'fallback' : IDL.Nat,\n      'lockedTxid' : Txid__4,\n    }),\n  });\n  const Transaction = IDL.Record({\n    'to' : AccountId__3,\n    'value' : IDL.Nat,\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from' : AccountId__3,\n    'operation' : Operation,\n  });\n  const TxnRecord__2 = IDL.Record({\n    'gas' : Gas,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'transaction' : Transaction,\n    'txid' : Txid__4,\n    'nonce' : IDL.Nat,\n    'timestamp' : Time__1,\n    'caller' : AccountId__3,\n    'index' : IDL.Nat,\n  });\n  const TransferError__1 = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : IDL.Nat }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : IDL.Nat }),\n    'BadFee' : IDL.Record({ 'expected_fee' : IDL.Nat }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : IDL.Nat }),\n  });\n  const BlockIndex = IDL.Nat64;\n  const TransferError__2 = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : ICP }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : ICP }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError__2,\n  });\n  const Receipt = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : IDL.Nat,\n      'icrc1_transfer' : IDL.Variant({ 'Ok' : IDL.Nat, 'Err' : TransferError }),\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : IDL.Variant({ 'Ok' : IDL.Nat, 'Err' : ApproveError }),\n      'icrc2_transfer_from' : IDL.Variant({\n        'Ok' : IDL.Nat,\n        'Err' : TransferFromError,\n      }),\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Null,\n      'dip20Send' : IDL.Null,\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : TxReceipt,\n      'approve' : TxReceipt,\n      'balanceOf' : IDL.Nat,\n      'transfer' : TxReceipt,\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Vec(TxnResult),\n      'transferFrom' : TxnResult,\n      'approve' : TxnResult,\n      'balanceOf' : Amount__2,\n      'txnRecord' : IDL.Opt(TxnRecord__2),\n      'lockTransfer' : TxnResult,\n      'transfer' : TxnResult,\n      'dropAccount' : IDL.Null,\n      'executeTransfer' : TxnResult,\n      'lockTransferFrom' : TxnResult,\n    }),\n    'ICRC1New' : IDL.Variant({\n      'icrc1_balance_of' : IDL.Nat,\n      'icrc1_transfer' : IDL.Variant({\n        'Ok' : IDL.Nat,\n        'Err' : TransferError__1,\n      }),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : ICP,\n      'transfer' : TransferResult,\n    }),\n    'ICTokens' : IDL.Variant({ 'burn' : TxnResult, 'mint' : TxnResult }),\n    '__skip' : IDL.Null,\n  });\n  const ErrorCode = IDL.Variant({\n    'canister_error' : IDL.Null,\n    'call_error' : IDL.Record({ 'err_code' : IDL.Nat32 }),\n    'system_transient' : IDL.Null,\n    'future' : IDL.Nat32,\n    'canister_reject' : IDL.Null,\n    'destination_invalid' : IDL.Null,\n    'system_fatal' : IDL.Null,\n  });\n  const Err = IDL.Record({ 'code' : ErrorCode, 'message' : IDL.Text });\n  const TaskResult = IDL.Tuple(Status__1, IDL.Opt(Receipt), IDL.Opt(Err));\n  const ErrorLog = IDL.Record({\n    'result' : IDL.Opt(TaskResult),\n    'time' : Time,\n    'ttid' : Ttid__1,\n    'callee' : IDL.Opt(Callee__1),\n  });\n  const Status__2 = IDL.Variant({\n    'Error' : IDL.Null,\n    'Done' : IDL.Null,\n    'Todo' : IDL.Null,\n    'Doing' : IDL.Null,\n    'Unknown' : IDL.Null,\n  });\n  const Task = IDL.Record({\n    'preTtid' : IDL.Vec(Ttid__1),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'callType' : CallType,\n    'cycles' : IDL.Nat,\n    'recallInterval' : IDL.Int,\n    'attemptsMax' : Attempts,\n    'callee' : Callee__1,\n    'forTtid' : IDL.Opt(Ttid__1),\n  });\n  const TaskEvent = IDL.Record({\n    'result' : TaskResult,\n    'callbackStatus' : IDL.Opt(Status__2),\n    'task' : Task,\n    'time' : Time,\n    'toid' : IDL.Opt(Toid__1),\n    'ttid' : Ttid__1,\n    'attempts' : Attempts,\n    'txHash' : IDL.Vec(IDL.Nat8),\n  });\n  const SagaData = IDL.Record({\n    'orders' : IDL.Vec(IDL.Tuple(Toid__2, Order)),\n    'autoClearTimeout' : IDL.Int,\n    'aliveOrders' : IDL.Vec(IDL.Tuple(Toid__2, Time)),\n    'index' : IDL.Nat,\n    'actuator' : IDL.Record({\n      'tasks' : IDL.Tuple(\n        IDL.Vec(IDL.Tuple(Ttid, Task__1)),\n        IDL.Vec(IDL.Tuple(Ttid, Task__1)),\n      ),\n      'callees' : IDL.Vec(IDL.Tuple(Callee, CalleeStatus)),\n      'errorLogs' : IDL.Vec(IDL.Tuple(IDL.Nat, ErrorLog)),\n      'taskLogs' : IDL.Vec(IDL.Tuple(Ttid, TaskEvent)),\n      'index' : IDL.Nat,\n      'firstErrIndex' : IDL.Nat,\n      'errIndex' : IDL.Nat,\n      'firstIndex' : IDL.Nat,\n    }),\n    'taskEvents' : IDL.Vec(IDL.Tuple(Toid__2, IDL.Vec(Ttid))),\n    'firstIndex' : IDL.Nat,\n  });\n  const RoundItem = IDL.Record({\n    'end' : Time,\n    'content' : IDL.Text,\n    'isSettled' : IDL.Bool,\n    'name' : IDL.Text,\n    'minCapital' : IDL.Nat,\n    'start' : Time,\n    'closedPrice' : IDL.Opt(IDL.Float64),\n    'quoteToken' : IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n  });\n  const AmbassadorData = IDL.Tuple(IDL.Text, IDL.Nat, Vol__1);\n  const BackupResponse = IDL.Variant({\n    'timeSortedTxids' : IDL.Tuple(\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n      IDL.Vec(IDL.Tuple(Txid__3, Time)),\n    ),\n    'icdex_failedOrders' : IDL.Vec(IDL.Tuple(Txid__3, TradingOrder)),\n    'icdex_makers' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Nat, IDL.Principal))\n    ),\n    'drc205Data' : DRC205Data,\n    'icdex_vols' : IDL.Vec(IDL.Tuple(AccountId__2, Vol__1)),\n    'icdex_pendingOrders' : IDL.Vec(IDL.Tuple(AccountId__2, IDL.Vec(Txid__3))),\n    'ictcTaskCallbackEvents' : IDL.Vec(IDL.Tuple(Ttid, Time)),\n    'otherData' : IDL.Record({\n      'icdex_totalFee' : FeeBalance,\n      'icdex_totalVol' : Vol__1,\n      'activeRound' : IDL.Nat,\n      'icdex_index' : IDL.Nat,\n      'icdex_lastPrice' : OrderPrice__1,\n      'icdex_priceWeighted' : PriceWeighted,\n      'taDescription' : IDL.Text,\n    }),\n    'icdex_dip20Balances' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(IDL.Principal, IDL.Nat))\n    ),\n    'clearingTxids' : IDL.Vec(Txid__3),\n    'icdex_nonces' : IDL.Vec(IDL.Tuple(AccountId__2, Nonce__2)),\n    'competitors' : IDL.Vec(\n      IDL.Tuple(IDL.Nat, IDL.Vec(IDL.Tuple(AccountId__2, CompResult)))\n    ),\n    'icdex_klines2' : IDL.Vec(\n      IDL.Tuple(KInterval, IDL.Tuple(IDL.Vec(KBar), IDL.Vec(KBar)))\n    ),\n    'sagaData' : SagaData,\n    'icdex_orders' : IDL.Vec(IDL.Tuple(Txid__3, TradingOrder)),\n    'icdex_orderBook' : IDL.Record({\n      'ask' : IDL.Vec(IDL.Tuple(Txid__3, OrderPrice__1)),\n      'bid' : IDL.Vec(IDL.Tuple(Txid__3, OrderPrice__1)),\n    }),\n    'rounds' : IDL.Vec(IDL.Tuple(IDL.Nat, RoundItem)),\n    'traderReferrers' : IDL.Vec(IDL.Tuple(AccountId__2, AccountId__2)),\n    'traderReferrerTemps' : IDL.Vec(\n      IDL.Tuple(AccountId__2, IDL.Tuple(AccountId__2, IDL.Text, Time))\n    ),\n    'ambassadors' : IDL.Vec(IDL.Tuple(AccountId__2, AmbassadorData)),\n  });\n  const Nonce = IDL.Nat;\n  const Txid__1 = IDL.Vec(IDL.Nat8);\n  const Subaccount__1 = IDL.Vec(IDL.Nat8);\n  const Account__1 = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount__1),\n  });\n  const Vol = IDL.Record({ 'value0' : Amount, 'value1' : Amount });\n  const CompCapital__1 = IDL.Record({\n    'total' : IDL.Float64,\n    'value0' : IDL.Nat,\n    'value1' : IDL.Nat,\n  });\n  const CompResult__1 = IDL.Record({\n    'vol' : Vol,\n    'status' : IDL.Variant({ 'Active' : IDL.Null, 'Dropout' : IDL.Null }),\n    'icrc1Account' : Account__1,\n    'capital' : CompCapital__1,\n    'assetValue' : IDL.Opt(CompCapital__1),\n  });\n  const ListPage = IDL.Nat;\n  const ListSize = IDL.Nat;\n  const AccountId__4 = IDL.Vec(IDL.Nat8);\n  const RoundItem__1 = IDL.Record({\n    'end' : Time,\n    'content' : IDL.Text,\n    'isSettled' : IDL.Bool,\n    'name' : IDL.Text,\n    'minCapital' : IDL.Nat,\n    'start' : Time,\n    'closedPrice' : IDL.Opt(IDL.Float64),\n    'quoteToken' : IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n  });\n  const IcpE8s = IDL.Nat;\n  const DexConfig = IDL.Record({\n    'MAX_TPS' : IDL.Opt(IDL.Nat),\n    'ICTC_RUN_INTERVAL' : IDL.Opt(IDL.Nat),\n    'MAKER_BONUS_RATE' : IDL.Opt(IDL.Nat),\n    'MAX_PENDINGS' : IDL.Opt(IDL.Nat),\n    'ORDER_EXPIRATION_DURATION' : IDL.Opt(IDL.Int),\n    'TRADING_FEE' : IDL.Opt(IDL.Nat),\n    'UNIT_SIZE' : IDL.Opt(IDL.Nat),\n    'STORAGE_INTERVAL' : IDL.Opt(IDL.Nat),\n    'ICP_FEE' : IDL.Opt(IcpE8s),\n  });\n  const Config = IDL.Record({\n    'MAX_STORAGE_TRIES' : IDL.Opt(IDL.Nat),\n    'EN_DEBUG' : IDL.Opt(IDL.Bool),\n    'MAX_CACHE_NUMBER_PER' : IDL.Opt(IDL.Nat),\n    'MAX_CACHE_TIME' : IDL.Opt(IDL.Nat),\n  });\n  const TokenType = IDL.Variant({\n    'Icp' : IDL.Null,\n    'Token' : IDL.Principal,\n    'Cycles' : IDL.Null,\n  });\n  const TokenStd__1 = IDL.Variant({\n    'dft' : IDL.Null,\n    'ext' : IDL.Null,\n    'icp' : IDL.Null,\n    'other' : IDL.Text,\n    'cycles' : IDL.Null,\n    'ledger' : IDL.Null,\n    'icrc1' : IDL.Null,\n    'dip20' : IDL.Null,\n    'drc20' : IDL.Null,\n  });\n  const DexInfo = IDL.Record({\n    'feeRate' : IDL.Float64,\n    'mmType' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'token0' : IDL.Tuple(TokenType, TokenStd__1),\n    'token1' : IDL.Tuple(TokenType, TokenStd__1),\n    'pairName' : IDL.Text,\n    'dexName' : IDL.Text,\n    'canisterId' : IDL.Principal,\n  });\n  const Address__2 = IDL.Text;\n  const TxnRecord__3 = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const Txid__5 = IDL.Vec(IDL.Nat8);\n  const DRC207Support = IDL.Record({\n    'timer' : IDL.Record({\n      'interval_seconds' : IDL.Opt(IDL.Nat),\n      'enable' : IDL.Bool,\n    }),\n    'monitorable_by_self' : IDL.Bool,\n    'monitorable_by_blackhole' : IDL.Record({\n      'canister_id' : IDL.Opt(IDL.Principal),\n      'allowed' : IDL.Bool,\n    }),\n    'cycles_receivable' : IDL.Bool,\n  });\n  const FeeStatus = IDL.Record({\n    'feeRate' : IDL.Float64,\n    'feeBalance' : FeeBalance,\n    'totalFee' : FeeBalance,\n  });\n  const DexSetting = IDL.Record({\n    'MAX_TPS' : IDL.Nat,\n    'ICTC_RUN_INTERVAL' : IDL.Nat,\n    'MAKER_BONUS_RATE' : IDL.Nat,\n    'MAX_PENDINGS' : IDL.Nat,\n    'TRADING_FEE' : IDL.Nat,\n    'UNIT_SIZE' : IDL.Nat,\n    'STORAGE_INTERVAL' : IDL.Nat,\n    'ICP_FEE' : IcpE8s,\n  });\n  const TxAccount = IDL.Text;\n  const Toid__3 = IDL.Nat;\n  const CallType__1 = IDL.Variant({\n    '__block' : IDL.Null,\n    'ICRC1' : IDL.Variant({\n      'icrc1_balance_of' : Account,\n      'icrc1_transfer' : TransferArgs,\n    }),\n    'ICRC2' : IDL.Variant({\n      'icrc2_approve' : ApproveArgs,\n      'icrc2_transfer_from' : TransferFromArgs,\n    }),\n    'This' : IDL.Variant({\n      'dip20SendComp' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Principal, IDL.Nat),\n      'dip20Send' : IDL.Tuple(IDL.Vec(IDL.Nat8), IDL.Nat),\n    }),\n    'DIP20' : IDL.Variant({\n      'transferFrom' : IDL.Tuple(IDL.Principal, IDL.Principal, IDL.Nat),\n      'approve' : IDL.Tuple(IDL.Principal, IDL.Nat),\n      'balanceOf' : IDL.Principal,\n      'transfer' : IDL.Tuple(IDL.Principal, IDL.Nat),\n    }),\n    'DRC20' : IDL.Variant({\n      'transferBatch' : IDL.Tuple(\n        IDL.Vec(To),\n        IDL.Vec(Amount__2),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'approve' : IDL.Tuple(\n        Spender,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'balanceOf' : Address__1,\n      'txnRecord' : BlobFill,\n      'lockTransfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'transfer' : IDL.Tuple(\n        To,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'dropAccount' : IDL.Opt(Sa__1),\n      'executeTransfer' : IDL.Tuple(\n        BlobFill,\n        ExecuteType,\n        IDL.Opt(To),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'lockTransferFrom' : IDL.Tuple(\n        From,\n        To,\n        Amount__2,\n        Timeout,\n        IDL.Opt(Decider),\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    'Ledger' : IDL.Variant({\n      'account_balance' : AccountBalanceArgs,\n      'transfer' : TransferArgs__1,\n    }),\n    'ICTokens' : IDL.Variant({\n      'burn' : IDL.Tuple(\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Sa__1),\n        IDL.Opt(Data__2),\n      ),\n      'mint' : IDL.Tuple(\n        Address__1,\n        Amount__2,\n        IDL.Opt(Nonce__3),\n        IDL.Opt(Data__2),\n      ),\n    }),\n    '__skip' : IDL.Null,\n  });\n  const Order__1 = IDL.Record({\n    'status' : OrderStatus,\n    'tasks' : List_1,\n    'callbackStatus' : IDL.Opt(Status__3),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'name' : IDL.Text,\n    'comps' : List,\n    'time' : Time,\n    'compStrategy' : CompStrategy,\n    'allowPushing' : IDL.Variant({ 'Opening' : IDL.Null, 'Closed' : IDL.Null }),\n  });\n  const TokenSymbol = IDL.Text;\n  const TokenStd = IDL.Variant({\n    'dft' : IDL.Null,\n    'ext' : IDL.Null,\n    'icp' : IDL.Null,\n    'other' : IDL.Text,\n    'cycles' : IDL.Null,\n    'ledger' : IDL.Null,\n    'icrc1' : IDL.Null,\n    'dip20' : IDL.Null,\n    'drc20' : IDL.Null,\n  });\n  const TokenInfo = IDL.Tuple(IDL.Principal, TokenSymbol, TokenStd);\n  const Timestamp__4 = IDL.Nat;\n  const OrderFilled__1 = IDL.Record({\n    'time' : Time,\n    'token0Value' : BalanceChange,\n    'counterparty' : Txid,\n    'token1Value' : BalanceChange,\n  });\n  const OrderSide = IDL.Variant({ 'Buy' : IDL.Null, 'Sell' : IDL.Null });\n  const PriceResponse = IDL.Record({ 'quantity' : IDL.Nat, 'price' : IDL.Nat });\n  const Liquidity = IDL.Record({\n    'vol' : Vol__1,\n    'shares' : Amount,\n    'shareWeighted' : IDL.Record({\n      'updateTime' : Timestamp__1,\n      'shareTimeWeighted' : IDL.Nat,\n    }),\n    'unitValue' : IDL.Tuple(Amount, Amount),\n    'value0' : Amount,\n    'value1' : Amount,\n    'priceWeighted' : PriceWeighted,\n    'swapCount' : IDL.Nat64,\n  });\n  const TradingOrder__1 = IDL.Record({\n    'fee' : IDL.Record({ 'fee0' : IDL.Int, 'fee1' : IDL.Int }),\n    'gas' : IDL.Record({ 'gas0' : IDL.Nat, 'gas1' : IDL.Nat }),\n    'status' : TradingStatus,\n    'toids' : IDL.Vec(Toid),\n    'data' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'time' : Time,\n    'txid' : Txid,\n    'icrc1Account' : IDL.Opt(\n      IDL.Record({\n        'owner' : IDL.Principal,\n        'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n      })\n    ),\n    'orderType' : OrderType__1,\n    'filled' : IDL.Vec(OrderFilled),\n    'expiration' : Time,\n    'nonce' : IDL.Nat,\n    'account' : AccountId__1,\n    'remaining' : OrderPrice__1,\n    'index' : IDL.Nat,\n    'orderPrice' : OrderPrice__1,\n    'refund' : IDL.Tuple(IDL.Nat, IDL.Nat, IDL.Nat),\n  });\n  const TrieList = IDL.Record({\n    'total' : IDL.Nat,\n    'data' : IDL.Vec(IDL.Tuple(Txid__1, TradingOrder__1)),\n    'totalPage' : IDL.Nat,\n  });\n  const TxnRecord = IDL.Record({\n    'fee' : IDL.Record({ 'token0Fee' : IDL.Int, 'token1Fee' : IDL.Int }),\n    'status' : Status,\n    'shares' : ShareChange,\n    'msgCaller' : IDL.Opt(IDL.Principal),\n    'order' : IDL.Record({\n      'token0Value' : IDL.Opt(BalanceChange__1),\n      'token1Value' : IDL.Opt(BalanceChange__1),\n    }),\n    'data' : IDL.Opt(Data__1),\n    'time' : Time,\n    'txid' : Txid__2,\n    'orderMode' : IDL.Variant({ 'AMM' : IDL.Null, 'OrderBook' : IDL.Null }),\n    'orderType' : IDL.Opt(\n      IDL.Variant({\n        'FAK' : IDL.Null,\n        'FOK' : IDL.Null,\n        'LMT' : IDL.Null,\n        'MKT' : IDL.Null,\n      })\n    ),\n    'filled' : IDL.Record({\n      'token0Value' : BalanceChange__1,\n      'token1Value' : BalanceChange__1,\n    }),\n    'token0' : TokenType__1,\n    'token1' : TokenType__1,\n    'nonce' : Nonce__1,\n    'operation' : OperationType,\n    'account' : AccountId,\n    'details' : IDL.Vec(\n      IDL.Record({\n        'time' : Time,\n        'token0Value' : BalanceChange__1,\n        'counterparty' : Txid__2,\n        'token1Value' : BalanceChange__1,\n      })\n    ),\n    'caller' : AccountId,\n    'index' : IDL.Nat,\n    'cyclesWallet' : IDL.Opt(CyclesWallet),\n  });\n  const OrderStatusResponse = IDL.Variant({\n    'Failed' : TradingOrder,\n    'None' : IDL.Null,\n    'Completed' : TxnRecord,\n    'Pending' : TradingOrder,\n  });\n  const SysMode = IDL.Variant({\n    'DisabledTrading' : IDL.Null,\n    'ReadOnly' : IDL.Null,\n    'ClosingOnly' : IDL.Null,\n    'GeneralTrading' : IDL.Null,\n  });\n  const OrderPrice = IDL.Record({\n    'quantity' : IDL.Variant({\n      'Buy' : IDL.Tuple(Quantity, Amount),\n      'Sell' : Quantity,\n    }),\n    'price' : Price,\n  });\n  const OrderType = IDL.Variant({\n    'FAK' : IDL.Null,\n    'FOK' : IDL.Null,\n    'LMT' : IDL.Null,\n    'MKT' : IDL.Null,\n  });\n  const PeriodNs = IDL.Int;\n  const Data = IDL.Vec(IDL.Nat8);\n  const TradingResult = IDL.Variant({\n    'ok' : IDL.Record({\n      'status' : TradingStatus,\n      'txid' : Txid,\n      'filled' : IDL.Vec(OrderFilled),\n    }),\n    'err' : IDL.Record({\n      'code' : IDL.Variant({\n        'NonceError' : IDL.Null,\n        'InvalidAmount' : IDL.Null,\n        'UndefinedError' : IDL.Null,\n        'UnacceptableVolatility' : IDL.Null,\n        'TransactionBlocking' : IDL.Null,\n        'InsufficientBalance' : IDL.Null,\n        'TransferException' : IDL.Null,\n      }),\n      'message' : IDL.Text,\n    }),\n  });\n  const DebitToken = IDL.Principal;\n  return IDL.Service({\n    'IDO_config' : IDL.Func([IDOSetting], [], []),\n    'IDO_getConfig' : IDL.Func(\n        [],\n        [IDL.Opt(IDL.Principal), IDOSetting, IDL.Opt(IDORequirement)],\n        ['query'],\n      ),\n    'IDO_qualification' : IDL.Func(\n        [IDL.Opt(Address)],\n        [IDL.Vec(IDL.Tuple(Address, Participant))],\n        ['query'],\n      ),\n    'IDO_removeWhitelist' : IDL.Func([IDL.Vec(Address)], [], []),\n    'IDO_setFunder' : IDL.Func(\n        [IDL.Opt(IDL.Principal), IDL.Opt(IDORequirement)],\n        [],\n        [],\n      ),\n    'IDO_setWhitelist' : IDL.Func(\n        [IDL.Vec(IDL.Tuple(Address, Amount__1))],\n        [],\n        [],\n      ),\n    'IDO_updateQualification' : IDL.Func(\n        [IDL.Opt(Sa)],\n        [IDL.Opt(Participant)],\n        [],\n      ),\n    'backup' : IDL.Func([BackupRequest], [BackupResponse], []),\n    'cancel' : IDL.Func([Nonce, IDL.Opt(Sa)], [], []),\n    'cancelByTxid' : IDL.Func([Txid__1, IDL.Opt(Sa)], [], []),\n    'changeOwner' : IDL.Func([IDL.Principal], [IDL.Bool], []),\n    'comp_deposit' : IDL.Func([Amount__1, Amount__1, IDL.Opt(Sa)], [], []),\n    'comp_dropout' : IDL.Func([IDL.Opt(Sa)], [IDL.Bool], []),\n    'comp_fallback' : IDL.Func([IDL.Opt(Sa)], [Amount__1, Amount__1], []),\n    'comp_getDepositAccount' : IDL.Func(\n        [Address],\n        [\n          IDL.Record({\n            'depositing' : IDL.Tuple(Account__1, Address),\n            'balance' : IDL.Tuple(Account__1, Address),\n          }),\n        ],\n        ['query'],\n      ),\n    'comp_newRound' : IDL.Func(\n        [\n          IDL.Text,\n          IDL.Text,\n          Time,\n          Time,\n          IDL.Variant({ 'token0' : IDL.Null, 'token1' : IDL.Null }),\n          IDL.Nat,\n          IDL.Bool,\n        ],\n        [IDL.Nat],\n        [],\n      ),\n    'comp_register' : IDL.Func([IDL.Opt(Sa)], [IDL.Bool], []),\n    'comp_result' : IDL.Func(\n        [IDL.Opt(IDL.Nat), Address],\n        [IDL.Opt(CompResult__1)],\n        ['query'],\n      ),\n    'comp_results' : IDL.Func(\n        [IDL.Opt(IDL.Nat), ListPage, ListSize],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(AccountId__4, CompResult__1)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'comp_round' : IDL.Func(\n        [IDL.Opt(IDL.Nat)],\n        [IDL.Nat, IDL.Opt(RoundItem__1)],\n        ['query'],\n      ),\n    'comp_settle' : IDL.Func([IDL.Nat], [], []),\n    'comp_withdraw' : IDL.Func([IDL.Opt(Sa)], [Amount__1, Amount__1], []),\n    'config' : IDL.Func([DexConfig], [IDL.Bool], []),\n    'count' : IDL.Func([IDL.Opt(Address)], [IDL.Nat], ['query']),\n    'drc205_canisterId' : IDL.Func([], [IDL.Principal], ['query']),\n    'drc205_config' : IDL.Func([Config], [IDL.Bool], []),\n    'drc205_dexInfo' : IDL.Func([], [DexInfo], ['query']),\n    'drc205_events' : IDL.Func(\n        [IDL.Opt(Address__2)],\n        [IDL.Vec(TxnRecord__3)],\n        ['query'],\n      ),\n    'drc205_getConfig' : IDL.Func([], [Setting], ['query']),\n    'drc205_pool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Txid__1, TxnRecord__3, IDL.Nat))],\n        ['query'],\n      ),\n    'drc205_txn' : IDL.Func([Txid__5], [IDL.Opt(TxnRecord__3)], ['query']),\n    'drc205_txn2' : IDL.Func([Txid__5], [IDL.Opt(TxnRecord__3)], []),\n    'drc207' : IDL.Func([], [DRC207Support], ['query']),\n    'fallback' : IDL.Func([Nonce, IDL.Opt(Sa)], [IDL.Bool], []),\n    'fallbackByTxid' : IDL.Func([Txid__1, IDL.Opt(Sa)], [IDL.Bool], []),\n    'fee' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'maker' : IDL.Record({ 'buy' : IDL.Float64, 'sell' : IDL.Float64 }),\n            'taker' : IDL.Record({ 'buy' : IDL.Float64, 'sell' : IDL.Float64 }),\n          }),\n        ],\n        ['query'],\n      ),\n    'feeStatus' : IDL.Func([], [FeeStatus], ['query']),\n    'getConfig' : IDL.Func([], [DexSetting], ['query']),\n    'getOwner' : IDL.Func([], [IDL.Principal], ['query']),\n    'getQuotes' : IDL.Func([KInterval], [IDL.Vec(KBar)], ['query']),\n    'getTxAccount' : IDL.Func(\n        [Address],\n        [Account__1, TxAccount, Nonce, Txid__1],\n        ['query'],\n      ),\n    'ictc_TM' : IDL.Func([], [IDL.Text], ['query']),\n    'ictc_addAdmin' : IDL.Func([IDL.Principal], [], []),\n    'ictc_appendTT' : IDL.Func(\n        [\n          IDL.Opt(IDL.Vec(IDL.Nat8)),\n          Toid__3,\n          IDL.Opt(Ttid__2),\n          IDL.Principal,\n          CallType__1,\n          IDL.Vec(Ttid__2),\n        ],\n        [Ttid__2],\n        [],\n      ),\n    'ictc_blockTO' : IDL.Func([Toid__3], [IDL.Opt(Toid__3)], []),\n    'ictc_clearLog' : IDL.Func([IDL.Opt(IDL.Int), IDL.Bool], [], []),\n    'ictc_clearTTPool' : IDL.Func([], [], []),\n    'ictc_completeTO' : IDL.Func([Toid__3, OrderStatus], [IDL.Bool], []),\n    'ictc_doneTO' : IDL.Func([Toid__3, OrderStatus, IDL.Bool], [IDL.Bool], []),\n    'ictc_doneTT' : IDL.Func(\n        [Toid__3, Ttid__2, IDL.Bool],\n        [IDL.Opt(Ttid__2)],\n        [],\n      ),\n    'ictc_getAdmins' : IDL.Func([], [IDL.Vec(IDL.Principal)], ['query']),\n    'ictc_getCalleeStatus' : IDL.Func(\n        [IDL.Principal],\n        [IDL.Opt(CalleeStatus)],\n        ['query'],\n      ),\n    'ictc_getPool' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'ttPool' : IDL.Record({\n              'total' : IDL.Nat,\n              'items' : IDL.Vec(IDL.Tuple(Ttid__2, Task__2)),\n            }),\n            'toPool' : IDL.Record({\n              'total' : IDL.Nat,\n              'items' : IDL.Vec(IDL.Tuple(Toid__3, IDL.Opt(Order__1))),\n            }),\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTO' : IDL.Func([Toid__3], [IDL.Opt(Order__1)], ['query']),\n    'ictc_getTOCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'ictc_getTOPool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Toid__3, IDL.Opt(Order__1)))],\n        ['query'],\n      ),\n    'ictc_getTOs' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(Toid__3, Order__1)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTT' : IDL.Func([Ttid__2], [IDL.Opt(TaskEvent)], ['query']),\n    'ictc_getTTByTO' : IDL.Func([Toid__3], [IDL.Vec(TaskEvent)], ['query']),\n    'ictc_getTTErrors' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(IDL.Nat, ErrorLog)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_getTTPool' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Ttid__2, Task__2))],\n        ['query'],\n      ),\n    'ictc_getTTs' : IDL.Func(\n        [IDL.Nat, IDL.Nat],\n        [\n          IDL.Record({\n            'total' : IDL.Nat,\n            'data' : IDL.Vec(IDL.Tuple(Ttid__2, TaskEvent)),\n            'totalPage' : IDL.Nat,\n          }),\n        ],\n        ['query'],\n      ),\n    'ictc_redoTT' : IDL.Func([Toid__3, Ttid__2], [IDL.Opt(Ttid__2)], []),\n    'ictc_removeAdmin' : IDL.Func([IDL.Principal], [], []),\n    'ictc_runTO' : IDL.Func([Toid__3], [IDL.Opt(OrderStatus)], []),\n    'ictc_runTT' : IDL.Func([], [IDL.Bool], []),\n    'info' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'decimals' : IDL.Nat8,\n            'setting' : DexSetting,\n            'owner' : IDL.Principal,\n            'name' : IDL.Text,\n            'version' : IDL.Text,\n            'token0' : TokenInfo,\n            'token1' : TokenInfo,\n            'paused' : IDL.Bool,\n          }),\n        ],\n        ['query'],\n      ),\n    'init' : IDL.Func([], [], []),\n    'latestFilled' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(Timestamp__4, Txid__1, OrderFilled__1, OrderSide))],\n        ['query'],\n      ),\n    'level10' : IDL.Func(\n        [],\n        [\n          IDL.Nat,\n          IDL.Record({\n            'ask' : IDL.Vec(PriceResponse),\n            'bid' : IDL.Vec(PriceResponse),\n          }),\n        ],\n        ['query'],\n      ),\n    'level100' : IDL.Func(\n        [],\n        [\n          IDL.Nat,\n          IDL.Record({\n            'ask' : IDL.Vec(PriceResponse),\n            'bid' : IDL.Vec(PriceResponse),\n          }),\n        ],\n        ['query'],\n      ),\n    'liquidity' : IDL.Func([IDL.Opt(Address)], [Liquidity], ['query']),\n    'makerRebate' : IDL.Func([Address], [IDL.Float64, IDL.Float64], ['query']),\n    'name' : IDL.Func([], [IDL.Text], ['query']),\n    'orderExpirationDuration' : IDL.Func([], [IDL.Int], ['query']),\n    'pending' : IDL.Func(\n        [IDL.Opt(Address), IDL.Opt(ListPage), IDL.Opt(ListSize)],\n        [TrieList],\n        ['query'],\n      ),\n    'pendingAll' : IDL.Func(\n        [IDL.Opt(ListPage), IDL.Opt(ListSize)],\n        [TrieList],\n        ['query'],\n      ),\n    'pendingCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'prepare' : IDL.Func([Address], [TxAccount, Nonce], ['query']),\n    'recovery' : IDL.Func([BackupResponse], [IDL.Bool], []),\n    'removeVipMaker' : IDL.Func([Address], [], []),\n    'setOrderFail' : IDL.Func([IDL.Text], [IDL.Bool], []),\n    'setPause' : IDL.Func([IDL.Bool, IDL.Opt(Time)], [IDL.Bool], []),\n    'setUpgradeMode' : IDL.Func(\n        [IDL.Variant({ 'All' : IDL.Null, 'Base' : IDL.Null })],\n        [],\n        [],\n      ),\n    'setVipMaker' : IDL.Func([Address, IDL.Nat], [], []),\n    'stats' : IDL.Func(\n        [],\n        [\n          IDL.Record({\n            'change24h' : IDL.Float64,\n            'vol24h' : Vol,\n            'totalVol' : Vol,\n            'price' : IDL.Float64,\n          }),\n        ],\n        ['query'],\n      ),\n    'status' : IDL.Func([Address, Nonce], [OrderStatusResponse], ['query']),\n    'statusByTxid' : IDL.Func([Txid__1], [OrderStatusResponse], ['query']),\n    'sync' : IDL.Func([], [], []),\n    'sysMode' : IDL.Func(\n        [],\n        [IDL.Record({ 'mode' : SysMode, 'openingTime' : Time })],\n        ['query'],\n      ),\n    'ta_ambassador' : IDL.Func(\n        [Address],\n        [IDL.Bool, IDL.Text, IDL.Nat, Vol],\n        ['query'],\n      ),\n    'ta_description' : IDL.Func([], [IDL.Text], ['query']),\n    'ta_getReferrer' : IDL.Func(\n        [Address],\n        [IDL.Opt(IDL.Tuple(Address, IDL.Bool))],\n        ['query'],\n      ),\n    'ta_setDescription' : IDL.Func([IDL.Text], [], []),\n    'ta_setReferrer' : IDL.Func(\n        [Address, IDL.Opt(IDL.Text), IDL.Opt(Sa)],\n        [IDL.Bool],\n        [],\n      ),\n    'ta_stats' : IDL.Func(\n        [IDL.Opt(IDL.Text)],\n        [IDL.Nat, IDL.Nat, Vol],\n        ['query'],\n      ),\n    'timerStart' : IDL.Func([IDL.Nat], [], []),\n    'timerStop' : IDL.Func([], [], []),\n    'token0' : IDL.Func([], [TokenType, IDL.Opt(TokenStd)], ['query']),\n    'token1' : IDL.Func([], [TokenType, IDL.Opt(TokenStd)], ['query']),\n    'tpsStats' : IDL.Func(\n        [],\n        [IDL.Nat, IDL.Float64, IDL.Nat, IDL.Nat, IDL.Int, IDL.Int],\n        ['query'],\n      ),\n    'trade' : IDL.Func(\n        [\n          OrderPrice,\n          OrderType,\n          IDL.Opt(PeriodNs),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'tradeMKT' : IDL.Func(\n        [DebitToken, Amount__1, IDL.Opt(Nonce), IDL.Opt(Sa), IDL.Opt(Data)],\n        [TradingResult],\n        [],\n      ),\n    'tradeMKT_b' : IDL.Func(\n        [\n          DebitToken,\n          Amount__1,\n          IDL.Opt(IDL.Nat),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n          IDL.Opt(\n            IDL.Record({ 'broker' : IDL.Principal, 'rate' : IDL.Float64 })\n          ),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'trade_b' : IDL.Func(\n        [\n          OrderPrice,\n          OrderType,\n          IDL.Opt(PeriodNs),\n          IDL.Opt(Nonce),\n          IDL.Opt(Sa),\n          IDL.Opt(Data),\n          IDL.Opt(\n            IDL.Record({ 'broker' : IDL.Principal, 'rate' : IDL.Float64 })\n          ),\n        ],\n        [TradingResult],\n        [],\n      ),\n    'userCount' : IDL.Func([], [IDL.Nat], ['query']),\n    'version' : IDL.Func([], [IDL.Text], ['query']),\n    'wallet_receive' : IDL.Func([], [], []),\n    'withdraw_cycles' : IDL.Func([IDL.Nat], [], []),\n  });\n};\nexport const init = ({ IDL }) => { return []; };"
                },
                "method": {
                    "name": "stats",
                    "arg": {
                        "type": "tuple",
                        "subitems": []
                    },
                    "result": {
                        "type": "tuple",
                        "subitems": [
                            {
                                "key": "_0_",
                                "type": {
                                    "type": "record",
                                    "subitems": [
                                        {
                                            "key": "change24h",
                                            "type": {
                                                "type": "float64"
                                            }
                                        },
                                        {
                                            "key": "vol24h",
                                            "type": {
                                                "type": "record",
                                                "subitems": [
                                                    {
                                                        "key": "value0",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    },
                                                    {
                                                        "key": "value1",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "key": "totalVol",
                                            "type": {
                                                "type": "record",
                                                "subitems": [
                                                    {
                                                        "key": "value0",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    },
                                                    {
                                                        "key": "value1",
                                                        "type": {
                                                            "type": "nat"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "key": "price",
                                            "type": {
                                                "type": "float64"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                },
                "arg": {
                    "type": {
                        "type": "tuple",
                        "subitems": []
                    },
                    "constraint": {
                        "type": "tuple",
                        "subitems": []
                    }
                },
                "identity": {
                    "from": "anonymous"
                }
            },
            "exported": {
                "target": "inner",
                "name": "3463cdd0-9aa1-47be-9f40-7bcbdd6062ac"
            }
        },
        {
            "source": "inner",
            "inner": {
                "name": "3463cdd0-9aa1-47be-9f40-7bcbdd6062ac",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "extra": {
                    "constant": false
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "data = data[0];\ndata = data['change24h'];\nresult = data;"
                },
                "to": {
                    "type": "float64"
                }
            },
            "exported": {
                "target": "inner",
                "name": ""
            }
        },
        {
            "source": "inner",
            "inner": {
                "name": "3463cdd0-9aa1-47be-9f40-7bcbdd6062ac",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "extra": {
                    "constant": false
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "change24h",
                                        "type": {
                                            "type": "float64"
                                        }
                                    },
                                    {
                                        "key": "vol24h",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "totalVol",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "value0",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                },
                                                {
                                                    "key": "value1",
                                                    "type": {
                                                        "type": "nat"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "key": "price",
                                        "type": {
                                            "type": "float64"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "data = data[0];\ndata = data['price'];\nresult = data;"
                },
                "to": {
                    "type": "float64"
                }
            },
            "exported": {
                "target": "inner",
                "name": "6b25887e-680e-4dcd-982c-5352d5ab4a91"
            }
        },
        {
            "source": "combined",
            "combined": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_1_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_2_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_3_",
                            "type": {
                                "type": "float64"
                            }
                        }
                    ]
                },
                "arg": {
                    "type": {
                        "type": "tuple",
                        "subitems": [
                            {
                                "key": "_0_",
                                "type": {
                                    "type": "float64"
                                }
                            },
                            {
                                "key": "_1_",
                                "type": {
                                    "type": "float64"
                                }
                            },
                            {
                                "key": "_2_",
                                "type": {
                                    "type": "float64"
                                }
                            },
                            {
                                "key": "_3_",
                                "type": {
                                    "type": "float64"
                                }
                            }
                        ]
                    },
                    "constraint": {
                        "type": "tuple",
                        "subitems": [
                            {
                                "type": {
                                    "type": "float64"
                                },
                                "constraint": {
                                    "type": "force",
                                    "source": {
                                        "source": "inner",
                                        "inner": {
                                            "name": "cf0025ae-a732-4419-a51a-81aaf48abf03",
                                            "result": {
                                                "type": "float64"
                                            },
                                            "extra": {
                                                "constant": false
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "type": {
                                    "type": "float64"
                                },
                                "constraint": {
                                    "type": "force",
                                    "source": {
                                        "source": "inner",
                                        "inner": {
                                            "name": "d4566540-d13e-499b-9df8-e2889b3b3b62",
                                            "result": {
                                                "type": "float64"
                                            },
                                            "extra": {
                                                "constant": false
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "type": {
                                    "type": "float64"
                                },
                                "constraint": {
                                    "type": "force",
                                    "source": {
                                        "source": "inner",
                                        "inner": {
                                            "name": "87020f13-f21a-48e0-8db0-09fef581133b",
                                            "result": {
                                                "type": "float64"
                                            },
                                            "extra": {
                                                "constant": false
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "type": {
                                    "type": "float64"
                                },
                                "constraint": {
                                    "type": "force",
                                    "source": {
                                        "source": "inner",
                                        "inner": {
                                            "name": "6b25887e-680e-4dcd-982c-5352d5ab4a91",
                                            "result": {
                                                "type": "float64"
                                            },
                                            "extra": {
                                                "constant": false
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    }
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_1_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_2_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_3_",
                            "type": {
                                "type": "float64"
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "result = {\n  header: ['Symbol', 'Price'],\n  rows: [\n    ['CHAT / ICP', CHAT + ' ICP'],\n    ['SNS1 / ICP', SNS1 + ' ICP'],\n    ['ckBTC / ICP', ckBTC + ' ICP'],\n    ['OGY / ICP', OGY + ' ICP'],\n  ]\n};\nresult = [result];"
                },
                "to": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "header",
                                        "type": {
                                            "type": "vec",
                                            "subtype": {
                                                "type": "text"
                                            }
                                        }
                                    },
                                    {
                                        "key": "rows",
                                        "type": {
                                            "type": "vec",
                                            "subtype": {
                                                "type": "vec",
                                                "subtype": {
                                                    "type": "text"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "names": ["CHAT", "SNS1", "ckBTC", "OGY"]
            },
            "exported": {
                "target": "inner",
                "name": "c4aba3db-8d43-4cb2-b7f0-933a05343bf6"
            }
        },
        {
            "source": "inner",
            "inner": {
                "name": "c4aba3db-8d43-4cb2-b7f0-933a05343bf6",
                "result": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "header",
                                        "type": {
                                            "type": "vec",
                                            "subtype": {
                                                "type": "text"
                                            }
                                        }
                                    },
                                    {
                                        "key": "rows",
                                        "type": {
                                            "type": "vec",
                                            "subtype": {
                                                "type": "vec",
                                                "subtype": {
                                                    "type": "text"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "extra": {
                    "constant": false
                }
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "header",
                                        "type": {
                                            "type": "vec",
                                            "subtype": {
                                                "type": "text"
                                            }
                                        }
                                    },
                                    {
                                        "key": "rows",
                                        "type": {
                                            "type": "vec",
                                            "subtype": {
                                                "type": "vec",
                                                "subtype": {
                                                    "type": "text"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "data = data[0];\nresult = data;"
                },
                "to": {
                    "type": "record",
                    "subitems": [
                        {
                            "key": "header",
                            "type": {
                                "type": "vec",
                                "subtype": {
                                    "type": "text"
                                }
                            }
                        },
                        {
                            "key": "rows",
                            "type": {
                                "type": "vec",
                                "subtype": {
                                    "type": "vec",
                                    "subtype": {
                                        "type": "text"
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "exported": {
                "target": "inner",
                "name": "d3986b02-a73a-45a7-bbba-6bf71b3560ca"
            }
        }
    ],
    "transmits": [
        {
            "transmit": "show",
            "from": {
                "type": "tuple",
                "subitems": [
                    {
                        "key": "_0_",
                        "type": {
                            "type": "tuple",
                            "subitems": [
                                {
                                    "key": "_0_",
                                    "type": {
                                        "type": "record",
                                        "subitems": [
                                            {
                                                "key": "change24h",
                                                "type": {
                                                    "type": "float64"
                                                }
                                            },
                                            {
                                                "key": "vol24h",
                                                "type": {
                                                    "type": "record",
                                                    "subitems": [
                                                        {
                                                            "key": "value0",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        },
                                                        {
                                                            "key": "value1",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "key": "totalVol",
                                                "type": {
                                                    "type": "record",
                                                    "subitems": [
                                                        {
                                                            "key": "value0",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        },
                                                        {
                                                            "key": "value1",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "key": "price",
                                                "type": {
                                                    "type": "float64"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "key": "_1_",
                        "type": {
                            "type": "float64"
                        }
                    },
                    {
                        "key": "_2_",
                        "type": {
                            "type": "float64"
                        }
                    },
                    {
                        "key": "_3_",
                        "type": {
                            "type": "tuple",
                            "subitems": [
                                {
                                    "key": "_0_",
                                    "type": {
                                        "type": "record",
                                        "subitems": [
                                            {
                                                "key": "change24h",
                                                "type": {
                                                    "type": "float64"
                                                }
                                            },
                                            {
                                                "key": "vol24h",
                                                "type": {
                                                    "type": "record",
                                                    "subitems": [
                                                        {
                                                            "key": "value0",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        },
                                                        {
                                                            "key": "value1",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "key": "totalVol",
                                                "type": {
                                                    "type": "record",
                                                    "subitems": [
                                                        {
                                                            "key": "value0",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        },
                                                        {
                                                            "key": "value1",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "key": "price",
                                                "type": {
                                                    "type": "float64"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "key": "_4_",
                        "type": {
                            "type": "float64"
                        }
                    },
                    {
                        "key": "_5_",
                        "type": {
                            "type": "float64"
                        }
                    },
                    {
                        "key": "_6_",
                        "type": {
                            "type": "tuple",
                            "subitems": [
                                {
                                    "key": "_0_",
                                    "type": {
                                        "type": "record",
                                        "subitems": [
                                            {
                                                "key": "change24h",
                                                "type": {
                                                    "type": "float64"
                                                }
                                            },
                                            {
                                                "key": "vol24h",
                                                "type": {
                                                    "type": "record",
                                                    "subitems": [
                                                        {
                                                            "key": "value0",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        },
                                                        {
                                                            "key": "value1",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "key": "totalVol",
                                                "type": {
                                                    "type": "record",
                                                    "subitems": [
                                                        {
                                                            "key": "value0",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        },
                                                        {
                                                            "key": "value1",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "key": "price",
                                                "type": {
                                                    "type": "float64"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "key": "_7_",
                        "type": {
                            "type": "float64"
                        }
                    },
                    {
                        "key": "_8_",
                        "type": {
                            "type": "float64"
                        }
                    },
                    {
                        "key": "_9_",
                        "type": {
                            "type": "tuple",
                            "subitems": [
                                {
                                    "key": "_0_",
                                    "type": {
                                        "type": "record",
                                        "subitems": [
                                            {
                                                "key": "change24h",
                                                "type": {
                                                    "type": "float64"
                                                }
                                            },
                                            {
                                                "key": "vol24h",
                                                "type": {
                                                    "type": "record",
                                                    "subitems": [
                                                        {
                                                            "key": "value0",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        },
                                                        {
                                                            "key": "value1",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "key": "totalVol",
                                                "type": {
                                                    "type": "record",
                                                    "subitems": [
                                                        {
                                                            "key": "value0",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        },
                                                        {
                                                            "key": "value1",
                                                            "type": {
                                                                "type": "nat"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            {
                                                "key": "price",
                                                "type": {
                                                    "type": "float64"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "key": "_10_",
                        "type": {
                            "type": "float64"
                        }
                    },
                    {
                        "key": "_11_",
                        "type": {
                            "type": "float64"
                        }
                    },
                    {
                        "key": "_12_",
                        "type": {
                            "type": "tuple",
                            "subitems": [
                                {
                                    "key": "_0_",
                                    "type": {
                                        "type": "record",
                                        "subitems": [
                                            {
                                                "key": "header",
                                                "type": {
                                                    "type": "vec",
                                                    "subtype": {
                                                        "type": "text"
                                                    }
                                                }
                                            },
                                            {
                                                "key": "rows",
                                                "type": {
                                                    "type": "vec",
                                                    "subtype": {
                                                        "type": "vec",
                                                        "subtype": {
                                                            "type": "text"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "key": "_13_",
                        "type": {
                            "type": "record",
                            "subitems": [
                                {
                                    "key": "header",
                                    "type": {
                                        "type": "vec",
                                        "subtype": {
                                            "type": "text"
                                        }
                                    }
                                },
                                {
                                    "key": "rows",
                                    "type": {
                                        "type": "vec",
                                        "subtype": {
                                            "type": "vec",
                                            "subtype": {
                                                "type": "text"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "transform": {
                "from": {
                    "type": "tuple",
                    "subitems": [
                        {
                            "key": "_0_",
                            "type": {
                                "type": "tuple",
                                "subitems": [
                                    {
                                        "key": "_0_",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "change24h",
                                                    "type": {
                                                        "type": "float64"
                                                    }
                                                },
                                                {
                                                    "key": "vol24h",
                                                    "type": {
                                                        "type": "record",
                                                        "subitems": [
                                                            {
                                                                "key": "value0",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            },
                                                            {
                                                                "key": "value1",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "key": "totalVol",
                                                    "type": {
                                                        "type": "record",
                                                        "subitems": [
                                                            {
                                                                "key": "value0",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            },
                                                            {
                                                                "key": "value1",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "key": "price",
                                                    "type": {
                                                        "type": "float64"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "key": "_1_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_2_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_3_",
                            "type": {
                                "type": "tuple",
                                "subitems": [
                                    {
                                        "key": "_0_",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "change24h",
                                                    "type": {
                                                        "type": "float64"
                                                    }
                                                },
                                                {
                                                    "key": "vol24h",
                                                    "type": {
                                                        "type": "record",
                                                        "subitems": [
                                                            {
                                                                "key": "value0",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            },
                                                            {
                                                                "key": "value1",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "key": "totalVol",
                                                    "type": {
                                                        "type": "record",
                                                        "subitems": [
                                                            {
                                                                "key": "value0",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            },
                                                            {
                                                                "key": "value1",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "key": "price",
                                                    "type": {
                                                        "type": "float64"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "key": "_4_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_5_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_6_",
                            "type": {
                                "type": "tuple",
                                "subitems": [
                                    {
                                        "key": "_0_",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "change24h",
                                                    "type": {
                                                        "type": "float64"
                                                    }
                                                },
                                                {
                                                    "key": "vol24h",
                                                    "type": {
                                                        "type": "record",
                                                        "subitems": [
                                                            {
                                                                "key": "value0",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            },
                                                            {
                                                                "key": "value1",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "key": "totalVol",
                                                    "type": {
                                                        "type": "record",
                                                        "subitems": [
                                                            {
                                                                "key": "value0",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            },
                                                            {
                                                                "key": "value1",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "key": "price",
                                                    "type": {
                                                        "type": "float64"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "key": "_7_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_8_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_9_",
                            "type": {
                                "type": "tuple",
                                "subitems": [
                                    {
                                        "key": "_0_",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "change24h",
                                                    "type": {
                                                        "type": "float64"
                                                    }
                                                },
                                                {
                                                    "key": "vol24h",
                                                    "type": {
                                                        "type": "record",
                                                        "subitems": [
                                                            {
                                                                "key": "value0",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            },
                                                            {
                                                                "key": "value1",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "key": "totalVol",
                                                    "type": {
                                                        "type": "record",
                                                        "subitems": [
                                                            {
                                                                "key": "value0",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            },
                                                            {
                                                                "key": "value1",
                                                                "type": {
                                                                    "type": "nat"
                                                                }
                                                            }
                                                        ]
                                                    }
                                                },
                                                {
                                                    "key": "price",
                                                    "type": {
                                                        "type": "float64"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "key": "_10_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_11_",
                            "type": {
                                "type": "float64"
                            }
                        },
                        {
                            "key": "_12_",
                            "type": {
                                "type": "tuple",
                                "subitems": [
                                    {
                                        "key": "_0_",
                                        "type": {
                                            "type": "record",
                                            "subitems": [
                                                {
                                                    "key": "header",
                                                    "type": {
                                                        "type": "vec",
                                                        "subtype": {
                                                            "type": "text"
                                                        }
                                                    }
                                                },
                                                {
                                                    "key": "rows",
                                                    "type": {
                                                        "type": "vec",
                                                        "subtype": {
                                                            "type": "vec",
                                                            "subtype": {
                                                                "type": "text"
                                                            }
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "key": "_13_",
                            "type": {
                                "type": "record",
                                "subitems": [
                                    {
                                        "key": "header",
                                        "type": {
                                            "type": "vec",
                                            "subtype": {
                                                "type": "text"
                                            }
                                        }
                                    },
                                    {
                                        "key": "rows",
                                        "type": {
                                            "type": "vec",
                                            "subtype": {
                                                "type": "vec",
                                                "subtype": {
                                                    "type": "text"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "transform": {
                    "type": "function",
                    "code": "result = data[13];"
                },
                "to": {
                    "type": "record",
                    "subitems": [
                        {
                            "key": "header",
                            "type": {
                                "type": "vec",
                                "subtype": {
                                    "type": "text"
                                }
                            }
                        },
                        {
                            "key": "rows",
                            "type": {
                                "type": "vec",
                                "subtype": {
                                    "type": "vec",
                                    "subtype": {
                                        "type": "text"
                                    }
                                }
                            }
                        }
                    ]
                }
            },
            "view": {
                "from": {
                    "type": "record",
                    "subitems": [
                        {
                            "key": "header",
                            "type": {
                                "type": "vec",
                                "subtype": {
                                    "type": "text"
                                }
                            }
                        },
                        {
                            "key": "rows",
                            "type": {
                                "type": "vec",
                                "subtype": {
                                    "type": "vec",
                                    "subtype": {
                                        "type": "text"
                                    }
                                }
                            }
                        }
                    ]
                },
                "constraint": {
                    "name": "TableView",
                    "ui": {
                        "customLabel": "CHAT/SNS1/ckBTC/OGY"
                    }
                }
            }
        }
    ],
    "trigger": {
        "type": "loading",
        "sleep": 10000,
        "loading": false,
        "text": "123"
    }
}
